// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.CSharp;

namespace Roslyn.CodeAnalysis.Lightup.CSharp
{
    public class SyntaxKindEx
    {
        public const SyntaxKind GreaterThanGreaterThanGreaterThanToken = (SyntaxKind)8286;
        public const SyntaxKind GreaterThanGreaterThanGreaterThanEqualsToken = (SyntaxKind)8287;
        public const SyntaxKind OrKeyword = (SyntaxKind)8438;
        public const SyntaxKind AndKeyword = (SyntaxKind)8439;
        public const SyntaxKind NotKeyword = (SyntaxKind)8440;
        public const SyntaxKind DataKeyword = (SyntaxKind)8441;
        public const SyntaxKind WithKeyword = (SyntaxKind)8442;
        public const SyntaxKind InitKeyword = (SyntaxKind)8443;
        public const SyntaxKind RecordKeyword = (SyntaxKind)8444;
        public const SyntaxKind ManagedKeyword = (SyntaxKind)8445;
        public const SyntaxKind UnmanagedKeyword = (SyntaxKind)8446;
        public const SyntaxKind RequiredKeyword = (SyntaxKind)8447;
        public const SyntaxKind ScopedKeyword = (SyntaxKind)8448;
        public const SyntaxKind FileKeyword = (SyntaxKind)8449;
        public const SyntaxKind WarningsKeyword = (SyntaxKind)8488;
        public const SyntaxKind AnnotationsKeyword = (SyntaxKind)8489;
        public const SyntaxKind SingleLineRawStringLiteralToken = (SyntaxKind)8518;
        public const SyntaxKind MultiLineRawStringLiteralToken = (SyntaxKind)8519;
        public const SyntaxKind Utf8StringLiteralToken = (SyntaxKind)8520;
        public const SyntaxKind Utf8SingleLineRawStringLiteralToken = (SyntaxKind)8521;
        public const SyntaxKind Utf8MultiLineRawStringLiteralToken = (SyntaxKind)8522;
        public const SyntaxKind ImplicitObjectCreationExpression = (SyntaxKind)8659;
        public const SyntaxKind UnsignedRightShiftExpression = (SyntaxKind)8692;
        public const SyntaxKind UnsignedRightShiftAssignmentExpression = (SyntaxKind)8726;
        public const SyntaxKind Utf8StringLiteralExpression = (SyntaxKind)8756;
        public const SyntaxKind FileScopedNamespaceDeclaration = (SyntaxKind)8845;
        public const SyntaxKind ParenthesizedPattern = (SyntaxKind)9028;
        public const SyntaxKind RelationalPattern = (SyntaxKind)9029;
        public const SyntaxKind TypePattern = (SyntaxKind)9030;
        public const SyntaxKind OrPattern = (SyntaxKind)9031;
        public const SyntaxKind AndPattern = (SyntaxKind)9032;
        public const SyntaxKind NotPattern = (SyntaxKind)9033;
        public const SyntaxKind SlicePattern = (SyntaxKind)9034;
        public const SyntaxKind ListPattern = (SyntaxKind)9035;
        public const SyntaxKind FunctionPointerType = (SyntaxKind)9056;
        public const SyntaxKind FunctionPointerParameter = (SyntaxKind)9057;
        public const SyntaxKind FunctionPointerParameterList = (SyntaxKind)9058;
        public const SyntaxKind FunctionPointerCallingConvention = (SyntaxKind)9059;
        public const SyntaxKind InitAccessorDeclaration = (SyntaxKind)9060;
        public const SyntaxKind WithExpression = (SyntaxKind)9061;
        public const SyntaxKind WithInitializerExpression = (SyntaxKind)9062;
        public const SyntaxKind RecordDeclaration = (SyntaxKind)9063;
        public const SyntaxKind DefaultConstraint = (SyntaxKind)9064;
        public const SyntaxKind PrimaryConstructorBaseType = (SyntaxKind)9065;
        public const SyntaxKind FunctionPointerUnmanagedCallingConventionList = (SyntaxKind)9066;
        public const SyntaxKind FunctionPointerUnmanagedCallingConvention = (SyntaxKind)9067;
        public const SyntaxKind RecordStructDeclaration = (SyntaxKind)9068;
        public const SyntaxKind ExpressionColon = (SyntaxKind)9069;
        public const SyntaxKind LineDirectivePosition = (SyntaxKind)9070;
        public const SyntaxKind LineSpanDirectiveTrivia = (SyntaxKind)9071;
        public const SyntaxKind InterpolatedSingleLineRawStringStartToken = (SyntaxKind)9072;
        public const SyntaxKind InterpolatedMultiLineRawStringStartToken = (SyntaxKind)9073;
        public const SyntaxKind InterpolatedRawStringEndToken = (SyntaxKind)9074;
        public const SyntaxKind ScopedType = (SyntaxKind)9075;
        public const SyntaxKind CollectionExpression = (SyntaxKind)9076;
        public const SyntaxKind ExpressionElement = (SyntaxKind)9077;
        public const SyntaxKind SpreadElement = (SyntaxKind)9078;
    }
}
