using Microsoft.CodeAnalysis.CSharp;

namespace Roslyn.CodeAnalysis.Lightup.CSharp
{
    public class SyntaxKindEx
    {
        public const SyntaxKind None = (SyntaxKind)0;
        public const SyntaxKind List = (SyntaxKind)1;
        public const SyntaxKind TildeToken = (SyntaxKind)8193;
        public const SyntaxKind ExclamationToken = (SyntaxKind)8194;
        public const SyntaxKind DollarToken = (SyntaxKind)8195;
        public const SyntaxKind PercentToken = (SyntaxKind)8196;
        public const SyntaxKind CaretToken = (SyntaxKind)8197;
        public const SyntaxKind AmpersandToken = (SyntaxKind)8198;
        public const SyntaxKind AsteriskToken = (SyntaxKind)8199;
        public const SyntaxKind OpenParenToken = (SyntaxKind)8200;
        public const SyntaxKind CloseParenToken = (SyntaxKind)8201;
        public const SyntaxKind MinusToken = (SyntaxKind)8202;
        public const SyntaxKind PlusToken = (SyntaxKind)8203;
        public const SyntaxKind EqualsToken = (SyntaxKind)8204;
        public const SyntaxKind OpenBraceToken = (SyntaxKind)8205;
        public const SyntaxKind CloseBraceToken = (SyntaxKind)8206;
        public const SyntaxKind OpenBracketToken = (SyntaxKind)8207;
        public const SyntaxKind CloseBracketToken = (SyntaxKind)8208;
        public const SyntaxKind BarToken = (SyntaxKind)8209;
        public const SyntaxKind BackslashToken = (SyntaxKind)8210;
        public const SyntaxKind ColonToken = (SyntaxKind)8211;
        public const SyntaxKind SemicolonToken = (SyntaxKind)8212;
        public const SyntaxKind DoubleQuoteToken = (SyntaxKind)8213;
        public const SyntaxKind SingleQuoteToken = (SyntaxKind)8214;
        public const SyntaxKind LessThanToken = (SyntaxKind)8215;
        public const SyntaxKind CommaToken = (SyntaxKind)8216;
        public const SyntaxKind GreaterThanToken = (SyntaxKind)8217;
        public const SyntaxKind DotToken = (SyntaxKind)8218;
        public const SyntaxKind QuestionToken = (SyntaxKind)8219;
        public const SyntaxKind HashToken = (SyntaxKind)8220;
        public const SyntaxKind SlashToken = (SyntaxKind)8221;
        public const SyntaxKind DotDotToken = (SyntaxKind)8222;
        public const SyntaxKind SlashGreaterThanToken = (SyntaxKind)8232;
        public const SyntaxKind LessThanSlashToken = (SyntaxKind)8233;
        public const SyntaxKind XmlCommentStartToken = (SyntaxKind)8234;
        public const SyntaxKind XmlCommentEndToken = (SyntaxKind)8235;
        public const SyntaxKind XmlCDataStartToken = (SyntaxKind)8236;
        public const SyntaxKind XmlCDataEndToken = (SyntaxKind)8237;
        public const SyntaxKind XmlProcessingInstructionStartToken = (SyntaxKind)8238;
        public const SyntaxKind XmlProcessingInstructionEndToken = (SyntaxKind)8239;
        public const SyntaxKind BarBarToken = (SyntaxKind)8260;
        public const SyntaxKind AmpersandAmpersandToken = (SyntaxKind)8261;
        public const SyntaxKind MinusMinusToken = (SyntaxKind)8262;
        public const SyntaxKind PlusPlusToken = (SyntaxKind)8263;
        public const SyntaxKind ColonColonToken = (SyntaxKind)8264;
        public const SyntaxKind QuestionQuestionToken = (SyntaxKind)8265;
        public const SyntaxKind MinusGreaterThanToken = (SyntaxKind)8266;
        public const SyntaxKind ExclamationEqualsToken = (SyntaxKind)8267;
        public const SyntaxKind EqualsEqualsToken = (SyntaxKind)8268;
        public const SyntaxKind EqualsGreaterThanToken = (SyntaxKind)8269;
        public const SyntaxKind LessThanEqualsToken = (SyntaxKind)8270;
        public const SyntaxKind LessThanLessThanToken = (SyntaxKind)8271;
        public const SyntaxKind LessThanLessThanEqualsToken = (SyntaxKind)8272;
        public const SyntaxKind GreaterThanEqualsToken = (SyntaxKind)8273;
        public const SyntaxKind GreaterThanGreaterThanToken = (SyntaxKind)8274;
        public const SyntaxKind GreaterThanGreaterThanEqualsToken = (SyntaxKind)8275;
        public const SyntaxKind SlashEqualsToken = (SyntaxKind)8276;
        public const SyntaxKind AsteriskEqualsToken = (SyntaxKind)8277;
        public const SyntaxKind BarEqualsToken = (SyntaxKind)8278;
        public const SyntaxKind AmpersandEqualsToken = (SyntaxKind)8279;
        public const SyntaxKind PlusEqualsToken = (SyntaxKind)8280;
        public const SyntaxKind MinusEqualsToken = (SyntaxKind)8281;
        public const SyntaxKind CaretEqualsToken = (SyntaxKind)8282;
        public const SyntaxKind PercentEqualsToken = (SyntaxKind)8283;
        public const SyntaxKind QuestionQuestionEqualsToken = (SyntaxKind)8284;
        public const SyntaxKind GreaterThanGreaterThanGreaterThanToken = (SyntaxKind)8286;
        public const SyntaxKind GreaterThanGreaterThanGreaterThanEqualsToken = (SyntaxKind)8287;
        public const SyntaxKind BoolKeyword = (SyntaxKind)8304;
        public const SyntaxKind ByteKeyword = (SyntaxKind)8305;
        public const SyntaxKind SByteKeyword = (SyntaxKind)8306;
        public const SyntaxKind ShortKeyword = (SyntaxKind)8307;
        public const SyntaxKind UShortKeyword = (SyntaxKind)8308;
        public const SyntaxKind IntKeyword = (SyntaxKind)8309;
        public const SyntaxKind UIntKeyword = (SyntaxKind)8310;
        public const SyntaxKind LongKeyword = (SyntaxKind)8311;
        public const SyntaxKind ULongKeyword = (SyntaxKind)8312;
        public const SyntaxKind DoubleKeyword = (SyntaxKind)8313;
        public const SyntaxKind FloatKeyword = (SyntaxKind)8314;
        public const SyntaxKind DecimalKeyword = (SyntaxKind)8315;
        public const SyntaxKind StringKeyword = (SyntaxKind)8316;
        public const SyntaxKind CharKeyword = (SyntaxKind)8317;
        public const SyntaxKind VoidKeyword = (SyntaxKind)8318;
        public const SyntaxKind ObjectKeyword = (SyntaxKind)8319;
        public const SyntaxKind TypeOfKeyword = (SyntaxKind)8320;
        public const SyntaxKind SizeOfKeyword = (SyntaxKind)8321;
        public const SyntaxKind NullKeyword = (SyntaxKind)8322;
        public const SyntaxKind TrueKeyword = (SyntaxKind)8323;
        public const SyntaxKind FalseKeyword = (SyntaxKind)8324;
        public const SyntaxKind IfKeyword = (SyntaxKind)8325;
        public const SyntaxKind ElseKeyword = (SyntaxKind)8326;
        public const SyntaxKind WhileKeyword = (SyntaxKind)8327;
        public const SyntaxKind ForKeyword = (SyntaxKind)8328;
        public const SyntaxKind ForEachKeyword = (SyntaxKind)8329;
        public const SyntaxKind DoKeyword = (SyntaxKind)8330;
        public const SyntaxKind SwitchKeyword = (SyntaxKind)8331;
        public const SyntaxKind CaseKeyword = (SyntaxKind)8332;
        public const SyntaxKind DefaultKeyword = (SyntaxKind)8333;
        public const SyntaxKind TryKeyword = (SyntaxKind)8334;
        public const SyntaxKind CatchKeyword = (SyntaxKind)8335;
        public const SyntaxKind FinallyKeyword = (SyntaxKind)8336;
        public const SyntaxKind LockKeyword = (SyntaxKind)8337;
        public const SyntaxKind GotoKeyword = (SyntaxKind)8338;
        public const SyntaxKind BreakKeyword = (SyntaxKind)8339;
        public const SyntaxKind ContinueKeyword = (SyntaxKind)8340;
        public const SyntaxKind ReturnKeyword = (SyntaxKind)8341;
        public const SyntaxKind ThrowKeyword = (SyntaxKind)8342;
        public const SyntaxKind PublicKeyword = (SyntaxKind)8343;
        public const SyntaxKind PrivateKeyword = (SyntaxKind)8344;
        public const SyntaxKind InternalKeyword = (SyntaxKind)8345;
        public const SyntaxKind ProtectedKeyword = (SyntaxKind)8346;
        public const SyntaxKind StaticKeyword = (SyntaxKind)8347;
        public const SyntaxKind ReadOnlyKeyword = (SyntaxKind)8348;
        public const SyntaxKind SealedKeyword = (SyntaxKind)8349;
        public const SyntaxKind ConstKeyword = (SyntaxKind)8350;
        public const SyntaxKind FixedKeyword = (SyntaxKind)8351;
        public const SyntaxKind StackAllocKeyword = (SyntaxKind)8352;
        public const SyntaxKind VolatileKeyword = (SyntaxKind)8353;
        public const SyntaxKind NewKeyword = (SyntaxKind)8354;
        public const SyntaxKind OverrideKeyword = (SyntaxKind)8355;
        public const SyntaxKind AbstractKeyword = (SyntaxKind)8356;
        public const SyntaxKind VirtualKeyword = (SyntaxKind)8357;
        public const SyntaxKind EventKeyword = (SyntaxKind)8358;
        public const SyntaxKind ExternKeyword = (SyntaxKind)8359;
        public const SyntaxKind RefKeyword = (SyntaxKind)8360;
        public const SyntaxKind OutKeyword = (SyntaxKind)8361;
        public const SyntaxKind InKeyword = (SyntaxKind)8362;
        public const SyntaxKind IsKeyword = (SyntaxKind)8363;
        public const SyntaxKind AsKeyword = (SyntaxKind)8364;
        public const SyntaxKind ParamsKeyword = (SyntaxKind)8365;
        public const SyntaxKind ArgListKeyword = (SyntaxKind)8366;
        public const SyntaxKind MakeRefKeyword = (SyntaxKind)8367;
        public const SyntaxKind RefTypeKeyword = (SyntaxKind)8368;
        public const SyntaxKind RefValueKeyword = (SyntaxKind)8369;
        public const SyntaxKind ThisKeyword = (SyntaxKind)8370;
        public const SyntaxKind BaseKeyword = (SyntaxKind)8371;
        public const SyntaxKind NamespaceKeyword = (SyntaxKind)8372;
        public const SyntaxKind UsingKeyword = (SyntaxKind)8373;
        public const SyntaxKind ClassKeyword = (SyntaxKind)8374;
        public const SyntaxKind StructKeyword = (SyntaxKind)8375;
        public const SyntaxKind InterfaceKeyword = (SyntaxKind)8376;
        public const SyntaxKind EnumKeyword = (SyntaxKind)8377;
        public const SyntaxKind DelegateKeyword = (SyntaxKind)8378;
        public const SyntaxKind CheckedKeyword = (SyntaxKind)8379;
        public const SyntaxKind UncheckedKeyword = (SyntaxKind)8380;
        public const SyntaxKind UnsafeKeyword = (SyntaxKind)8381;
        public const SyntaxKind OperatorKeyword = (SyntaxKind)8382;
        public const SyntaxKind ExplicitKeyword = (SyntaxKind)8383;
        public const SyntaxKind ImplicitKeyword = (SyntaxKind)8384;
        public const SyntaxKind YieldKeyword = (SyntaxKind)8405;
        public const SyntaxKind PartialKeyword = (SyntaxKind)8406;
        public const SyntaxKind AliasKeyword = (SyntaxKind)8407;
        public const SyntaxKind GlobalKeyword = (SyntaxKind)8408;
        public const SyntaxKind AssemblyKeyword = (SyntaxKind)8409;
        public const SyntaxKind ModuleKeyword = (SyntaxKind)8410;
        public const SyntaxKind TypeKeyword = (SyntaxKind)8411;
        public const SyntaxKind FieldKeyword = (SyntaxKind)8412;
        public const SyntaxKind MethodKeyword = (SyntaxKind)8413;
        public const SyntaxKind ParamKeyword = (SyntaxKind)8414;
        public const SyntaxKind PropertyKeyword = (SyntaxKind)8415;
        public const SyntaxKind TypeVarKeyword = (SyntaxKind)8416;
        public const SyntaxKind GetKeyword = (SyntaxKind)8417;
        public const SyntaxKind SetKeyword = (SyntaxKind)8418;
        public const SyntaxKind AddKeyword = (SyntaxKind)8419;
        public const SyntaxKind RemoveKeyword = (SyntaxKind)8420;
        public const SyntaxKind WhereKeyword = (SyntaxKind)8421;
        public const SyntaxKind FromKeyword = (SyntaxKind)8422;
        public const SyntaxKind GroupKeyword = (SyntaxKind)8423;
        public const SyntaxKind JoinKeyword = (SyntaxKind)8424;
        public const SyntaxKind IntoKeyword = (SyntaxKind)8425;
        public const SyntaxKind LetKeyword = (SyntaxKind)8426;
        public const SyntaxKind ByKeyword = (SyntaxKind)8427;
        public const SyntaxKind SelectKeyword = (SyntaxKind)8428;
        public const SyntaxKind OrderByKeyword = (SyntaxKind)8429;
        public const SyntaxKind OnKeyword = (SyntaxKind)8430;
        public const SyntaxKind EqualsKeyword = (SyntaxKind)8431;
        public const SyntaxKind AscendingKeyword = (SyntaxKind)8432;
        public const SyntaxKind DescendingKeyword = (SyntaxKind)8433;
        public const SyntaxKind NameOfKeyword = (SyntaxKind)8434;
        public const SyntaxKind AsyncKeyword = (SyntaxKind)8435;
        public const SyntaxKind AwaitKeyword = (SyntaxKind)8436;
        public const SyntaxKind WhenKeyword = (SyntaxKind)8437;
        public const SyntaxKind OrKeyword = (SyntaxKind)8438;
        public const SyntaxKind AndKeyword = (SyntaxKind)8439;
        public const SyntaxKind NotKeyword = (SyntaxKind)8440;
        public const SyntaxKind WithKeyword = (SyntaxKind)8442;
        public const SyntaxKind InitKeyword = (SyntaxKind)8443;
        public const SyntaxKind RecordKeyword = (SyntaxKind)8444;
        public const SyntaxKind ManagedKeyword = (SyntaxKind)8445;
        public const SyntaxKind UnmanagedKeyword = (SyntaxKind)8446;
        public const SyntaxKind RequiredKeyword = (SyntaxKind)8447;
        public const SyntaxKind ScopedKeyword = (SyntaxKind)8448;
        public const SyntaxKind FileKeyword = (SyntaxKind)8449;
        public const SyntaxKind ElifKeyword = (SyntaxKind)8467;
        public const SyntaxKind EndIfKeyword = (SyntaxKind)8468;
        public const SyntaxKind RegionKeyword = (SyntaxKind)8469;
        public const SyntaxKind EndRegionKeyword = (SyntaxKind)8470;
        public const SyntaxKind DefineKeyword = (SyntaxKind)8471;
        public const SyntaxKind UndefKeyword = (SyntaxKind)8472;
        public const SyntaxKind WarningKeyword = (SyntaxKind)8473;
        public const SyntaxKind ErrorKeyword = (SyntaxKind)8474;
        public const SyntaxKind LineKeyword = (SyntaxKind)8475;
        public const SyntaxKind PragmaKeyword = (SyntaxKind)8476;
        public const SyntaxKind HiddenKeyword = (SyntaxKind)8477;
        public const SyntaxKind ChecksumKeyword = (SyntaxKind)8478;
        public const SyntaxKind DisableKeyword = (SyntaxKind)8479;
        public const SyntaxKind RestoreKeyword = (SyntaxKind)8480;
        public const SyntaxKind ReferenceKeyword = (SyntaxKind)8481;
        public const SyntaxKind InterpolatedStringStartToken = (SyntaxKind)8482;
        public const SyntaxKind InterpolatedStringEndToken = (SyntaxKind)8483;
        public const SyntaxKind InterpolatedVerbatimStringStartToken = (SyntaxKind)8484;
        public const SyntaxKind LoadKeyword = (SyntaxKind)8485;
        public const SyntaxKind NullableKeyword = (SyntaxKind)8486;
        public const SyntaxKind EnableKeyword = (SyntaxKind)8487;
        public const SyntaxKind WarningsKeyword = (SyntaxKind)8488;
        public const SyntaxKind AnnotationsKeyword = (SyntaxKind)8489;
        public const SyntaxKind VarKeyword = (SyntaxKind)8490;
        public const SyntaxKind UnderscoreToken = (SyntaxKind)8491;
        public const SyntaxKind OmittedTypeArgumentToken = (SyntaxKind)8492;
        public const SyntaxKind OmittedArraySizeExpressionToken = (SyntaxKind)8493;
        public const SyntaxKind EndOfDirectiveToken = (SyntaxKind)8494;
        public const SyntaxKind EndOfDocumentationCommentToken = (SyntaxKind)8495;
        public const SyntaxKind EndOfFileToken = (SyntaxKind)8496;
        public const SyntaxKind BadToken = (SyntaxKind)8507;
        public const SyntaxKind IdentifierToken = (SyntaxKind)8508;
        public const SyntaxKind NumericLiteralToken = (SyntaxKind)8509;
        public const SyntaxKind CharacterLiteralToken = (SyntaxKind)8510;
        public const SyntaxKind StringLiteralToken = (SyntaxKind)8511;
        public const SyntaxKind XmlEntityLiteralToken = (SyntaxKind)8512;
        public const SyntaxKind XmlTextLiteralToken = (SyntaxKind)8513;
        public const SyntaxKind XmlTextLiteralNewLineToken = (SyntaxKind)8514;
        public const SyntaxKind InterpolatedStringToken = (SyntaxKind)8515;
        public const SyntaxKind InterpolatedStringTextToken = (SyntaxKind)8517;
        public const SyntaxKind SingleLineRawStringLiteralToken = (SyntaxKind)8518;
        public const SyntaxKind MultiLineRawStringLiteralToken = (SyntaxKind)8519;
        public const SyntaxKind Utf8StringLiteralToken = (SyntaxKind)8520;
        public const SyntaxKind Utf8SingleLineRawStringLiteralToken = (SyntaxKind)8521;
        public const SyntaxKind Utf8MultiLineRawStringLiteralToken = (SyntaxKind)8522;
        public const SyntaxKind EndOfLineTrivia = (SyntaxKind)8539;
        public const SyntaxKind WhitespaceTrivia = (SyntaxKind)8540;
        public const SyntaxKind SingleLineCommentTrivia = (SyntaxKind)8541;
        public const SyntaxKind MultiLineCommentTrivia = (SyntaxKind)8542;
        public const SyntaxKind DocumentationCommentExteriorTrivia = (SyntaxKind)8543;
        public const SyntaxKind SingleLineDocumentationCommentTrivia = (SyntaxKind)8544;
        public const SyntaxKind MultiLineDocumentationCommentTrivia = (SyntaxKind)8545;
        public const SyntaxKind DisabledTextTrivia = (SyntaxKind)8546;
        public const SyntaxKind PreprocessingMessageTrivia = (SyntaxKind)8547;
        public const SyntaxKind IfDirectiveTrivia = (SyntaxKind)8548;
        public const SyntaxKind ElifDirectiveTrivia = (SyntaxKind)8549;
        public const SyntaxKind ElseDirectiveTrivia = (SyntaxKind)8550;
        public const SyntaxKind EndIfDirectiveTrivia = (SyntaxKind)8551;
        public const SyntaxKind RegionDirectiveTrivia = (SyntaxKind)8552;
        public const SyntaxKind EndRegionDirectiveTrivia = (SyntaxKind)8553;
        public const SyntaxKind DefineDirectiveTrivia = (SyntaxKind)8554;
        public const SyntaxKind UndefDirectiveTrivia = (SyntaxKind)8555;
        public const SyntaxKind ErrorDirectiveTrivia = (SyntaxKind)8556;
        public const SyntaxKind WarningDirectiveTrivia = (SyntaxKind)8557;
        public const SyntaxKind LineDirectiveTrivia = (SyntaxKind)8558;
        public const SyntaxKind PragmaWarningDirectiveTrivia = (SyntaxKind)8559;
        public const SyntaxKind PragmaChecksumDirectiveTrivia = (SyntaxKind)8560;
        public const SyntaxKind ReferenceDirectiveTrivia = (SyntaxKind)8561;
        public const SyntaxKind BadDirectiveTrivia = (SyntaxKind)8562;
        public const SyntaxKind SkippedTokensTrivia = (SyntaxKind)8563;
        public const SyntaxKind ConflictMarkerTrivia = (SyntaxKind)8564;
        public const SyntaxKind XmlElement = (SyntaxKind)8574;
        public const SyntaxKind XmlElementStartTag = (SyntaxKind)8575;
        public const SyntaxKind XmlElementEndTag = (SyntaxKind)8576;
        public const SyntaxKind XmlEmptyElement = (SyntaxKind)8577;
        public const SyntaxKind XmlTextAttribute = (SyntaxKind)8578;
        public const SyntaxKind XmlCrefAttribute = (SyntaxKind)8579;
        public const SyntaxKind XmlNameAttribute = (SyntaxKind)8580;
        public const SyntaxKind XmlName = (SyntaxKind)8581;
        public const SyntaxKind XmlPrefix = (SyntaxKind)8582;
        public const SyntaxKind XmlText = (SyntaxKind)8583;
        public const SyntaxKind XmlCDataSection = (SyntaxKind)8584;
        public const SyntaxKind XmlComment = (SyntaxKind)8585;
        public const SyntaxKind XmlProcessingInstruction = (SyntaxKind)8586;
        public const SyntaxKind TypeCref = (SyntaxKind)8597;
        public const SyntaxKind QualifiedCref = (SyntaxKind)8598;
        public const SyntaxKind NameMemberCref = (SyntaxKind)8599;
        public const SyntaxKind IndexerMemberCref = (SyntaxKind)8600;
        public const SyntaxKind OperatorMemberCref = (SyntaxKind)8601;
        public const SyntaxKind ConversionOperatorMemberCref = (SyntaxKind)8602;
        public const SyntaxKind CrefParameterList = (SyntaxKind)8603;
        public const SyntaxKind CrefBracketedParameterList = (SyntaxKind)8604;
        public const SyntaxKind CrefParameter = (SyntaxKind)8605;
        public const SyntaxKind IdentifierName = (SyntaxKind)8616;
        public const SyntaxKind QualifiedName = (SyntaxKind)8617;
        public const SyntaxKind GenericName = (SyntaxKind)8618;
        public const SyntaxKind TypeArgumentList = (SyntaxKind)8619;
        public const SyntaxKind AliasQualifiedName = (SyntaxKind)8620;
        public const SyntaxKind PredefinedType = (SyntaxKind)8621;
        public const SyntaxKind ArrayType = (SyntaxKind)8622;
        public const SyntaxKind ArrayRankSpecifier = (SyntaxKind)8623;
        public const SyntaxKind PointerType = (SyntaxKind)8624;
        public const SyntaxKind NullableType = (SyntaxKind)8625;
        public const SyntaxKind OmittedTypeArgument = (SyntaxKind)8626;
        public const SyntaxKind ParenthesizedExpression = (SyntaxKind)8632;
        public const SyntaxKind ConditionalExpression = (SyntaxKind)8633;
        public const SyntaxKind InvocationExpression = (SyntaxKind)8634;
        public const SyntaxKind ElementAccessExpression = (SyntaxKind)8635;
        public const SyntaxKind ArgumentList = (SyntaxKind)8636;
        public const SyntaxKind BracketedArgumentList = (SyntaxKind)8637;
        public const SyntaxKind Argument = (SyntaxKind)8638;
        public const SyntaxKind NameColon = (SyntaxKind)8639;
        public const SyntaxKind CastExpression = (SyntaxKind)8640;
        public const SyntaxKind AnonymousMethodExpression = (SyntaxKind)8641;
        public const SyntaxKind SimpleLambdaExpression = (SyntaxKind)8642;
        public const SyntaxKind ParenthesizedLambdaExpression = (SyntaxKind)8643;
        public const SyntaxKind ObjectInitializerExpression = (SyntaxKind)8644;
        public const SyntaxKind CollectionInitializerExpression = (SyntaxKind)8645;
        public const SyntaxKind ArrayInitializerExpression = (SyntaxKind)8646;
        public const SyntaxKind AnonymousObjectMemberDeclarator = (SyntaxKind)8647;
        public const SyntaxKind ComplexElementInitializerExpression = (SyntaxKind)8648;
        public const SyntaxKind ObjectCreationExpression = (SyntaxKind)8649;
        public const SyntaxKind AnonymousObjectCreationExpression = (SyntaxKind)8650;
        public const SyntaxKind ArrayCreationExpression = (SyntaxKind)8651;
        public const SyntaxKind ImplicitArrayCreationExpression = (SyntaxKind)8652;
        public const SyntaxKind StackAllocArrayCreationExpression = (SyntaxKind)8653;
        public const SyntaxKind OmittedArraySizeExpression = (SyntaxKind)8654;
        public const SyntaxKind InterpolatedStringExpression = (SyntaxKind)8655;
        public const SyntaxKind ImplicitElementAccess = (SyntaxKind)8656;
        public const SyntaxKind IsPatternExpression = (SyntaxKind)8657;
        public const SyntaxKind RangeExpression = (SyntaxKind)8658;
        public const SyntaxKind ImplicitObjectCreationExpression = (SyntaxKind)8659;
        public const SyntaxKind AddExpression = (SyntaxKind)8668;
        public const SyntaxKind SubtractExpression = (SyntaxKind)8669;
        public const SyntaxKind MultiplyExpression = (SyntaxKind)8670;
        public const SyntaxKind DivideExpression = (SyntaxKind)8671;
        public const SyntaxKind ModuloExpression = (SyntaxKind)8672;
        public const SyntaxKind LeftShiftExpression = (SyntaxKind)8673;
        public const SyntaxKind RightShiftExpression = (SyntaxKind)8674;
        public const SyntaxKind LogicalOrExpression = (SyntaxKind)8675;
        public const SyntaxKind LogicalAndExpression = (SyntaxKind)8676;
        public const SyntaxKind BitwiseOrExpression = (SyntaxKind)8677;
        public const SyntaxKind BitwiseAndExpression = (SyntaxKind)8678;
        public const SyntaxKind ExclusiveOrExpression = (SyntaxKind)8679;
        public const SyntaxKind EqualsExpression = (SyntaxKind)8680;
        public const SyntaxKind NotEqualsExpression = (SyntaxKind)8681;
        public const SyntaxKind LessThanExpression = (SyntaxKind)8682;
        public const SyntaxKind LessThanOrEqualExpression = (SyntaxKind)8683;
        public const SyntaxKind GreaterThanExpression = (SyntaxKind)8684;
        public const SyntaxKind GreaterThanOrEqualExpression = (SyntaxKind)8685;
        public const SyntaxKind IsExpression = (SyntaxKind)8686;
        public const SyntaxKind AsExpression = (SyntaxKind)8687;
        public const SyntaxKind CoalesceExpression = (SyntaxKind)8688;
        public const SyntaxKind SimpleMemberAccessExpression = (SyntaxKind)8689;
        public const SyntaxKind PointerMemberAccessExpression = (SyntaxKind)8690;
        public const SyntaxKind ConditionalAccessExpression = (SyntaxKind)8691;
        public const SyntaxKind UnsignedRightShiftExpression = (SyntaxKind)8692;
        public const SyntaxKind MemberBindingExpression = (SyntaxKind)8707;
        public const SyntaxKind ElementBindingExpression = (SyntaxKind)8708;
        public const SyntaxKind SimpleAssignmentExpression = (SyntaxKind)8714;
        public const SyntaxKind AddAssignmentExpression = (SyntaxKind)8715;
        public const SyntaxKind SubtractAssignmentExpression = (SyntaxKind)8716;
        public const SyntaxKind MultiplyAssignmentExpression = (SyntaxKind)8717;
        public const SyntaxKind DivideAssignmentExpression = (SyntaxKind)8718;
        public const SyntaxKind ModuloAssignmentExpression = (SyntaxKind)8719;
        public const SyntaxKind AndAssignmentExpression = (SyntaxKind)8720;
        public const SyntaxKind ExclusiveOrAssignmentExpression = (SyntaxKind)8721;
        public const SyntaxKind OrAssignmentExpression = (SyntaxKind)8722;
        public const SyntaxKind LeftShiftAssignmentExpression = (SyntaxKind)8723;
        public const SyntaxKind RightShiftAssignmentExpression = (SyntaxKind)8724;
        public const SyntaxKind CoalesceAssignmentExpression = (SyntaxKind)8725;
        public const SyntaxKind UnsignedRightShiftAssignmentExpression = (SyntaxKind)8726;
        public const SyntaxKind UnaryPlusExpression = (SyntaxKind)8730;
        public const SyntaxKind UnaryMinusExpression = (SyntaxKind)8731;
        public const SyntaxKind BitwiseNotExpression = (SyntaxKind)8732;
        public const SyntaxKind LogicalNotExpression = (SyntaxKind)8733;
        public const SyntaxKind PreIncrementExpression = (SyntaxKind)8734;
        public const SyntaxKind PreDecrementExpression = (SyntaxKind)8735;
        public const SyntaxKind PointerIndirectionExpression = (SyntaxKind)8736;
        public const SyntaxKind AddressOfExpression = (SyntaxKind)8737;
        public const SyntaxKind PostIncrementExpression = (SyntaxKind)8738;
        public const SyntaxKind PostDecrementExpression = (SyntaxKind)8739;
        public const SyntaxKind AwaitExpression = (SyntaxKind)8740;
        public const SyntaxKind IndexExpression = (SyntaxKind)8741;
        public const SyntaxKind ThisExpression = (SyntaxKind)8746;
        public const SyntaxKind BaseExpression = (SyntaxKind)8747;
        public const SyntaxKind ArgListExpression = (SyntaxKind)8748;
        public const SyntaxKind NumericLiteralExpression = (SyntaxKind)8749;
        public const SyntaxKind StringLiteralExpression = (SyntaxKind)8750;
        public const SyntaxKind CharacterLiteralExpression = (SyntaxKind)8751;
        public const SyntaxKind TrueLiteralExpression = (SyntaxKind)8752;
        public const SyntaxKind FalseLiteralExpression = (SyntaxKind)8753;
        public const SyntaxKind NullLiteralExpression = (SyntaxKind)8754;
        public const SyntaxKind DefaultLiteralExpression = (SyntaxKind)8755;
        public const SyntaxKind Utf8StringLiteralExpression = (SyntaxKind)8756;
        public const SyntaxKind TypeOfExpression = (SyntaxKind)8760;
        public const SyntaxKind SizeOfExpression = (SyntaxKind)8761;
        public const SyntaxKind CheckedExpression = (SyntaxKind)8762;
        public const SyntaxKind UncheckedExpression = (SyntaxKind)8763;
        public const SyntaxKind DefaultExpression = (SyntaxKind)8764;
        public const SyntaxKind MakeRefExpression = (SyntaxKind)8765;
        public const SyntaxKind RefValueExpression = (SyntaxKind)8766;
        public const SyntaxKind RefTypeExpression = (SyntaxKind)8767;
        public const SyntaxKind QueryExpression = (SyntaxKind)8774;
        public const SyntaxKind QueryBody = (SyntaxKind)8775;
        public const SyntaxKind FromClause = (SyntaxKind)8776;
        public const SyntaxKind LetClause = (SyntaxKind)8777;
        public const SyntaxKind JoinClause = (SyntaxKind)8778;
        public const SyntaxKind JoinIntoClause = (SyntaxKind)8779;
        public const SyntaxKind WhereClause = (SyntaxKind)8780;
        public const SyntaxKind OrderByClause = (SyntaxKind)8781;
        public const SyntaxKind AscendingOrdering = (SyntaxKind)8782;
        public const SyntaxKind DescendingOrdering = (SyntaxKind)8783;
        public const SyntaxKind SelectClause = (SyntaxKind)8784;
        public const SyntaxKind GroupClause = (SyntaxKind)8785;
        public const SyntaxKind QueryContinuation = (SyntaxKind)8786;
        public const SyntaxKind Block = (SyntaxKind)8792;
        public const SyntaxKind LocalDeclarationStatement = (SyntaxKind)8793;
        public const SyntaxKind VariableDeclaration = (SyntaxKind)8794;
        public const SyntaxKind VariableDeclarator = (SyntaxKind)8795;
        public const SyntaxKind EqualsValueClause = (SyntaxKind)8796;
        public const SyntaxKind ExpressionStatement = (SyntaxKind)8797;
        public const SyntaxKind EmptyStatement = (SyntaxKind)8798;
        public const SyntaxKind LabeledStatement = (SyntaxKind)8799;
        public const SyntaxKind GotoStatement = (SyntaxKind)8800;
        public const SyntaxKind GotoCaseStatement = (SyntaxKind)8801;
        public const SyntaxKind GotoDefaultStatement = (SyntaxKind)8802;
        public const SyntaxKind BreakStatement = (SyntaxKind)8803;
        public const SyntaxKind ContinueStatement = (SyntaxKind)8804;
        public const SyntaxKind ReturnStatement = (SyntaxKind)8805;
        public const SyntaxKind YieldReturnStatement = (SyntaxKind)8806;
        public const SyntaxKind YieldBreakStatement = (SyntaxKind)8807;
        public const SyntaxKind ThrowStatement = (SyntaxKind)8808;
        public const SyntaxKind WhileStatement = (SyntaxKind)8809;
        public const SyntaxKind DoStatement = (SyntaxKind)8810;
        public const SyntaxKind ForStatement = (SyntaxKind)8811;
        public const SyntaxKind ForEachStatement = (SyntaxKind)8812;
        public const SyntaxKind UsingStatement = (SyntaxKind)8813;
        public const SyntaxKind FixedStatement = (SyntaxKind)8814;
        public const SyntaxKind CheckedStatement = (SyntaxKind)8815;
        public const SyntaxKind UncheckedStatement = (SyntaxKind)8816;
        public const SyntaxKind UnsafeStatement = (SyntaxKind)8817;
        public const SyntaxKind LockStatement = (SyntaxKind)8818;
        public const SyntaxKind IfStatement = (SyntaxKind)8819;
        public const SyntaxKind ElseClause = (SyntaxKind)8820;
        public const SyntaxKind SwitchStatement = (SyntaxKind)8821;
        public const SyntaxKind SwitchSection = (SyntaxKind)8822;
        public const SyntaxKind CaseSwitchLabel = (SyntaxKind)8823;
        public const SyntaxKind DefaultSwitchLabel = (SyntaxKind)8824;
        public const SyntaxKind TryStatement = (SyntaxKind)8825;
        public const SyntaxKind CatchClause = (SyntaxKind)8826;
        public const SyntaxKind CatchDeclaration = (SyntaxKind)8827;
        public const SyntaxKind CatchFilterClause = (SyntaxKind)8828;
        public const SyntaxKind FinallyClause = (SyntaxKind)8829;
        public const SyntaxKind LocalFunctionStatement = (SyntaxKind)8830;
        public const SyntaxKind CompilationUnit = (SyntaxKind)8840;
        public const SyntaxKind GlobalStatement = (SyntaxKind)8841;
        public const SyntaxKind NamespaceDeclaration = (SyntaxKind)8842;
        public const SyntaxKind UsingDirective = (SyntaxKind)8843;
        public const SyntaxKind ExternAliasDirective = (SyntaxKind)8844;
        public const SyntaxKind FileScopedNamespaceDeclaration = (SyntaxKind)8845;
        public const SyntaxKind AttributeList = (SyntaxKind)8847;
        public const SyntaxKind AttributeTargetSpecifier = (SyntaxKind)8848;
        public const SyntaxKind Attribute = (SyntaxKind)8849;
        public const SyntaxKind AttributeArgumentList = (SyntaxKind)8850;
        public const SyntaxKind AttributeArgument = (SyntaxKind)8851;
        public const SyntaxKind NameEquals = (SyntaxKind)8852;
        public const SyntaxKind ClassDeclaration = (SyntaxKind)8855;
        public const SyntaxKind StructDeclaration = (SyntaxKind)8856;
        public const SyntaxKind InterfaceDeclaration = (SyntaxKind)8857;
        public const SyntaxKind EnumDeclaration = (SyntaxKind)8858;
        public const SyntaxKind DelegateDeclaration = (SyntaxKind)8859;
        public const SyntaxKind BaseList = (SyntaxKind)8864;
        public const SyntaxKind SimpleBaseType = (SyntaxKind)8865;
        public const SyntaxKind TypeParameterConstraintClause = (SyntaxKind)8866;
        public const SyntaxKind ConstructorConstraint = (SyntaxKind)8867;
        public const SyntaxKind ClassConstraint = (SyntaxKind)8868;
        public const SyntaxKind StructConstraint = (SyntaxKind)8869;
        public const SyntaxKind TypeConstraint = (SyntaxKind)8870;
        public const SyntaxKind ExplicitInterfaceSpecifier = (SyntaxKind)8871;
        public const SyntaxKind EnumMemberDeclaration = (SyntaxKind)8872;
        public const SyntaxKind FieldDeclaration = (SyntaxKind)8873;
        public const SyntaxKind EventFieldDeclaration = (SyntaxKind)8874;
        public const SyntaxKind MethodDeclaration = (SyntaxKind)8875;
        public const SyntaxKind OperatorDeclaration = (SyntaxKind)8876;
        public const SyntaxKind ConversionOperatorDeclaration = (SyntaxKind)8877;
        public const SyntaxKind ConstructorDeclaration = (SyntaxKind)8878;
        public const SyntaxKind BaseConstructorInitializer = (SyntaxKind)8889;
        public const SyntaxKind ThisConstructorInitializer = (SyntaxKind)8890;
        public const SyntaxKind DestructorDeclaration = (SyntaxKind)8891;
        public const SyntaxKind PropertyDeclaration = (SyntaxKind)8892;
        public const SyntaxKind EventDeclaration = (SyntaxKind)8893;
        public const SyntaxKind IndexerDeclaration = (SyntaxKind)8894;
        public const SyntaxKind AccessorList = (SyntaxKind)8895;
        public const SyntaxKind GetAccessorDeclaration = (SyntaxKind)8896;
        public const SyntaxKind SetAccessorDeclaration = (SyntaxKind)8897;
        public const SyntaxKind AddAccessorDeclaration = (SyntaxKind)8898;
        public const SyntaxKind RemoveAccessorDeclaration = (SyntaxKind)8899;
        public const SyntaxKind UnknownAccessorDeclaration = (SyntaxKind)8900;
        public const SyntaxKind ParameterList = (SyntaxKind)8906;
        public const SyntaxKind BracketedParameterList = (SyntaxKind)8907;
        public const SyntaxKind Parameter = (SyntaxKind)8908;
        public const SyntaxKind TypeParameterList = (SyntaxKind)8909;
        public const SyntaxKind TypeParameter = (SyntaxKind)8910;
        public const SyntaxKind IncompleteMember = (SyntaxKind)8916;
        public const SyntaxKind ArrowExpressionClause = (SyntaxKind)8917;
        public const SyntaxKind Interpolation = (SyntaxKind)8918;
        public const SyntaxKind InterpolatedStringText = (SyntaxKind)8919;
        public const SyntaxKind InterpolationAlignmentClause = (SyntaxKind)8920;
        public const SyntaxKind InterpolationFormatClause = (SyntaxKind)8921;
        public const SyntaxKind ShebangDirectiveTrivia = (SyntaxKind)8922;
        public const SyntaxKind LoadDirectiveTrivia = (SyntaxKind)8923;
        public const SyntaxKind TupleType = (SyntaxKind)8924;
        public const SyntaxKind TupleElement = (SyntaxKind)8925;
        public const SyntaxKind TupleExpression = (SyntaxKind)8926;
        public const SyntaxKind SingleVariableDesignation = (SyntaxKind)8927;
        public const SyntaxKind ParenthesizedVariableDesignation = (SyntaxKind)8928;
        public const SyntaxKind ForEachVariableStatement = (SyntaxKind)8929;
        public const SyntaxKind DeclarationPattern = (SyntaxKind)9000;
        public const SyntaxKind ConstantPattern = (SyntaxKind)9002;
        public const SyntaxKind CasePatternSwitchLabel = (SyntaxKind)9009;
        public const SyntaxKind WhenClause = (SyntaxKind)9013;
        public const SyntaxKind DiscardDesignation = (SyntaxKind)9014;
        public const SyntaxKind RecursivePattern = (SyntaxKind)9020;
        public const SyntaxKind PropertyPatternClause = (SyntaxKind)9021;
        public const SyntaxKind Subpattern = (SyntaxKind)9022;
        public const SyntaxKind PositionalPatternClause = (SyntaxKind)9023;
        public const SyntaxKind DiscardPattern = (SyntaxKind)9024;
        public const SyntaxKind SwitchExpression = (SyntaxKind)9025;
        public const SyntaxKind SwitchExpressionArm = (SyntaxKind)9026;
        public const SyntaxKind VarPattern = (SyntaxKind)9027;
        public const SyntaxKind ParenthesizedPattern = (SyntaxKind)9028;
        public const SyntaxKind RelationalPattern = (SyntaxKind)9029;
        public const SyntaxKind TypePattern = (SyntaxKind)9030;
        public const SyntaxKind OrPattern = (SyntaxKind)9031;
        public const SyntaxKind AndPattern = (SyntaxKind)9032;
        public const SyntaxKind NotPattern = (SyntaxKind)9033;
        public const SyntaxKind SlicePattern = (SyntaxKind)9034;
        public const SyntaxKind ListPattern = (SyntaxKind)9035;
        public const SyntaxKind DeclarationExpression = (SyntaxKind)9040;
        public const SyntaxKind RefExpression = (SyntaxKind)9050;
        public const SyntaxKind RefType = (SyntaxKind)9051;
        public const SyntaxKind ThrowExpression = (SyntaxKind)9052;
        public const SyntaxKind ImplicitStackAllocArrayCreationExpression = (SyntaxKind)9053;
        public const SyntaxKind SuppressNullableWarningExpression = (SyntaxKind)9054;
        public const SyntaxKind NullableDirectiveTrivia = (SyntaxKind)9055;
        public const SyntaxKind FunctionPointerType = (SyntaxKind)9056;
        public const SyntaxKind FunctionPointerParameter = (SyntaxKind)9057;
        public const SyntaxKind FunctionPointerParameterList = (SyntaxKind)9058;
        public const SyntaxKind FunctionPointerCallingConvention = (SyntaxKind)9059;
        public const SyntaxKind InitAccessorDeclaration = (SyntaxKind)9060;
        public const SyntaxKind WithExpression = (SyntaxKind)9061;
        public const SyntaxKind WithInitializerExpression = (SyntaxKind)9062;
        public const SyntaxKind RecordDeclaration = (SyntaxKind)9063;
        public const SyntaxKind DefaultConstraint = (SyntaxKind)9064;
        public const SyntaxKind PrimaryConstructorBaseType = (SyntaxKind)9065;
        public const SyntaxKind FunctionPointerUnmanagedCallingConventionList = (SyntaxKind)9066;
        public const SyntaxKind FunctionPointerUnmanagedCallingConvention = (SyntaxKind)9067;
        public const SyntaxKind RecordStructDeclaration = (SyntaxKind)9068;
        public const SyntaxKind ExpressionColon = (SyntaxKind)9069;
        public const SyntaxKind LineDirectivePosition = (SyntaxKind)9070;
        public const SyntaxKind LineSpanDirectiveTrivia = (SyntaxKind)9071;
        public const SyntaxKind InterpolatedSingleLineRawStringStartToken = (SyntaxKind)9072;
        public const SyntaxKind InterpolatedMultiLineRawStringStartToken = (SyntaxKind)9073;
        public const SyntaxKind InterpolatedRawStringEndToken = (SyntaxKind)9074;
        public const SyntaxKind ScopedType = (SyntaxKind)9075;
        public const SyntaxKind CollectionExpression = (SyntaxKind)9076;
        public const SyntaxKind ExpressionElement = (SyntaxKind)9077;
        public const SyntaxKind SpreadElement = (SyntaxKind)9078;
    }
}
