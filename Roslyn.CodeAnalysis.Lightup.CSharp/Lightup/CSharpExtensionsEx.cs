// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharpExtensions.</summary>
    public static class CSharpExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharpExtensions";

        private delegate Boolean ContainsDirectiveDelegate0(SyntaxNode node, SyntaxKind kind);

        private static readonly ContainsDirectiveDelegate0 ContainsDirectiveFunc0;

        static CSharpExtensionsEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ContainsDirectiveFunc0 = LightupHelper.CreateStaticMethodAccessor<ContainsDirectiveDelegate0>(wrappedType, "ContainsDirective", "SyntaxNode", "SyntaxKind");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Boolean ContainsDirective(this SyntaxNode node, SyntaxKind kind)
            => ContainsDirectiveFunc0(node, kind);
    }
}
