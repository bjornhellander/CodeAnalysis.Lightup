// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharpExtensions.</summary>
    public static partial class CSharpExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharpExtensions";

        private delegate System.Boolean ContainsDirectiveDelegate0(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);

        private static readonly ContainsDirectiveDelegate0 ContainsDirectiveFunc0;

        static CSharpExtensionsEx()
        {
            var wrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ContainsDirectiveFunc0 = CSharpLightupHelper.CreateStaticMethodAccessor<ContainsDirectiveDelegate0>(wrappedType, "ContainsDirective", "nodeSyntaxNode", "kindSyntaxKind");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static System.Boolean ContainsDirective(this Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind)
            => ContainsDirectiveFunc0(node, kind);
    }
}
