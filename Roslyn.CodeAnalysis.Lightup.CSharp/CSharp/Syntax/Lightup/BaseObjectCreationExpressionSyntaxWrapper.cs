// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct BaseObjectCreationExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate ArgumentListSyntax? ArgumentListGetterDelegate(ExpressionSyntax? _obj);
        private delegate InitializerExpressionSyntax? InitializerGetterDelegate(ExpressionSyntax? _obj);
        private delegate SyntaxToken NewKeywordGetterDelegate(ExpressionSyntax? _obj);

        private delegate BaseObjectCreationExpressionSyntaxWrapper AddArgumentListArgumentsDelegate0(ExpressionSyntax? _obj, params ArgumentSyntax[] items);
        private delegate BaseObjectCreationExpressionSyntaxWrapper WithArgumentListDelegate1(ExpressionSyntax? _obj, ArgumentListSyntax? argumentList);
        private delegate BaseObjectCreationExpressionSyntaxWrapper WithInitializerDelegate2(ExpressionSyntax? _obj, InitializerExpressionSyntax? initializer);
        private delegate BaseObjectCreationExpressionSyntaxWrapper WithNewKeywordDelegate3(ExpressionSyntax? _obj, SyntaxToken newKeyword);

        private static readonly ArgumentListGetterDelegate ArgumentListGetterFunc;
        private static readonly InitializerGetterDelegate InitializerGetterFunc;
        private static readonly NewKeywordGetterDelegate NewKeywordGetterFunc;

        private static readonly AddArgumentListArgumentsDelegate0 AddArgumentListArgumentsFunc0;
        private static readonly WithArgumentListDelegate1 WithArgumentListFunc1;
        private static readonly WithInitializerDelegate2 WithInitializerFunc2;
        private static readonly WithNewKeywordDelegate3 WithNewKeywordFunc3;

        private readonly ExpressionSyntax? wrappedObject;

        static BaseObjectCreationExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentListGetterFunc = LightupHelper.CreateGetAccessor<ArgumentListGetterDelegate>(WrappedType, nameof(ArgumentList));
            InitializerGetterFunc = LightupHelper.CreateGetAccessor<InitializerGetterDelegate>(WrappedType, nameof(Initializer));
            NewKeywordGetterFunc = LightupHelper.CreateGetAccessor<NewKeywordGetterDelegate>(WrappedType, nameof(NewKeyword));

            AddArgumentListArgumentsFunc0 = LightupHelper.CreateMethodAccessor<AddArgumentListArgumentsDelegate0>(WrappedType, nameof(AddArgumentListArguments));
            WithArgumentListFunc1 = LightupHelper.CreateMethodAccessor<WithArgumentListDelegate1>(WrappedType, nameof(WithArgumentList));
            WithInitializerFunc2 = LightupHelper.CreateMethodAccessor<WithInitializerDelegate2>(WrappedType, nameof(WithInitializer));
            WithNewKeywordFunc3 = LightupHelper.CreateMethodAccessor<WithNewKeywordDelegate3>(WrappedType, nameof(WithNewKeyword));
        }

        private BaseObjectCreationExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly ArgumentListSyntax? ArgumentList
            => ArgumentListGetterFunc(wrappedObject);

        public readonly InitializerExpressionSyntax? Initializer
            => InitializerGetterFunc(wrappedObject);

        public readonly SyntaxToken NewKeyword
            => NewKeywordGetterFunc(wrappedObject);

        public static implicit operator ExpressionSyntax?(BaseObjectCreationExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BaseObjectCreationExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new BaseObjectCreationExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        public readonly BaseObjectCreationExpressionSyntaxWrapper AddArgumentListArguments(params ArgumentSyntax[] items)
            => AddArgumentListArgumentsFunc0(wrappedObject, items);

        public readonly BaseObjectCreationExpressionSyntaxWrapper WithArgumentList(ArgumentListSyntax? argumentList)
            => WithArgumentListFunc1(wrappedObject, argumentList);

        public readonly BaseObjectCreationExpressionSyntaxWrapper WithInitializer(InitializerExpressionSyntax? initializer)
            => WithInitializerFunc2(wrappedObject, initializer);

        public readonly BaseObjectCreationExpressionSyntaxWrapper WithNewKeyword(SyntaxToken newKeyword)
            => WithNewKeywordFunc3(wrappedObject, newKeyword);
    }
}
