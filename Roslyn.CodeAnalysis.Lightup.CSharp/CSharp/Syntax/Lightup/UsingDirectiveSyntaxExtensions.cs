// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class UsingDirectiveSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken GlobalKeywordGetterDelegate(UsingDirectiveSyntax? _obj);
        private delegate TypeSyntax NamespaceOrTypeGetterDelegate(UsingDirectiveSyntax? _obj);
        private delegate SyntaxToken UnsafeKeywordGetterDelegate(UsingDirectiveSyntax? _obj);

        private delegate UsingDirectiveSyntax UpdateDelegate0(UsingDirectiveSyntax? _obj, SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, NameEqualsSyntax? alias, NameSyntax name, SyntaxToken semicolonToken);
        private delegate UsingDirectiveSyntax UpdateDelegate1(UsingDirectiveSyntax? _obj, SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, SyntaxToken unsafeKeyword, NameEqualsSyntax? alias, TypeSyntax namespaceOrType, SyntaxToken semicolonToken);
        private delegate UsingDirectiveSyntax WithGlobalKeywordDelegate2(UsingDirectiveSyntax? _obj, SyntaxToken globalKeyword);
        private delegate UsingDirectiveSyntax WithNamespaceOrTypeDelegate3(UsingDirectiveSyntax? _obj, TypeSyntax namespaceOrType);
        private delegate UsingDirectiveSyntax WithUnsafeKeywordDelegate4(UsingDirectiveSyntax? _obj, SyntaxToken unsafeKeyword);

        private static readonly GlobalKeywordGetterDelegate GlobalKeywordGetterFunc;
        private static readonly NamespaceOrTypeGetterDelegate NamespaceOrTypeGetterFunc;
        private static readonly UnsafeKeywordGetterDelegate UnsafeKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithGlobalKeywordDelegate2 WithGlobalKeywordFunc2;
        private static readonly WithNamespaceOrTypeDelegate3 WithNamespaceOrTypeFunc3;
        private static readonly WithUnsafeKeywordDelegate4 WithUnsafeKeywordFunc4;

        static UsingDirectiveSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GlobalKeywordGetterFunc = LightupHelper.CreateGetAccessor<GlobalKeywordGetterDelegate>(WrappedType, nameof(GlobalKeyword));
            NamespaceOrTypeGetterFunc = LightupHelper.CreateGetAccessor<NamespaceOrTypeGetterDelegate>(WrappedType, nameof(NamespaceOrType));
            UnsafeKeywordGetterFunc = LightupHelper.CreateGetAccessor<UnsafeKeywordGetterDelegate>(WrappedType, nameof(UnsafeKeyword));

            UpdateFunc0 = LightupHelper.CreateMethodAccessor<UpdateDelegate0>(WrappedType, nameof(Update));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithGlobalKeywordFunc2 = LightupHelper.CreateMethodAccessor<WithGlobalKeywordDelegate2>(WrappedType, nameof(WithGlobalKeyword));
            WithNamespaceOrTypeFunc3 = LightupHelper.CreateMethodAccessor<WithNamespaceOrTypeDelegate3>(WrappedType, nameof(WithNamespaceOrType));
            WithUnsafeKeywordFunc4 = LightupHelper.CreateMethodAccessor<WithUnsafeKeywordDelegate4>(WrappedType, nameof(WithUnsafeKeyword));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static SyntaxToken GlobalKeyword(this UsingDirectiveSyntax _obj)
            => GlobalKeywordGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static TypeSyntax NamespaceOrType(this UsingDirectiveSyntax _obj)
            => NamespaceOrTypeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static SyntaxToken UnsafeKeyword(this UsingDirectiveSyntax _obj)
            => UnsafeKeywordGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static UsingDirectiveSyntax Update(this UsingDirectiveSyntax wrappedObject, SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, NameEqualsSyntax? alias, NameSyntax name, SyntaxToken semicolonToken)
            => UpdateFunc0(wrappedObject, globalKeyword, usingKeyword, staticKeyword, alias, name, semicolonToken);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static UsingDirectiveSyntax Update(this UsingDirectiveSyntax wrappedObject, SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, SyntaxToken unsafeKeyword, NameEqualsSyntax? alias, TypeSyntax namespaceOrType, SyntaxToken semicolonToken)
            => UpdateFunc1(wrappedObject, globalKeyword, usingKeyword, staticKeyword, unsafeKeyword, alias, namespaceOrType, semicolonToken);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static UsingDirectiveSyntax WithGlobalKeyword(this UsingDirectiveSyntax wrappedObject, SyntaxToken globalKeyword)
            => WithGlobalKeywordFunc2(wrappedObject, globalKeyword);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static UsingDirectiveSyntax WithNamespaceOrType(this UsingDirectiveSyntax wrappedObject, TypeSyntax namespaceOrType)
            => WithNamespaceOrTypeFunc3(wrappedObject, namespaceOrType);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static UsingDirectiveSyntax WithUnsafeKeyword(this UsingDirectiveSyntax wrappedObject, SyntaxToken unsafeKeyword)
            => WithUnsafeKeywordFunc4(wrappedObject, unsafeKeyword);
    }
}
