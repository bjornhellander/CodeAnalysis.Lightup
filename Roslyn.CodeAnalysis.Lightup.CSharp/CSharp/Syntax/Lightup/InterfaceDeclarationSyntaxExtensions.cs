// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class InterfaceDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate ParameterListSyntax? ParameterListGetterDelegate(InterfaceDeclarationSyntax? _obj);

        private delegate InterfaceDeclarationSyntax AddParameterListParametersDelegate0(InterfaceDeclarationSyntax? _obj, params ParameterSyntax[] items);
        private delegate InterfaceDeclarationSyntax UpdateDelegate1(InterfaceDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate InterfaceDeclarationSyntax WithParameterListDelegate2(InterfaceDeclarationSyntax? _obj, ParameterListSyntax? parameterList);

        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AddParameterListParametersDelegate0 AddParameterListParametersFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithParameterListDelegate2 WithParameterListFunc2;

        static InterfaceDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(WrappedType, nameof(ParameterList));

            AddParameterListParametersFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate0>(WrappedType, nameof(AddParameterListParameters));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithParameterListFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate2>(WrappedType, nameof(WithParameterList));
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static ParameterListSyntax? ParameterList(this InterfaceDeclarationSyntax _obj)
            => ParameterListGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static InterfaceDeclarationSyntax AddParameterListParameters(this InterfaceDeclarationSyntax _obj, params ParameterSyntax[] items)
            => AddParameterListParametersFunc0(_obj, items);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static InterfaceDeclarationSyntax Update(this InterfaceDeclarationSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc1(_obj, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static InterfaceDeclarationSyntax WithParameterList(this InterfaceDeclarationSyntax _obj, ParameterListSyntax? parameterList)
            => WithParameterListFunc2(_obj, parameterList);
    }
}
