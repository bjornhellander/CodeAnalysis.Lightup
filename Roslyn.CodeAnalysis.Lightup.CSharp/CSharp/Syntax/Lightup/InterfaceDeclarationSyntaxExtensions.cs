// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.</summary>
    public static partial class InterfaceDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax";

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterListGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax AddParameterListParametersDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax WithParameterListDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList);

        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AddParameterListParametersDelegate0 AddParameterListParametersFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithParameterListDelegate2 WithParameterListFunc2;

        static InterfaceDeclarationSyntaxExtensions()
        {
            var wrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ParameterListGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(wrappedType, nameof(ParameterList));

            AddParameterListParametersFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate0>(wrappedType, "AddParameterListParameters", "itemsParameterSyntax[]");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, "Update", "attributeListsSyntaxList`1", "modifiersSyntaxTokenList", "keywordSyntaxToken", "identifierSyntaxToken", "typeParameterListTypeParameterListSyntax", "parameterListParameterListSyntax", "baseListBaseListSyntax", "constraintClausesSyntaxList`1", "openBraceTokenSyntaxToken", "membersSyntaxList`1", "closeBraceTokenSyntaxToken", "semicolonTokenSyntaxToken");
            WithParameterListFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate2>(wrappedType, "WithParameterList", "parameterListParameterListSyntax");
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterList(this Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax _obj)
            => ParameterListGetterFunc(_obj);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax AddParameterListParameters(this Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items)
            => AddParameterListParametersFunc0(_obj, items);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => UpdateFunc1(_obj, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax WithParameterList(this Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList)
            => WithParameterListFunc2(_obj, parameterList);
    }
}
