// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerTypeSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerTypeSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken AsteriskTokenGetterDelegate(TypeSyntax? _obj);
        private delegate FunctionPointerCallingConventionSyntaxWrapper CallingConventionGetterDelegate(TypeSyntax? _obj);
        private delegate SyntaxToken DelegateKeywordGetterDelegate(TypeSyntax? _obj);
        private delegate FunctionPointerParameterListSyntaxWrapper ParameterListGetterDelegate(TypeSyntax? _obj);

        private delegate void AcceptDelegate0(TypeSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate FunctionPointerTypeSyntaxWrapper AddParameterListParametersDelegate1(TypeSyntax? _obj, params FunctionPointerParameterSyntaxWrapper[] items);
        private delegate FunctionPointerTypeSyntaxWrapper UpdateDelegate2(TypeSyntax? _obj, SyntaxToken delegateKeyword, SyntaxToken asteriskToken, FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList);
        private delegate FunctionPointerTypeSyntaxWrapper WithAsteriskTokenDelegate3(TypeSyntax? _obj, SyntaxToken asteriskToken);
        private delegate FunctionPointerTypeSyntaxWrapper WithCallingConventionDelegate4(TypeSyntax? _obj, FunctionPointerCallingConventionSyntaxWrapper callingConvention);
        private delegate FunctionPointerTypeSyntaxWrapper WithDelegateKeywordDelegate5(TypeSyntax? _obj, SyntaxToken delegateKeyword);
        private delegate FunctionPointerTypeSyntaxWrapper WithParameterListDelegate6(TypeSyntax? _obj, FunctionPointerParameterListSyntaxWrapper parameterList);

        private static readonly AsteriskTokenGetterDelegate AsteriskTokenGetterFunc;
        private static readonly CallingConventionGetterDelegate CallingConventionGetterFunc;
        private static readonly DelegateKeywordGetterDelegate DelegateKeywordGetterFunc;
        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddParameterListParametersDelegate1 AddParameterListParametersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithAsteriskTokenDelegate3 WithAsteriskTokenFunc3;
        private static readonly WithCallingConventionDelegate4 WithCallingConventionFunc4;
        private static readonly WithDelegateKeywordDelegate5 WithDelegateKeywordFunc5;
        private static readonly WithParameterListDelegate6 WithParameterListFunc6;

        private readonly TypeSyntax? wrappedObject;

        static FunctionPointerTypeSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AsteriskTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<AsteriskTokenGetterDelegate>(WrappedType, nameof(AsteriskToken));
            CallingConventionGetterFunc = LightupHelper.CreateInstanceGetAccessor<CallingConventionGetterDelegate>(WrappedType, nameof(CallingConvention));
            DelegateKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<DelegateKeywordGetterDelegate>(WrappedType, nameof(DelegateKeyword));
            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(WrappedType, nameof(ParameterList));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddParameterListParametersFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate1>(WrappedType, nameof(AddParameterListParameters));
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithAsteriskTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithAsteriskTokenDelegate3>(WrappedType, nameof(WithAsteriskToken));
            WithCallingConventionFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithCallingConventionDelegate4>(WrappedType, nameof(WithCallingConvention));
            WithDelegateKeywordFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithDelegateKeywordDelegate5>(WrappedType, nameof(WithDelegateKeyword));
            WithParameterListFunc6 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate6>(WrappedType, nameof(WithParameterList));
        }

        private FunctionPointerTypeSyntaxWrapper(TypeSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SyntaxToken AsteriskToken
        {
            get => AsteriskTokenGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerCallingConventionSyntaxWrapper CallingConvention
        {
            get => CallingConventionGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SyntaxToken DelegateKeyword
        {
            get => DelegateKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerParameterListSyntaxWrapper ParameterList
        {
            get => ParameterListGetterFunc(wrappedObject);
        }

        public static implicit operator TypeSyntax?(FunctionPointerTypeSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerTypeSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeSyntax>(obj, WrappedType);
            return new FunctionPointerTypeSyntaxWrapper(obj2);
        }

        public TypeSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper AddParameterListParameters(params FunctionPointerParameterSyntaxWrapper[] items)
            => AddParameterListParametersFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper Update(SyntaxToken delegateKeyword, SyntaxToken asteriskToken, FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList)
            => UpdateFunc2(wrappedObject, delegateKeyword, asteriskToken, callingConvention, parameterList);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper WithAsteriskToken(SyntaxToken asteriskToken)
            => WithAsteriskTokenFunc3(wrappedObject, asteriskToken);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper WithCallingConvention(FunctionPointerCallingConventionSyntaxWrapper callingConvention)
            => WithCallingConventionFunc4(wrappedObject, callingConvention);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper WithDelegateKeyword(SyntaxToken delegateKeyword)
            => WithDelegateKeywordFunc5(wrappedObject, delegateKeyword);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerTypeSyntaxWrapper WithParameterList(FunctionPointerParameterListSyntaxWrapper parameterList)
            => WithParameterListFunc6(wrappedObject, parameterList);
    }
}
