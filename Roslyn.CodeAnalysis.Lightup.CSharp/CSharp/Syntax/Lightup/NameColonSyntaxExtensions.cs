// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class NameColonSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ExpressionSyntax ExpressionGetterDelegate(NameColonSyntax? _obj);

        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;

        static NameColonSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public static ExpressionSyntax Expression(this NameColonSyntax _obj)
            => ExpressionGetterFunc(_obj);
    }
}
