// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class NameColonSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax";

        public static readonly Type? WrappedType;

        private delegate ExpressionSyntax ExpressionGetterDelegate(NameColonSyntax? _obj);

        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;

        static NameColonSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionGetterFunc = LightupHelper.CreateGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ExpressionSyntax Expression(this NameColonSyntax _obj)
            => ExpressionGetterFunc(_obj);
    }
}
