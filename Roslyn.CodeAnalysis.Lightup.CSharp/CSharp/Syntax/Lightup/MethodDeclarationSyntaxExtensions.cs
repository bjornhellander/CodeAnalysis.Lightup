// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class MethodDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate MethodDeclarationSyntax AddBodyAttributeListsDelegate0(MethodDeclarationSyntax? _obj, params AttributeListSyntax[] items);

        private static readonly AddBodyAttributeListsDelegate0 AddBodyAttributeListsFunc0;

        static MethodDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AddBodyAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBodyAttributeListsDelegate0>(WrappedType, nameof(AddBodyAttributeLists));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static MethodDeclarationSyntax AddBodyAttributeLists(this MethodDeclarationSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddBodyAttributeListsFunc0(wrappedObject, items);
    }
}
