// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct LineDirectivePositionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectivePositionSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken CharacterGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken CloseParenTokenGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken CommaTokenGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken LineGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken OpenParenTokenGetterDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate LineDirectivePositionSyntaxWrapper UpdateDelegate1(CSharpSyntaxNode? _obj, SyntaxToken openParenToken, SyntaxToken line, SyntaxToken commaToken, SyntaxToken character, SyntaxToken closeParenToken);
        private delegate LineDirectivePositionSyntaxWrapper WithCharacterDelegate2(CSharpSyntaxNode? _obj, SyntaxToken character);
        private delegate LineDirectivePositionSyntaxWrapper WithCloseParenTokenDelegate3(CSharpSyntaxNode? _obj, SyntaxToken closeParenToken);
        private delegate LineDirectivePositionSyntaxWrapper WithCommaTokenDelegate4(CSharpSyntaxNode? _obj, SyntaxToken commaToken);
        private delegate LineDirectivePositionSyntaxWrapper WithLineDelegate5(CSharpSyntaxNode? _obj, SyntaxToken line);
        private delegate LineDirectivePositionSyntaxWrapper WithOpenParenTokenDelegate6(CSharpSyntaxNode? _obj, SyntaxToken openParenToken);

        private static readonly CharacterGetterDelegate CharacterGetterFunc;
        private static readonly CloseParenTokenGetterDelegate CloseParenTokenGetterFunc;
        private static readonly CommaTokenGetterDelegate CommaTokenGetterFunc;
        private static readonly LineGetterDelegate LineGetterFunc;
        private static readonly OpenParenTokenGetterDelegate OpenParenTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithCharacterDelegate2 WithCharacterFunc2;
        private static readonly WithCloseParenTokenDelegate3 WithCloseParenTokenFunc3;
        private static readonly WithCommaTokenDelegate4 WithCommaTokenFunc4;
        private static readonly WithLineDelegate5 WithLineFunc5;
        private static readonly WithOpenParenTokenDelegate6 WithOpenParenTokenFunc6;

        private readonly CSharpSyntaxNode? wrappedObject;

        static LineDirectivePositionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CharacterGetterFunc = LightupHelper.CreateGetAccessor<CharacterGetterDelegate>(WrappedType, nameof(Character));
            CloseParenTokenGetterFunc = LightupHelper.CreateGetAccessor<CloseParenTokenGetterDelegate>(WrappedType, nameof(CloseParenToken));
            CommaTokenGetterFunc = LightupHelper.CreateGetAccessor<CommaTokenGetterDelegate>(WrappedType, nameof(CommaToken));
            LineGetterFunc = LightupHelper.CreateGetAccessor<LineGetterDelegate>(WrappedType, nameof(Line));
            OpenParenTokenGetterFunc = LightupHelper.CreateGetAccessor<OpenParenTokenGetterDelegate>(WrappedType, nameof(OpenParenToken));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithCharacterFunc2 = LightupHelper.CreateMethodAccessor<WithCharacterDelegate2>(WrappedType, nameof(WithCharacter));
            WithCloseParenTokenFunc3 = LightupHelper.CreateMethodAccessor<WithCloseParenTokenDelegate3>(WrappedType, nameof(WithCloseParenToken));
            WithCommaTokenFunc4 = LightupHelper.CreateMethodAccessor<WithCommaTokenDelegate4>(WrappedType, nameof(WithCommaToken));
            WithLineFunc5 = LightupHelper.CreateMethodAccessor<WithLineDelegate5>(WrappedType, nameof(WithLine));
            WithOpenParenTokenFunc6 = LightupHelper.CreateMethodAccessor<WithOpenParenTokenDelegate6>(WrappedType, nameof(WithOpenParenToken));
        }

        private LineDirectivePositionSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken Character
            => CharacterGetterFunc(wrappedObject);

        public readonly SyntaxToken CloseParenToken
            => CloseParenTokenGetterFunc(wrappedObject);

        public readonly SyntaxToken CommaToken
            => CommaTokenGetterFunc(wrappedObject);

        public readonly SyntaxToken Line
            => LineGetterFunc(wrappedObject);

        public readonly SyntaxToken OpenParenToken
            => OpenParenTokenGetterFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(LineDirectivePositionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LineDirectivePositionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new LineDirectivePositionSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly LineDirectivePositionSyntaxWrapper Update(SyntaxToken openParenToken, SyntaxToken line, SyntaxToken commaToken, SyntaxToken character, SyntaxToken closeParenToken)
            => UpdateFunc1(wrappedObject, openParenToken, line, commaToken, character, closeParenToken);

        public readonly LineDirectivePositionSyntaxWrapper WithCharacter(SyntaxToken character)
            => WithCharacterFunc2(wrappedObject, character);

        public readonly LineDirectivePositionSyntaxWrapper WithCloseParenToken(SyntaxToken closeParenToken)
            => WithCloseParenTokenFunc3(wrappedObject, closeParenToken);

        public readonly LineDirectivePositionSyntaxWrapper WithCommaToken(SyntaxToken commaToken)
            => WithCommaTokenFunc4(wrappedObject, commaToken);

        public readonly LineDirectivePositionSyntaxWrapper WithLine(SyntaxToken line)
            => WithLineFunc5(wrappedObject, line);

        public readonly LineDirectivePositionSyntaxWrapper WithOpenParenToken(SyntaxToken openParenToken)
            => WithOpenParenTokenFunc6(wrappedObject, openParenToken);
    }
}
