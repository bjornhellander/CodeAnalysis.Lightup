// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectivePositionSyntax. Added in version 4.0.0.0.</summary>
    public readonly partial struct LineDirectivePositionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectivePositionSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken CharacterGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken CloseParenTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken CommaTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken LineGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken OpenParenTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken line, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.SyntaxToken character, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCharacterDelegate2(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken character);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCloseParenTokenDelegate3(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCommaTokenDelegate4(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken commaToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithLineDelegate5(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken line);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithOpenParenTokenDelegate6(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken openParenToken);

        private static readonly CharacterGetterDelegate CharacterGetterFunc;
        private static readonly CloseParenTokenGetterDelegate CloseParenTokenGetterFunc;
        private static readonly CommaTokenGetterDelegate CommaTokenGetterFunc;
        private static readonly LineGetterDelegate LineGetterFunc;
        private static readonly OpenParenTokenGetterDelegate OpenParenTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithCharacterDelegate2 WithCharacterFunc2;
        private static readonly WithCloseParenTokenDelegate3 WithCloseParenTokenFunc3;
        private static readonly WithCommaTokenDelegate4 WithCommaTokenFunc4;
        private static readonly WithLineDelegate5 WithLineFunc5;
        private static readonly WithOpenParenTokenDelegate6 WithOpenParenTokenFunc6;

        private readonly Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? wrappedObject;

        static LineDirectivePositionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CharacterGetterFunc = LightupHelper.CreateInstanceGetAccessor<CharacterGetterDelegate>(WrappedType, nameof(Character));
            CloseParenTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseParenTokenGetterDelegate>(WrappedType, nameof(CloseParenToken));
            CommaTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CommaTokenGetterDelegate>(WrappedType, nameof(CommaToken));
            LineGetterFunc = LightupHelper.CreateInstanceGetAccessor<LineGetterDelegate>(WrappedType, nameof(Line));
            OpenParenTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenParenTokenGetterDelegate>(WrappedType, nameof(OpenParenToken));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "openParenTokenSyntaxToken", "lineSyntaxToken", "commaTokenSyntaxToken", "characterSyntaxToken", "closeParenTokenSyntaxToken");
            WithCharacterFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithCharacterDelegate2>(WrappedType, "WithCharacter", "characterSyntaxToken");
            WithCloseParenTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithCloseParenTokenDelegate3>(WrappedType, "WithCloseParenToken", "closeParenTokenSyntaxToken");
            WithCommaTokenFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithCommaTokenDelegate4>(WrappedType, "WithCommaToken", "commaTokenSyntaxToken");
            WithLineFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithLineDelegate5>(WrappedType, "WithLine", "lineSyntaxToken");
            WithOpenParenTokenFunc6 = LightupHelper.CreateInstanceMethodAccessor<WithOpenParenTokenDelegate6>(WrappedType, "WithOpenParenToken", "openParenTokenSyntaxToken");
        }

        private LineDirectivePositionSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken Character
        {
            get => CharacterGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken CloseParenToken
        {
            get => CloseParenTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken CommaToken
        {
            get => CommaTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken Line
        {
            get => LineGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken OpenParenToken
        {
            get => OpenParenTokenGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?(LineDirectivePositionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LineDirectivePositionSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>(obj, WrappedType);
            return new LineDirectivePositionSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken line, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.SyntaxToken character, Microsoft.CodeAnalysis.SyntaxToken closeParenToken)
            => UpdateFunc1(wrappedObject, openParenToken, line, commaToken, character, closeParenToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCharacter(Microsoft.CodeAnalysis.SyntaxToken character)
            => WithCharacterFunc2(wrappedObject, character);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken)
            => WithCloseParenTokenFunc3(wrappedObject, closeParenToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken)
            => WithCommaTokenFunc4(wrappedObject, commaToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithLine(Microsoft.CodeAnalysis.SyntaxToken line)
            => WithLineFunc5(wrappedObject, line);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken)
            => WithOpenParenTokenFunc6(wrappedObject, openParenToken);
    }
}
