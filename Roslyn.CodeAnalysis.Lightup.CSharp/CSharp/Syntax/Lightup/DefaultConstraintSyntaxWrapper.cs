// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct DefaultConstraintSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<TypeParameterConstraintSyntax?, SyntaxToken> DefaultKeywordFunc;

        private static readonly Action<TypeParameterConstraintSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<TypeParameterConstraintSyntax?, SyntaxToken, DefaultConstraintSyntaxWrapper> UpdateFunc1;
        private static readonly Func<TypeParameterConstraintSyntax?, SyntaxToken, DefaultConstraintSyntaxWrapper> WithDefaultKeywordFunc2;

        private readonly TypeParameterConstraintSyntax? wrappedObject;

        static DefaultConstraintSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DefaultKeywordFunc = LightupHelper.CreateGetAccessor<TypeParameterConstraintSyntax?, SyntaxToken>(WrappedType, nameof(DefaultKeyword));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<TypeParameterConstraintSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<TypeParameterConstraintSyntax?, SyntaxToken, DefaultConstraintSyntaxWrapper>(WrappedType, nameof(Update));
            WithDefaultKeywordFunc2 = LightupHelper.CreateMethodAccessor<TypeParameterConstraintSyntax?, SyntaxToken, DefaultConstraintSyntaxWrapper>(WrappedType, nameof(WithDefaultKeyword));
        }

        private DefaultConstraintSyntaxWrapper(TypeParameterConstraintSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken DefaultKeyword
            => DefaultKeywordFunc(wrappedObject);

        public static implicit operator TypeParameterConstraintSyntax?(DefaultConstraintSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DefaultConstraintSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeParameterConstraintSyntax>(obj, WrappedType);
            return new DefaultConstraintSyntaxWrapper(obj2);
        }

        public TypeParameterConstraintSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly DefaultConstraintSyntaxWrapper Update(SyntaxToken defaultKeyword)
            => UpdateFunc1(wrappedObject, defaultKeyword);

        public readonly DefaultConstraintSyntaxWrapper WithDefaultKeyword(SyntaxToken defaultKeyword)
            => WithDefaultKeywordFunc2(wrappedObject, defaultKeyword);
    }
}
