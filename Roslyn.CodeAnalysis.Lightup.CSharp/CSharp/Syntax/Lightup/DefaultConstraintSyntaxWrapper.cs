// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax. Added in version 3.8.0.0.</summary>
    public readonly struct DefaultConstraintSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken DefaultKeywordGetterDelegate(TypeParameterConstraintSyntax? _obj);

        private delegate void AcceptDelegate0(TypeParameterConstraintSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate DefaultConstraintSyntaxWrapper UpdateDelegate1(TypeParameterConstraintSyntax? _obj, SyntaxToken defaultKeyword);
        private delegate DefaultConstraintSyntaxWrapper WithDefaultKeywordDelegate2(TypeParameterConstraintSyntax? _obj, SyntaxToken defaultKeyword);

        private static readonly DefaultKeywordGetterDelegate DefaultKeywordGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithDefaultKeywordDelegate2 WithDefaultKeywordFunc2;

        private readonly TypeParameterConstraintSyntax? wrappedObject;

        static DefaultConstraintSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DefaultKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<DefaultKeywordGetterDelegate>(WrappedType, nameof(DefaultKeyword));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "defaultKeywordSyntaxToken");
            WithDefaultKeywordFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithDefaultKeywordDelegate2>(WrappedType, "WithDefaultKeyword", "defaultKeywordSyntaxToken");
        }

        private DefaultConstraintSyntaxWrapper(TypeParameterConstraintSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly SyntaxToken DefaultKeyword
        {
            get => DefaultKeywordGetterFunc(wrappedObject);
        }

        public static implicit operator TypeParameterConstraintSyntax?(DefaultConstraintSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DefaultConstraintSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeParameterConstraintSyntax>(obj, WrappedType);
            return new DefaultConstraintSyntaxWrapper(obj2);
        }

        public TypeParameterConstraintSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly DefaultConstraintSyntaxWrapper Update(SyntaxToken defaultKeyword)
            => UpdateFunc1(wrappedObject, defaultKeyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly DefaultConstraintSyntaxWrapper WithDefaultKeyword(SyntaxToken defaultKeyword)
            => WithDefaultKeywordFunc2(wrappedObject, defaultKeyword);
    }
}
