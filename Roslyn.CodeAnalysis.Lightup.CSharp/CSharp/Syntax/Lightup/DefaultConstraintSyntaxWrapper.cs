// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct DefaultConstraintSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken DefaultKeywordDelegate(TypeParameterConstraintSyntax? _obj);

        private delegate void AcceptDelegate0(TypeParameterConstraintSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate DefaultConstraintSyntaxWrapper UpdateDelegate1(TypeParameterConstraintSyntax? _obj, SyntaxToken defaultKeyword);
        private delegate DefaultConstraintSyntaxWrapper WithDefaultKeywordDelegate2(TypeParameterConstraintSyntax? _obj, SyntaxToken defaultKeyword);

        private static readonly DefaultKeywordDelegate DefaultKeywordFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithDefaultKeywordDelegate2 WithDefaultKeywordFunc2;

        private readonly TypeParameterConstraintSyntax? wrappedObject;

        static DefaultConstraintSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DefaultKeywordFunc = LightupHelper.CreateGetAccessor<DefaultKeywordDelegate>(WrappedType, nameof(DefaultKeyword));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithDefaultKeywordFunc2 = LightupHelper.CreateMethodAccessor<WithDefaultKeywordDelegate2>(WrappedType, nameof(WithDefaultKeyword));
        }

        private DefaultConstraintSyntaxWrapper(TypeParameterConstraintSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken DefaultKeyword
            => DefaultKeywordFunc(wrappedObject);

        public static implicit operator TypeParameterConstraintSyntax?(DefaultConstraintSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DefaultConstraintSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeParameterConstraintSyntax>(obj, WrappedType);
            return new DefaultConstraintSyntaxWrapper(obj2);
        }

        public TypeParameterConstraintSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly DefaultConstraintSyntaxWrapper Update(SyntaxToken defaultKeyword)
            => UpdateFunc1(wrappedObject, defaultKeyword);

        public readonly DefaultConstraintSyntaxWrapper WithDefaultKeyword(SyntaxToken defaultKeyword)
            => WithDefaultKeywordFunc2(wrappedObject, defaultKeyword);
    }
}
