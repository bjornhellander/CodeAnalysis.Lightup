// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct TypePatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.TypePatternSyntax";

        public static readonly Type? WrappedType;
        private static readonly Func<PatternSyntax?, TypeSyntax> TypeFunc;
        private static readonly Action<PatternSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<PatternSyntax?, TypeSyntax, TypePatternSyntaxWrapper> UpdateFunc1;
        private static readonly Func<PatternSyntax?, TypeSyntax, TypePatternSyntaxWrapper> WithTypeFunc2;

        private readonly PatternSyntax? wrappedObject;

        static TypePatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);
            TypeFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, TypeSyntax>(WrappedType, nameof(Type));
            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<TypePatternSyntaxWrapper, PatternSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<TypePatternSyntaxWrapper, PatternSyntax?, TypeSyntax, TypePatternSyntaxWrapper>(WrappedType, nameof(Update));
            WithTypeFunc2 = LightupHelper.CreateMethodAccessor<TypePatternSyntaxWrapper, PatternSyntax?, TypeSyntax, TypePatternSyntaxWrapper>(WrappedType, nameof(WithType));
        }

        private TypePatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator PatternSyntax?(TypePatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static TypePatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new TypePatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly TypePatternSyntaxWrapper Update(TypeSyntax type)
            => UpdateFunc1(wrappedObject, type);

        public readonly TypePatternSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc2(wrappedObject, type);
    }
}
