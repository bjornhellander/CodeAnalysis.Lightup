// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct TypePatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.TypePatternSyntax";

        public static readonly Type? WrappedType;

        private delegate TypeSyntax TypeDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate TypePatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, TypeSyntax type);
        private delegate TypePatternSyntaxWrapper WithTypeDelegate2(PatternSyntax? _obj, TypeSyntax type);

        private static readonly TypeDelegate TypeFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithTypeDelegate2 WithTypeFunc2;

        private readonly PatternSyntax? wrappedObject;

        static TypePatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            TypeFunc = LightupHelper.CreateGetAccessor<TypeDelegate>(WrappedType, nameof(Type));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithTypeFunc2 = LightupHelper.CreateMethodAccessor<WithTypeDelegate2>(WrappedType, nameof(WithType));
        }

        private TypePatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator PatternSyntax?(TypePatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static TypePatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new TypePatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly TypePatternSyntaxWrapper Update(TypeSyntax type)
            => UpdateFunc1(wrappedObject, type);

        public readonly TypePatternSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc2(wrappedObject, type);
    }
}
