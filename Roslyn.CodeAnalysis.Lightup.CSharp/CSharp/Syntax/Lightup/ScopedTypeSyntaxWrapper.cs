// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.4.0.0</summary>
    public readonly struct ScopedTypeSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ScopedTypeSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<TypeSyntax?, SyntaxToken> ScopedKeywordFunc;
        private static readonly Func<TypeSyntax?, TypeSyntax> TypeFunc;

        private static readonly Action<TypeSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<TypeSyntax?, SyntaxToken, TypeSyntax, ScopedTypeSyntaxWrapper> UpdateFunc1;
        private static readonly Func<TypeSyntax?, SyntaxToken, ScopedTypeSyntaxWrapper> WithScopedKeywordFunc2;
        private static readonly Func<TypeSyntax?, TypeSyntax, ScopedTypeSyntaxWrapper> WithTypeFunc3;

        private readonly TypeSyntax? wrappedObject;

        static ScopedTypeSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ScopedKeywordFunc = LightupHelper.CreateGetAccessor<TypeSyntax?, SyntaxToken>(WrappedType, nameof(ScopedKeyword));
            TypeFunc = LightupHelper.CreateGetAccessor<TypeSyntax?, TypeSyntax>(WrappedType, nameof(Type));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<TypeSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<TypeSyntax?, SyntaxToken, TypeSyntax, ScopedTypeSyntaxWrapper>(WrappedType, nameof(Update));
            WithScopedKeywordFunc2 = LightupHelper.CreateMethodAccessor<TypeSyntax?, SyntaxToken, ScopedTypeSyntaxWrapper>(WrappedType, nameof(WithScopedKeyword));
            WithTypeFunc3 = LightupHelper.CreateMethodAccessor<TypeSyntax?, TypeSyntax, ScopedTypeSyntaxWrapper>(WrappedType, nameof(WithType));
        }

        private ScopedTypeSyntaxWrapper(TypeSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken ScopedKeyword
            => ScopedKeywordFunc(wrappedObject);

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator TypeSyntax?(ScopedTypeSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ScopedTypeSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeSyntax>(obj, WrappedType);
            return new ScopedTypeSyntaxWrapper(obj2);
        }

        public TypeSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly ScopedTypeSyntaxWrapper Update(SyntaxToken scopedKeyword, TypeSyntax type)
            => UpdateFunc1(wrappedObject, scopedKeyword, type);

        public readonly ScopedTypeSyntaxWrapper WithScopedKeyword(SyntaxToken scopedKeyword)
            => WithScopedKeywordFunc2(wrappedObject, scopedKeyword);

        public readonly ScopedTypeSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc3(wrappedObject, type);
    }
}
