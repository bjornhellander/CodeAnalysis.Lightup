// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct LineOrSpanDirectiveTriviaSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LineOrSpanDirectiveTriviaSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken> FileFunc;
        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken> LineKeywordFunc;

        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper> WithEndOfDirectiveTokenFunc0;
        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper> WithFileFunc1;
        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper> WithHashTokenFunc2;
        private static readonly Func<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper> WithLineKeywordFunc3;

        private readonly DirectiveTriviaSyntax? wrappedObject;

        static LineOrSpanDirectiveTriviaSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            FileFunc = LightupHelper.CreateGetAccessor<DirectiveTriviaSyntax?, SyntaxToken>(WrappedType, nameof(File));
            LineKeywordFunc = LightupHelper.CreateGetAccessor<DirectiveTriviaSyntax?, SyntaxToken>(WrappedType, nameof(LineKeyword));

            WithEndOfDirectiveTokenFunc0 = LightupHelper.CreateMethodAccessor<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper>(WrappedType, nameof(WithEndOfDirectiveToken));
            WithFileFunc1 = LightupHelper.CreateMethodAccessor<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper>(WrappedType, nameof(WithFile));
            WithHashTokenFunc2 = LightupHelper.CreateMethodAccessor<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper>(WrappedType, nameof(WithHashToken));
            WithLineKeywordFunc3 = LightupHelper.CreateMethodAccessor<DirectiveTriviaSyntax?, SyntaxToken, LineOrSpanDirectiveTriviaSyntaxWrapper>(WrappedType, nameof(WithLineKeyword));
        }

        private LineOrSpanDirectiveTriviaSyntaxWrapper(DirectiveTriviaSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken File
            => FileFunc(wrappedObject);

        public readonly SyntaxToken LineKeyword
            => LineKeywordFunc(wrappedObject);

        public static implicit operator DirectiveTriviaSyntax?(LineOrSpanDirectiveTriviaSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LineOrSpanDirectiveTriviaSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<DirectiveTriviaSyntax>(obj, WrappedType);
            return new LineOrSpanDirectiveTriviaSyntaxWrapper(obj2);
        }

        public DirectiveTriviaSyntax? Unwrap()
            => wrappedObject;

        public readonly LineOrSpanDirectiveTriviaSyntaxWrapper WithEndOfDirectiveToken(SyntaxToken endOfDirectiveToken)
            => WithEndOfDirectiveTokenFunc0(wrappedObject, endOfDirectiveToken);

        public readonly LineOrSpanDirectiveTriviaSyntaxWrapper WithFile(SyntaxToken file)
            => WithFileFunc1(wrappedObject, file);

        public readonly LineOrSpanDirectiveTriviaSyntaxWrapper WithHashToken(SyntaxToken hashToken)
            => WithHashTokenFunc2(wrappedObject, hashToken);

        public readonly LineOrSpanDirectiveTriviaSyntaxWrapper WithLineKeyword(SyntaxToken lineKeyword)
            => WithLineKeywordFunc3(wrappedObject, lineKeyword);
    }
}
