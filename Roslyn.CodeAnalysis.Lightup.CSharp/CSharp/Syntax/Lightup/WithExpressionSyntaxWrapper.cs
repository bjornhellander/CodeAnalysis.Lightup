// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct WithExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.WithExpressionSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<ExpressionSyntax?, ExpressionSyntax> ExpressionFunc;
        private static readonly Func<ExpressionSyntax?, InitializerExpressionSyntax> InitializerFunc;
        private static readonly Func<ExpressionSyntax?, SyntaxToken> WithKeywordFunc;

        private static readonly Action<ExpressionSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<ExpressionSyntax?, ExpressionSyntax[], WithExpressionSyntaxWrapper> AddInitializerExpressionsFunc1;
        private static readonly Func<ExpressionSyntax?, ExpressionSyntax, SyntaxToken, InitializerExpressionSyntax, WithExpressionSyntaxWrapper> UpdateFunc2;
        private static readonly Func<ExpressionSyntax?, ExpressionSyntax, WithExpressionSyntaxWrapper> WithExpressionFunc3;
        private static readonly Func<ExpressionSyntax?, InitializerExpressionSyntax, WithExpressionSyntaxWrapper> WithInitializerFunc4;
        private static readonly Func<ExpressionSyntax?, SyntaxToken, WithExpressionSyntaxWrapper> WithWithKeywordFunc5;

        private readonly ExpressionSyntax? wrappedObject;

        static WithExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);

            ExpressionFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, ExpressionSyntax>(WrappedType, nameof(Expression));
            InitializerFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, InitializerExpressionSyntax>(WrappedType, nameof(Initializer));
            WithKeywordFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, SyntaxToken>(WrappedType, nameof(WithKeyword));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<ExpressionSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddInitializerExpressionsFunc1 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, ExpressionSyntax[], WithExpressionSyntaxWrapper>(WrappedType, nameof(AddInitializerExpressions));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, ExpressionSyntax, SyntaxToken, InitializerExpressionSyntax, WithExpressionSyntaxWrapper>(WrappedType, nameof(Update));
            WithExpressionFunc3 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, ExpressionSyntax, WithExpressionSyntaxWrapper>(WrappedType, nameof(WithExpression));
            WithInitializerFunc4 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, InitializerExpressionSyntax, WithExpressionSyntaxWrapper>(WrappedType, nameof(WithInitializer));
            WithWithKeywordFunc5 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, SyntaxToken, WithExpressionSyntaxWrapper>(WrappedType, nameof(WithWithKeyword));
        }

        private WithExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly ExpressionSyntax Expression
            => ExpressionFunc(wrappedObject);

        public readonly InitializerExpressionSyntax Initializer
            => InitializerFunc(wrappedObject);

        public readonly SyntaxToken WithKeyword
            => WithKeywordFunc(wrappedObject);

        public static implicit operator ExpressionSyntax?(WithExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static WithExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new WithExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly WithExpressionSyntaxWrapper AddInitializerExpressions(ExpressionSyntax[] items)
            => AddInitializerExpressionsFunc1(wrappedObject, items);

        public readonly WithExpressionSyntaxWrapper Update(ExpressionSyntax expression, SyntaxToken withKeyword, InitializerExpressionSyntax initializer)
            => UpdateFunc2(wrappedObject, expression, withKeyword, initializer);

        public readonly WithExpressionSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc3(wrappedObject, expression);

        public readonly WithExpressionSyntaxWrapper WithInitializer(InitializerExpressionSyntax initializer)
            => WithInitializerFunc4(wrappedObject, initializer);

        public readonly WithExpressionSyntaxWrapper WithWithKeyword(SyntaxToken withKeyword)
            => WithWithKeywordFunc5(wrappedObject, withKeyword);
    }
}
