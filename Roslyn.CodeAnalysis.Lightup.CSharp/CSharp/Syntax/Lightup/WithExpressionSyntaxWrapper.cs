// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in version 3.8.0.0 of Roslyn.</summary>
    public readonly struct WithExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.WithExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate ExpressionSyntax ExpressionGetterDelegate(ExpressionSyntax? _obj);
        private delegate InitializerExpressionSyntax InitializerGetterDelegate(ExpressionSyntax? _obj);
        private delegate SyntaxToken WithKeywordGetterDelegate(ExpressionSyntax? _obj);

        private delegate void AcceptDelegate0(ExpressionSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate WithExpressionSyntaxWrapper AddInitializerExpressionsDelegate1(ExpressionSyntax? _obj, params ExpressionSyntax[] items);
        private delegate WithExpressionSyntaxWrapper UpdateDelegate2(ExpressionSyntax? _obj, ExpressionSyntax expression, SyntaxToken withKeyword, InitializerExpressionSyntax initializer);
        private delegate WithExpressionSyntaxWrapper WithExpressionDelegate3(ExpressionSyntax? _obj, ExpressionSyntax expression);
        private delegate WithExpressionSyntaxWrapper WithInitializerDelegate4(ExpressionSyntax? _obj, InitializerExpressionSyntax initializer);
        private delegate WithExpressionSyntaxWrapper WithWithKeywordDelegate5(ExpressionSyntax? _obj, SyntaxToken withKeyword);

        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;
        private static readonly InitializerGetterDelegate InitializerGetterFunc;
        private static readonly WithKeywordGetterDelegate WithKeywordGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddInitializerExpressionsDelegate1 AddInitializerExpressionsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithExpressionDelegate3 WithExpressionFunc3;
        private static readonly WithInitializerDelegate4 WithInitializerFunc4;
        private static readonly WithWithKeywordDelegate5 WithWithKeywordFunc5;

        private readonly ExpressionSyntax? wrappedObject;

        static WithExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));
            InitializerGetterFunc = LightupHelper.CreateInstanceGetAccessor<InitializerGetterDelegate>(WrappedType, nameof(Initializer));
            WithKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<WithKeywordGetterDelegate>(WrappedType, nameof(WithKeyword));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddInitializerExpressionsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddInitializerExpressionsDelegate1>(WrappedType, nameof(AddInitializerExpressions));
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithExpressionFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionDelegate3>(WrappedType, nameof(WithExpression));
            WithInitializerFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithInitializerDelegate4>(WrappedType, nameof(WithInitializer));
            WithWithKeywordFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithWithKeywordDelegate5>(WrappedType, nameof(WithWithKeyword));
        }

        private WithExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ExpressionSyntax Expression
        {
            get => ExpressionGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly InitializerExpressionSyntax Initializer
        {
            get => InitializerGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly SyntaxToken WithKeyword
        {
            get => WithKeywordGetterFunc(wrappedObject);
        }

        public static implicit operator ExpressionSyntax?(WithExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static WithExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new WithExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly WithExpressionSyntaxWrapper AddInitializerExpressions(params ExpressionSyntax[] items)
            => AddInitializerExpressionsFunc1(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly WithExpressionSyntaxWrapper Update(ExpressionSyntax expression, SyntaxToken withKeyword, InitializerExpressionSyntax initializer)
            => UpdateFunc2(wrappedObject, expression, withKeyword, initializer);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly WithExpressionSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc3(wrappedObject, expression);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly WithExpressionSyntaxWrapper WithInitializer(InitializerExpressionSyntax initializer)
            => WithInitializerFunc4(wrappedObject, initializer);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly WithExpressionSyntaxWrapper WithWithKeyword(SyntaxToken withKeyword)
            => WithWithKeywordFunc5(wrappedObject, withKeyword);
    }
}
