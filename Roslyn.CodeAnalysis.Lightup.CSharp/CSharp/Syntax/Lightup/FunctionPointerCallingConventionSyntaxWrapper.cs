// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerCallingConventionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerCallingConventionSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken ManagedOrUnmanagedKeywordGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper UnmanagedCallingConventionListGetterDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate FunctionPointerCallingConventionSyntaxWrapper AddUnmanagedCallingConventionListCallingConventionsDelegate1(CSharpSyntaxNode? _obj, params FunctionPointerUnmanagedCallingConventionSyntaxWrapper[] items);
        private delegate FunctionPointerCallingConventionSyntaxWrapper UpdateDelegate2(CSharpSyntaxNode? _obj, SyntaxToken managedOrUnmanagedKeyword, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList);
        private delegate FunctionPointerCallingConventionSyntaxWrapper WithManagedOrUnmanagedKeywordDelegate3(CSharpSyntaxNode? _obj, SyntaxToken managedOrUnmanagedKeyword);
        private delegate FunctionPointerCallingConventionSyntaxWrapper WithUnmanagedCallingConventionListDelegate4(CSharpSyntaxNode? _obj, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList);

        private static readonly ManagedOrUnmanagedKeywordGetterDelegate ManagedOrUnmanagedKeywordGetterFunc;
        private static readonly UnmanagedCallingConventionListGetterDelegate UnmanagedCallingConventionListGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddUnmanagedCallingConventionListCallingConventionsDelegate1 AddUnmanagedCallingConventionListCallingConventionsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithManagedOrUnmanagedKeywordDelegate3 WithManagedOrUnmanagedKeywordFunc3;
        private static readonly WithUnmanagedCallingConventionListDelegate4 WithUnmanagedCallingConventionListFunc4;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerCallingConventionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ManagedOrUnmanagedKeywordGetterFunc = LightupHelper.CreateGetAccessor<ManagedOrUnmanagedKeywordGetterDelegate>(WrappedType, nameof(ManagedOrUnmanagedKeyword));
            UnmanagedCallingConventionListGetterFunc = LightupHelper.CreateGetAccessor<UnmanagedCallingConventionListGetterDelegate>(WrappedType, nameof(UnmanagedCallingConventionList));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddUnmanagedCallingConventionListCallingConventionsFunc1 = LightupHelper.CreateMethodAccessor<AddUnmanagedCallingConventionListCallingConventionsDelegate1>(WrappedType, nameof(AddUnmanagedCallingConventionListCallingConventions));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithManagedOrUnmanagedKeywordFunc3 = LightupHelper.CreateMethodAccessor<WithManagedOrUnmanagedKeywordDelegate3>(WrappedType, nameof(WithManagedOrUnmanagedKeyword));
            WithUnmanagedCallingConventionListFunc4 = LightupHelper.CreateMethodAccessor<WithUnmanagedCallingConventionListDelegate4>(WrappedType, nameof(WithUnmanagedCallingConventionList));
        }

        private FunctionPointerCallingConventionSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SyntaxToken ManagedOrUnmanagedKeyword
        {
            get => ManagedOrUnmanagedKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper UnmanagedCallingConventionList
        {
            get => UnmanagedCallingConventionListGetterFunc(wrappedObject);
        }

        public static implicit operator CSharpSyntaxNode?(FunctionPointerCallingConventionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerCallingConventionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerCallingConventionSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerCallingConventionSyntaxWrapper AddUnmanagedCallingConventionListCallingConventions(params FunctionPointerUnmanagedCallingConventionSyntaxWrapper[] items)
            => AddUnmanagedCallingConventionListCallingConventionsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerCallingConventionSyntaxWrapper Update(SyntaxToken managedOrUnmanagedKeyword, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList)
            => UpdateFunc2(wrappedObject, managedOrUnmanagedKeyword, unmanagedCallingConventionList);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerCallingConventionSyntaxWrapper WithManagedOrUnmanagedKeyword(SyntaxToken managedOrUnmanagedKeyword)
            => WithManagedOrUnmanagedKeywordFunc3(wrappedObject, managedOrUnmanagedKeyword);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly FunctionPointerCallingConventionSyntaxWrapper WithUnmanagedCallingConventionList(FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList)
            => WithUnmanagedCallingConventionListFunc4(wrappedObject, unmanagedCallingConventionList);
    }
}
