// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct RelationalPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RelationalPatternSyntax";

        public static readonly Type? WrappedType;

        private delegate ExpressionSyntax ExpressionGetterDelegate(PatternSyntax? _obj);
        private delegate SyntaxToken OperatorTokenGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate RelationalPatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, SyntaxToken operatorToken, ExpressionSyntax expression);
        private delegate RelationalPatternSyntaxWrapper WithExpressionDelegate2(PatternSyntax? _obj, ExpressionSyntax expression);
        private delegate RelationalPatternSyntaxWrapper WithOperatorTokenDelegate3(PatternSyntax? _obj, SyntaxToken operatorToken);

        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;
        private static readonly OperatorTokenGetterDelegate OperatorTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithExpressionDelegate2 WithExpressionFunc2;
        private static readonly WithOperatorTokenDelegate3 WithOperatorTokenFunc3;

        private readonly PatternSyntax? wrappedObject;

        static RelationalPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionGetterFunc = LightupHelper.CreateGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));
            OperatorTokenGetterFunc = LightupHelper.CreateGetAccessor<OperatorTokenGetterDelegate>(WrappedType, nameof(OperatorToken));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithExpressionFunc2 = LightupHelper.CreateMethodAccessor<WithExpressionDelegate2>(WrappedType, nameof(WithExpression));
            WithOperatorTokenFunc3 = LightupHelper.CreateMethodAccessor<WithOperatorTokenDelegate3>(WrappedType, nameof(WithOperatorToken));
        }

        private RelationalPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ExpressionSyntax Expression
        {
            get => ExpressionGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SyntaxToken OperatorToken
        {
            get => OperatorTokenGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(RelationalPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static RelationalPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new RelationalPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly RelationalPatternSyntaxWrapper Update(SyntaxToken operatorToken, ExpressionSyntax expression)
            => UpdateFunc1(wrappedObject, operatorToken, expression);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly RelationalPatternSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc2(wrappedObject, expression);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly RelationalPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc3(wrappedObject, operatorToken);
    }
}
