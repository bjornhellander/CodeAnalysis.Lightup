// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.4.0.0</summary>
    public readonly struct SlicePatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SlicePatternSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken DotDotTokenDelegate(PatternSyntax? _obj);
        private delegate PatternSyntax? PatternDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate SlicePatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, SyntaxToken dotDotToken, PatternSyntax? pattern);
        private delegate SlicePatternSyntaxWrapper WithDotDotTokenDelegate2(PatternSyntax? _obj, SyntaxToken dotDotToken);
        private delegate SlicePatternSyntaxWrapper WithPatternDelegate3(PatternSyntax? _obj, PatternSyntax? pattern);

        private static readonly DotDotTokenDelegate DotDotTokenFunc;
        private static readonly PatternDelegate PatternFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithDotDotTokenDelegate2 WithDotDotTokenFunc2;
        private static readonly WithPatternDelegate3 WithPatternFunc3;

        private readonly PatternSyntax? wrappedObject;

        static SlicePatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DotDotTokenFunc = LightupHelper.CreateGetAccessor<DotDotTokenDelegate>(WrappedType, nameof(DotDotToken));
            PatternFunc = LightupHelper.CreateGetAccessor<PatternDelegate>(WrappedType, nameof(Pattern));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithDotDotTokenFunc2 = LightupHelper.CreateMethodAccessor<WithDotDotTokenDelegate2>(WrappedType, nameof(WithDotDotToken));
            WithPatternFunc3 = LightupHelper.CreateMethodAccessor<WithPatternDelegate3>(WrappedType, nameof(WithPattern));
        }

        private SlicePatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken DotDotToken
            => DotDotTokenFunc(wrappedObject);

        public readonly PatternSyntax? Pattern
            => PatternFunc(wrappedObject);

        public static implicit operator PatternSyntax?(SlicePatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SlicePatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new SlicePatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly SlicePatternSyntaxWrapper Update(SyntaxToken dotDotToken, PatternSyntax? pattern)
            => UpdateFunc1(wrappedObject, dotDotToken, pattern);

        public readonly SlicePatternSyntaxWrapper WithDotDotToken(SyntaxToken dotDotToken)
            => WithDotDotTokenFunc2(wrappedObject, dotDotToken);

        public readonly SlicePatternSyntaxWrapper WithPattern(PatternSyntax? pattern)
            => WithPatternFunc3(wrappedObject, pattern);
    }
}
