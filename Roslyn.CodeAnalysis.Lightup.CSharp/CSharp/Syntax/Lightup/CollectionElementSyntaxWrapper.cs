// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CollectionElementSyntax. Added in version 4.8.0.0.</summary>
    public readonly partial struct CollectionElementSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CollectionElementSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private readonly Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? wrappedObject;

        static CollectionElementSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);
        }

        private CollectionElementSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?(CollectionElementSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        public static CollectionElementSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>(obj, WrappedType);
            return new CollectionElementSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? Unwrap()
            => wrappedObject;
    }
}
