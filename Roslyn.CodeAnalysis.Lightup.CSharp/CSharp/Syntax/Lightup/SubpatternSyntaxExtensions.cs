// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax.</summary>
    public static class SubpatternSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax";

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper ExpressionColonGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax UpdateDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax WithExpressionColonDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon);

        private static readonly ExpressionColonGetterDelegate ExpressionColonGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithExpressionColonDelegate1 WithExpressionColonFunc1;

        static SubpatternSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionColonGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionColonGetterDelegate>(wrappedType, nameof(ExpressionColon));

            UpdateFunc0 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "expressionColonBaseExpressionColonSyntax", "patternPatternSyntax");
            WithExpressionColonFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionColonDelegate1>(wrappedType, "WithExpressionColon", "expressionColonBaseExpressionColonSyntax");
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper ExpressionColon(this Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj)
            => ExpressionColonGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern)
            => UpdateFunc0(_obj, expressionColon, pattern);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax WithExpressionColon(this Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon)
            => WithExpressionColonFunc1(_obj, expressionColon);
    }
}
