// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.</summary>
    public static class OperatorDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax";

        private delegate SyntaxToken CheckedKeywordGetterDelegate(OperatorDeclarationSyntax? _obj);
        private delegate ExplicitInterfaceSpecifierSyntax? ExplicitInterfaceSpecifierGetterDelegate(OperatorDeclarationSyntax? _obj);

        private delegate OperatorDeclarationSyntax AddBodyAttributeListsDelegate0(OperatorDeclarationSyntax? _obj, params AttributeListSyntax[] items);
        private delegate OperatorDeclarationSyntax UpdateDelegate1(OperatorDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate OperatorDeclarationSyntax UpdateDelegate2(OperatorDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate OperatorDeclarationSyntax WithCheckedKeywordDelegate3(OperatorDeclarationSyntax? _obj, SyntaxToken checkedKeyword);
        private delegate OperatorDeclarationSyntax WithExplicitInterfaceSpecifierDelegate4(OperatorDeclarationSyntax? _obj, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier);

        private static readonly CheckedKeywordGetterDelegate CheckedKeywordGetterFunc;
        private static readonly ExplicitInterfaceSpecifierGetterDelegate ExplicitInterfaceSpecifierGetterFunc;

        private static readonly AddBodyAttributeListsDelegate0 AddBodyAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCheckedKeywordDelegate3 WithCheckedKeywordFunc3;
        private static readonly WithExplicitInterfaceSpecifierDelegate4 WithExplicitInterfaceSpecifierFunc4;

        static OperatorDeclarationSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CheckedKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<CheckedKeywordGetterDelegate>(wrappedType, nameof(CheckedKeyword));
            ExplicitInterfaceSpecifierGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExplicitInterfaceSpecifierGetterDelegate>(wrappedType, nameof(ExplicitInterfaceSpecifier));

            AddBodyAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBodyAttributeListsDelegate0>(wrappedType, "AddBodyAttributeLists", "AttributeListSyntax[]");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, "Update", "SyntaxList`1", "SyntaxTokenList", "TypeSyntax", "ExplicitInterfaceSpecifierSyntax", "SyntaxToken", "SyntaxToken", "ParameterListSyntax", "BlockSyntax", "ArrowExpressionClauseSyntax", "SyntaxToken");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(wrappedType, "Update", "SyntaxList`1", "SyntaxTokenList", "TypeSyntax", "ExplicitInterfaceSpecifierSyntax", "SyntaxToken", "SyntaxToken", "SyntaxToken", "ParameterListSyntax", "BlockSyntax", "ArrowExpressionClauseSyntax", "SyntaxToken");
            WithCheckedKeywordFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithCheckedKeywordDelegate3>(wrappedType, "WithCheckedKeyword", "SyntaxToken");
            WithExplicitInterfaceSpecifierFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithExplicitInterfaceSpecifierDelegate4>(wrappedType, "WithExplicitInterfaceSpecifier", "ExplicitInterfaceSpecifierSyntax");
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static SyntaxToken CheckedKeyword(this OperatorDeclarationSyntax _obj)
            => CheckedKeywordGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static ExplicitInterfaceSpecifierSyntax? ExplicitInterfaceSpecifier(this OperatorDeclarationSyntax _obj)
            => ExplicitInterfaceSpecifierGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static OperatorDeclarationSyntax AddBodyAttributeLists(this OperatorDeclarationSyntax _obj, params AttributeListSyntax[] items)
            => AddBodyAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static OperatorDeclarationSyntax Update(this OperatorDeclarationSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => UpdateFunc1(_obj, attributeLists, modifiers, returnType, explicitInterfaceSpecifier, operatorKeyword, operatorToken, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static OperatorDeclarationSyntax Update(this OperatorDeclarationSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => UpdateFunc2(_obj, attributeLists, modifiers, returnType, explicitInterfaceSpecifier, operatorKeyword, checkedKeyword, operatorToken, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static OperatorDeclarationSyntax WithCheckedKeyword(this OperatorDeclarationSyntax _obj, SyntaxToken checkedKeyword)
            => WithCheckedKeywordFunc3(_obj, checkedKeyword);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static OperatorDeclarationSyntax WithExplicitInterfaceSpecifier(this OperatorDeclarationSyntax _obj, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier)
            => WithExplicitInterfaceSpecifierFunc4(_obj, explicitInterfaceSpecifier);
    }
}
