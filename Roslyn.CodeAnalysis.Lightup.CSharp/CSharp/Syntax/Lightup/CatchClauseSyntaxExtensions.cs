// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.</summary>
    public static class CatchClauseSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax";

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax AddBlockAttributeListsDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);

        private static readonly AddBlockAttributeListsDelegate0 AddBlockAttributeListsFunc0;

        static CatchClauseSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AddBlockAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate0>(wrappedType, "AddBlockAttributeLists", "itemsAttributeListSyntax[]");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax AddBlockAttributeLists(this Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc0(_obj, items);
    }
}
