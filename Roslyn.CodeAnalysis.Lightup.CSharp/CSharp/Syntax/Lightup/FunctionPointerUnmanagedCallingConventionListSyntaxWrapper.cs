// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerUnmanagedCallingConventionListSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerUnmanagedCallingConventionListSyntax";

        public static readonly Type? WrappedType;

        private delegate SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> CallingConventionsGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken CloseBracketTokenGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken OpenBracketTokenGetterDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper AddCallingConventionsDelegate1(CSharpSyntaxNode? _obj, params FunctionPointerUnmanagedCallingConventionSyntaxWrapper[] items);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper UpdateDelegate2(CSharpSyntaxNode? _obj, SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions, SyntaxToken closeBracketToken);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCallingConventionsDelegate3(CSharpSyntaxNode? _obj, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCloseBracketTokenDelegate4(CSharpSyntaxNode? _obj, SyntaxToken closeBracketToken);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithOpenBracketTokenDelegate5(CSharpSyntaxNode? _obj, SyntaxToken openBracketToken);

        private static readonly CallingConventionsGetterDelegate CallingConventionsGetterFunc;
        private static readonly CloseBracketTokenGetterDelegate CloseBracketTokenGetterFunc;
        private static readonly OpenBracketTokenGetterDelegate OpenBracketTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddCallingConventionsDelegate1 AddCallingConventionsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCallingConventionsDelegate3 WithCallingConventionsFunc3;
        private static readonly WithCloseBracketTokenDelegate4 WithCloseBracketTokenFunc4;
        private static readonly WithOpenBracketTokenDelegate5 WithOpenBracketTokenFunc5;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CallingConventionsGetterFunc = LightupHelper.CreateGetAccessor<CallingConventionsGetterDelegate>(WrappedType, nameof(CallingConventions));
            CloseBracketTokenGetterFunc = LightupHelper.CreateGetAccessor<CloseBracketTokenGetterDelegate>(WrappedType, nameof(CloseBracketToken));
            OpenBracketTokenGetterFunc = LightupHelper.CreateGetAccessor<OpenBracketTokenGetterDelegate>(WrappedType, nameof(OpenBracketToken));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddCallingConventionsFunc1 = LightupHelper.CreateMethodAccessor<AddCallingConventionsDelegate1>(WrappedType, nameof(AddCallingConventions));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithCallingConventionsFunc3 = LightupHelper.CreateMethodAccessor<WithCallingConventionsDelegate3>(WrappedType, nameof(WithCallingConventions));
            WithCloseBracketTokenFunc4 = LightupHelper.CreateMethodAccessor<WithCloseBracketTokenDelegate4>(WrappedType, nameof(WithCloseBracketToken));
            WithOpenBracketTokenFunc5 = LightupHelper.CreateMethodAccessor<WithOpenBracketTokenDelegate5>(WrappedType, nameof(WithOpenBracketToken));
        }

        private FunctionPointerUnmanagedCallingConventionListSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> CallingConventions
        {
            get => CallingConventionsGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken CloseBracketToken
        {
            get => CloseBracketTokenGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken OpenBracketToken
        {
            get => OpenBracketTokenGetterFunc(wrappedObject);
        }

        public static implicit operator CSharpSyntaxNode?(FunctionPointerUnmanagedCallingConventionListSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerUnmanagedCallingConventionListSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper AddCallingConventions(params FunctionPointerUnmanagedCallingConventionSyntaxWrapper[] items)
            => AddCallingConventionsFunc1(wrappedObject, items);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions, SyntaxToken closeBracketToken)
            => UpdateFunc2(wrappedObject, openBracketToken, callingConventions, closeBracketToken);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCallingConventions(SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions)
            => WithCallingConventionsFunc3(wrappedObject, callingConventions);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc4(wrappedObject, closeBracketToken);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);
    }
}
