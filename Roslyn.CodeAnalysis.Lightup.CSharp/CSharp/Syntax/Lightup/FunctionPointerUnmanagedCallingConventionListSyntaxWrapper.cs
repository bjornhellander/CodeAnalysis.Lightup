// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerUnmanagedCallingConventionListSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerUnmanagedCallingConventionListSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>> CallingConventionsFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> CloseBracketTokenFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> OpenBracketTokenFunc;

        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, FunctionPointerUnmanagedCallingConventionSyntaxWrapper[], FunctionPointerUnmanagedCallingConventionListSyntaxWrapper> AddCallingConventionsFunc1;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper> UpdateFunc2;
        private static readonly Func<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper> WithCallingConventionsFunc3;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper> WithCloseBracketTokenFunc4;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper> WithOpenBracketTokenFunc5;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CallingConventionsFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>>(WrappedType, nameof(CallingConventions));
            CloseBracketTokenFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(CloseBracketToken));
            OpenBracketTokenFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(OpenBracketToken));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddCallingConventionsFunc1 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, FunctionPointerUnmanagedCallingConventionSyntaxWrapper[], FunctionPointerUnmanagedCallingConventionListSyntaxWrapper>(WrappedType, nameof(AddCallingConventions));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper>(WrappedType, nameof(Update));
            WithCallingConventionsFunc3 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper>, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper>(WrappedType, nameof(WithCallingConventions));
            WithCloseBracketTokenFunc4 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper>(WrappedType, nameof(WithCloseBracketToken));
            WithOpenBracketTokenFunc5 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper>(WrappedType, nameof(WithOpenBracketToken));
        }

        private FunctionPointerUnmanagedCallingConventionListSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> CallingConventions
            => CallingConventionsFunc(wrappedObject);

        public readonly SyntaxToken CloseBracketToken
            => CloseBracketTokenFunc(wrappedObject);

        public readonly SyntaxToken OpenBracketToken
            => OpenBracketTokenFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(FunctionPointerUnmanagedCallingConventionListSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerUnmanagedCallingConventionListSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper AddCallingConventions(params FunctionPointerUnmanagedCallingConventionSyntaxWrapper[] items)
            => AddCallingConventionsFunc1(wrappedObject, items);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions, SyntaxToken closeBracketToken)
            => UpdateFunc2(wrappedObject, openBracketToken, callingConventions, closeBracketToken);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCallingConventions(SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions)
            => WithCallingConventionsFunc3(wrappedObject, callingConventions);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc4(wrappedObject, closeBracketToken);

        public readonly FunctionPointerUnmanagedCallingConventionListSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);
    }
}
