// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerParameterListSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterListSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> GreaterThanTokenFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> LessThanTokenFunc;
        private static readonly Func<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>> ParametersFunc;

        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, FunctionPointerParameterSyntaxWrapper[], FunctionPointerParameterListSyntaxWrapper> AddParametersFunc1;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>, SyntaxToken, FunctionPointerParameterListSyntaxWrapper> UpdateFunc2;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, FunctionPointerParameterListSyntaxWrapper> WithGreaterThanTokenFunc3;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, FunctionPointerParameterListSyntaxWrapper> WithLessThanTokenFunc4;
        private static readonly Func<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>, FunctionPointerParameterListSyntaxWrapper> WithParametersFunc5;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerParameterListSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            GreaterThanTokenFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(GreaterThanToken));
            LessThanTokenFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(LessThanToken));
            ParametersFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>>(WrappedType, nameof(Parameters));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddParametersFunc1 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, FunctionPointerParameterSyntaxWrapper[], FunctionPointerParameterListSyntaxWrapper>(WrappedType, nameof(AddParameters));
            UpdateFunc2 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>, SyntaxToken, FunctionPointerParameterListSyntaxWrapper>(WrappedType, nameof(Update));
            WithGreaterThanTokenFunc3 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, FunctionPointerParameterListSyntaxWrapper>(WrappedType, nameof(WithGreaterThanToken));
            WithLessThanTokenFunc4 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, FunctionPointerParameterListSyntaxWrapper>(WrappedType, nameof(WithLessThanToken));
            WithParametersFunc5 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper>, FunctionPointerParameterListSyntaxWrapper>(WrappedType, nameof(WithParameters));
        }

        private FunctionPointerParameterListSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken GreaterThanToken
            => GreaterThanTokenFunc(wrappedObject);

        public readonly SyntaxToken LessThanToken
            => LessThanTokenFunc(wrappedObject);

        public readonly SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> Parameters
            => ParametersFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(FunctionPointerParameterListSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static FunctionPointerParameterListSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerParameterListSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerParameterListSyntaxWrapper AddParameters(params FunctionPointerParameterSyntaxWrapper[] items)
            => AddParametersFunc1(wrappedObject, items);

        public readonly FunctionPointerParameterListSyntaxWrapper Update(SyntaxToken lessThanToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters, SyntaxToken greaterThanToken)
            => UpdateFunc2(wrappedObject, lessThanToken, parameters, greaterThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithGreaterThanToken(SyntaxToken greaterThanToken)
            => WithGreaterThanTokenFunc3(wrappedObject, greaterThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithLessThanToken(SyntaxToken lessThanToken)
            => WithLessThanTokenFunc4(wrappedObject, lessThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithParameters(SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters)
            => WithParametersFunc5(wrappedObject, parameters);
    }
}
