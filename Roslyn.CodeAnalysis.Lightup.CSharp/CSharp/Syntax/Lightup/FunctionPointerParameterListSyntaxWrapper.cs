// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerParameterListSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterListSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken GreaterThanTokenDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxToken LessThanTokenDelegate(CSharpSyntaxNode? _obj);
        private delegate SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> ParametersDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate FunctionPointerParameterListSyntaxWrapper AddParametersDelegate1(CSharpSyntaxNode? _obj, FunctionPointerParameterSyntaxWrapper[] items);
        private delegate FunctionPointerParameterListSyntaxWrapper UpdateDelegate2(CSharpSyntaxNode? _obj, SyntaxToken lessThanToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters, SyntaxToken greaterThanToken);
        private delegate FunctionPointerParameterListSyntaxWrapper WithGreaterThanTokenDelegate3(CSharpSyntaxNode? _obj, SyntaxToken greaterThanToken);
        private delegate FunctionPointerParameterListSyntaxWrapper WithLessThanTokenDelegate4(CSharpSyntaxNode? _obj, SyntaxToken lessThanToken);
        private delegate FunctionPointerParameterListSyntaxWrapper WithParametersDelegate5(CSharpSyntaxNode? _obj, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters);

        private static readonly GreaterThanTokenDelegate GreaterThanTokenFunc;
        private static readonly LessThanTokenDelegate LessThanTokenFunc;
        private static readonly ParametersDelegate ParametersFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddParametersDelegate1 AddParametersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithGreaterThanTokenDelegate3 WithGreaterThanTokenFunc3;
        private static readonly WithLessThanTokenDelegate4 WithLessThanTokenFunc4;
        private static readonly WithParametersDelegate5 WithParametersFunc5;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerParameterListSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GreaterThanTokenFunc = LightupHelper.CreateGetAccessor<GreaterThanTokenDelegate>(WrappedType, nameof(GreaterThanToken));
            LessThanTokenFunc = LightupHelper.CreateGetAccessor<LessThanTokenDelegate>(WrappedType, nameof(LessThanToken));
            ParametersFunc = LightupHelper.CreateGetAccessor<ParametersDelegate>(WrappedType, nameof(Parameters));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddParametersFunc1 = LightupHelper.CreateMethodAccessor<AddParametersDelegate1>(WrappedType, nameof(AddParameters));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithGreaterThanTokenFunc3 = LightupHelper.CreateMethodAccessor<WithGreaterThanTokenDelegate3>(WrappedType, nameof(WithGreaterThanToken));
            WithLessThanTokenFunc4 = LightupHelper.CreateMethodAccessor<WithLessThanTokenDelegate4>(WrappedType, nameof(WithLessThanToken));
            WithParametersFunc5 = LightupHelper.CreateMethodAccessor<WithParametersDelegate5>(WrappedType, nameof(WithParameters));
        }

        private FunctionPointerParameterListSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken GreaterThanToken
            => GreaterThanTokenFunc(wrappedObject);

        public readonly SyntaxToken LessThanToken
            => LessThanTokenFunc(wrappedObject);

        public readonly SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> Parameters
            => ParametersFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(FunctionPointerParameterListSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerParameterListSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerParameterListSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerParameterListSyntaxWrapper AddParameters(params FunctionPointerParameterSyntaxWrapper[] items)
            => AddParametersFunc1(wrappedObject, items);

        public readonly FunctionPointerParameterListSyntaxWrapper Update(SyntaxToken lessThanToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters, SyntaxToken greaterThanToken)
            => UpdateFunc2(wrappedObject, lessThanToken, parameters, greaterThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithGreaterThanToken(SyntaxToken greaterThanToken)
            => WithGreaterThanTokenFunc3(wrappedObject, greaterThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithLessThanToken(SyntaxToken lessThanToken)
            => WithLessThanTokenFunc4(wrappedObject, lessThanToken);

        public readonly FunctionPointerParameterListSyntaxWrapper WithParameters(SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters)
            => WithParametersFunc5(wrappedObject, parameters);
    }
}
