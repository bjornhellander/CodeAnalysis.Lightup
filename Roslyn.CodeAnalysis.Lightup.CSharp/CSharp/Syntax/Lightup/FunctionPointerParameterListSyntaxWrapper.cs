// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterListSyntax. Added in version 3.8.0.0.</summary>
    public readonly struct FunctionPointerParameterListSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterListSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken GreaterThanTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken LessThanTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> ParametersGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper AddParametersDelegate1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper UpdateDelegate2(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> parameters, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithGreaterThanTokenDelegate3(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithLessThanTokenDelegate4(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken lessThanToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithParametersDelegate5(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> parameters);

        private static readonly GreaterThanTokenGetterDelegate GreaterThanTokenGetterFunc;
        private static readonly LessThanTokenGetterDelegate LessThanTokenGetterFunc;
        private static readonly ParametersGetterDelegate ParametersGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddParametersDelegate1 AddParametersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithGreaterThanTokenDelegate3 WithGreaterThanTokenFunc3;
        private static readonly WithLessThanTokenDelegate4 WithLessThanTokenFunc4;
        private static readonly WithParametersDelegate5 WithParametersFunc5;

        private readonly Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? wrappedObject;

        static FunctionPointerParameterListSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GreaterThanTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<GreaterThanTokenGetterDelegate>(WrappedType, nameof(GreaterThanToken));
            LessThanTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<LessThanTokenGetterDelegate>(WrappedType, nameof(LessThanToken));
            ParametersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParametersGetterDelegate>(WrappedType, nameof(Parameters));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            AddParametersFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddParametersDelegate1>(WrappedType, "AddParameters", "itemsFunctionPointerParameterSyntax[]");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, "Update", "lessThanTokenSyntaxToken", "parametersSeparatedSyntaxList`1", "greaterThanTokenSyntaxToken");
            WithGreaterThanTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithGreaterThanTokenDelegate3>(WrappedType, "WithGreaterThanToken", "greaterThanTokenSyntaxToken");
            WithLessThanTokenFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithLessThanTokenDelegate4>(WrappedType, "WithLessThanToken", "lessThanTokenSyntaxToken");
            WithParametersFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithParametersDelegate5>(WrappedType, "WithParameters", "parametersSeparatedSyntaxList`1");
        }

        private FunctionPointerParameterListSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken
        {
            get => GreaterThanTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken LessThanToken
        {
            get => LessThanTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> Parameters
        {
            get => ParametersGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?(FunctionPointerParameterListSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerParameterListSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerParameterListSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper AddParameters(params Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper[] items)
            => AddParametersFunc1(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> parameters, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken)
            => UpdateFunc2(wrappedObject, lessThanToken, parameters, greaterThanToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken)
            => WithGreaterThanTokenFunc3(wrappedObject, greaterThanToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken)
            => WithLessThanTokenFunc4(wrappedObject, lessThanToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper WithParameters(Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper> parameters)
            => WithParametersFunc5(wrappedObject, parameters);
    }
}
