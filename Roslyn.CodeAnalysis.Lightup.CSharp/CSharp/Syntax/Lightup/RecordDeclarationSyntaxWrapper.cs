// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax. Added in version 3.8.0.0.</summary>
    public readonly struct RecordDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> AttributeListsGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? BaseListGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken ClassOrStructKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken CloseBraceTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> ConstraintClausesGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken IdentifierGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken KeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> MembersGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxTokenList ModifiersGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken OpenBraceTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterListGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken SemicolonTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? TypeParameterListGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddAttributeListsDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddBaseListTypesDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddConstraintClausesDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddMembersDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddModifiersDelegate5(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.SyntaxToken[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddParameterListParametersDelegate6(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddTypeParameterListParametersDelegate7(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper UpdateDelegate8(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper UpdateDelegate9(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithAttributeListsDelegate10(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithBaseListDelegate11(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithClassOrStructKeywordDelegate12(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithCloseBraceTokenDelegate13(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithConstraintClausesDelegate14(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithIdentifierDelegate15(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken identifier);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithKeywordDelegate16(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken keyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithMembersDelegate17(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithModifiersDelegate18(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithOpenBraceTokenDelegate19(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken openBraceToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithParameterListDelegate20(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithSemicolonTokenDelegate21(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithTypeParameterListDelegate22(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;
        private static readonly BaseListGetterDelegate BaseListGetterFunc;
        private static readonly ClassOrStructKeywordGetterDelegate ClassOrStructKeywordGetterFunc;
        private static readonly CloseBraceTokenGetterDelegate CloseBraceTokenGetterFunc;
        private static readonly ConstraintClausesGetterDelegate ConstraintClausesGetterFunc;
        private static readonly IdentifierGetterDelegate IdentifierGetterFunc;
        private static readonly KeywordGetterDelegate KeywordGetterFunc;
        private static readonly MembersGetterDelegate MembersGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;
        private static readonly OpenBraceTokenGetterDelegate OpenBraceTokenGetterFunc;
        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;
        private static readonly SemicolonTokenGetterDelegate SemicolonTokenGetterFunc;
        private static readonly TypeParameterListGetterDelegate TypeParameterListGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddAttributeListsDelegate1 AddAttributeListsFunc1;
        private static readonly AddBaseListTypesDelegate2 AddBaseListTypesFunc2;
        private static readonly AddConstraintClausesDelegate3 AddConstraintClausesFunc3;
        private static readonly AddMembersDelegate4 AddMembersFunc4;
        private static readonly AddModifiersDelegate5 AddModifiersFunc5;
        private static readonly AddParameterListParametersDelegate6 AddParameterListParametersFunc6;
        private static readonly AddTypeParameterListParametersDelegate7 AddTypeParameterListParametersFunc7;
        private static readonly UpdateDelegate8 UpdateFunc8;
        private static readonly UpdateDelegate9 UpdateFunc9;
        private static readonly WithAttributeListsDelegate10 WithAttributeListsFunc10;
        private static readonly WithBaseListDelegate11 WithBaseListFunc11;
        private static readonly WithClassOrStructKeywordDelegate12 WithClassOrStructKeywordFunc12;
        private static readonly WithCloseBraceTokenDelegate13 WithCloseBraceTokenFunc13;
        private static readonly WithConstraintClausesDelegate14 WithConstraintClausesFunc14;
        private static readonly WithIdentifierDelegate15 WithIdentifierFunc15;
        private static readonly WithKeywordDelegate16 WithKeywordFunc16;
        private static readonly WithMembersDelegate17 WithMembersFunc17;
        private static readonly WithModifiersDelegate18 WithModifiersFunc18;
        private static readonly WithOpenBraceTokenDelegate19 WithOpenBraceTokenFunc19;
        private static readonly WithParameterListDelegate20 WithParameterListFunc20;
        private static readonly WithSemicolonTokenDelegate21 WithSemicolonTokenFunc21;
        private static readonly WithTypeParameterListDelegate22 WithTypeParameterListFunc22;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? wrappedObject;

        static RecordDeclarationSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));
            BaseListGetterFunc = LightupHelper.CreateInstanceGetAccessor<BaseListGetterDelegate>(WrappedType, nameof(BaseList));
            ClassOrStructKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<ClassOrStructKeywordGetterDelegate>(WrappedType, nameof(ClassOrStructKeyword));
            CloseBraceTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseBraceTokenGetterDelegate>(WrappedType, nameof(CloseBraceToken));
            ConstraintClausesGetterFunc = LightupHelper.CreateInstanceGetAccessor<ConstraintClausesGetterDelegate>(WrappedType, nameof(ConstraintClauses));
            IdentifierGetterFunc = LightupHelper.CreateInstanceGetAccessor<IdentifierGetterDelegate>(WrappedType, nameof(Identifier));
            KeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<KeywordGetterDelegate>(WrappedType, nameof(Keyword));
            MembersGetterFunc = LightupHelper.CreateInstanceGetAccessor<MembersGetterDelegate>(WrappedType, nameof(Members));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));
            OpenBraceTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenBraceTokenGetterDelegate>(WrappedType, nameof(OpenBraceToken));
            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(WrappedType, nameof(ParameterList));
            SemicolonTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<SemicolonTokenGetterDelegate>(WrappedType, nameof(SemicolonToken));
            TypeParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<TypeParameterListGetterDelegate>(WrappedType, nameof(TypeParameterList));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            AddAttributeListsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate1>(WrappedType, "AddAttributeLists", "itemsAttributeListSyntax[]");
            AddBaseListTypesFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddBaseListTypesDelegate2>(WrappedType, "AddBaseListTypes", "itemsBaseTypeSyntax[]");
            AddConstraintClausesFunc3 = LightupHelper.CreateInstanceMethodAccessor<AddConstraintClausesDelegate3>(WrappedType, "AddConstraintClauses", "itemsTypeParameterConstraintClauseSyntax[]");
            AddMembersFunc4 = LightupHelper.CreateInstanceMethodAccessor<AddMembersDelegate4>(WrappedType, "AddMembers", "itemsMemberDeclarationSyntax[]");
            AddModifiersFunc5 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate5>(WrappedType, "AddModifiers", "itemsSyntaxToken[]");
            AddParameterListParametersFunc6 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate6>(WrappedType, "AddParameterListParameters", "itemsParameterSyntax[]");
            AddTypeParameterListParametersFunc7 = LightupHelper.CreateInstanceMethodAccessor<AddTypeParameterListParametersDelegate7>(WrappedType, "AddTypeParameterListParameters", "itemsTypeParameterSyntax[]");
            UpdateFunc8 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate8>(WrappedType, "Update", "attributeListsSyntaxList`1", "modifiersSyntaxTokenList", "keywordSyntaxToken", "identifierSyntaxToken", "typeParameterListTypeParameterListSyntax", "parameterListParameterListSyntax", "baseListBaseListSyntax", "constraintClausesSyntaxList`1", "openBraceTokenSyntaxToken", "membersSyntaxList`1", "closeBraceTokenSyntaxToken", "semicolonTokenSyntaxToken");
            UpdateFunc9 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate9>(WrappedType, "Update", "attributeListsSyntaxList`1", "modifiersSyntaxTokenList", "keywordSyntaxToken", "classOrStructKeywordSyntaxToken", "identifierSyntaxToken", "typeParameterListTypeParameterListSyntax", "parameterListParameterListSyntax", "baseListBaseListSyntax", "constraintClausesSyntaxList`1", "openBraceTokenSyntaxToken", "membersSyntaxList`1", "closeBraceTokenSyntaxToken", "semicolonTokenSyntaxToken");
            WithAttributeListsFunc10 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate10>(WrappedType, "WithAttributeLists", "attributeListsSyntaxList`1");
            WithBaseListFunc11 = LightupHelper.CreateInstanceMethodAccessor<WithBaseListDelegate11>(WrappedType, "WithBaseList", "baseListBaseListSyntax");
            WithClassOrStructKeywordFunc12 = LightupHelper.CreateInstanceMethodAccessor<WithClassOrStructKeywordDelegate12>(WrappedType, "WithClassOrStructKeyword", "classOrStructKeywordSyntaxToken");
            WithCloseBraceTokenFunc13 = LightupHelper.CreateInstanceMethodAccessor<WithCloseBraceTokenDelegate13>(WrappedType, "WithCloseBraceToken", "closeBraceTokenSyntaxToken");
            WithConstraintClausesFunc14 = LightupHelper.CreateInstanceMethodAccessor<WithConstraintClausesDelegate14>(WrappedType, "WithConstraintClauses", "constraintClausesSyntaxList`1");
            WithIdentifierFunc15 = LightupHelper.CreateInstanceMethodAccessor<WithIdentifierDelegate15>(WrappedType, "WithIdentifier", "identifierSyntaxToken");
            WithKeywordFunc16 = LightupHelper.CreateInstanceMethodAccessor<WithKeywordDelegate16>(WrappedType, "WithKeyword", "keywordSyntaxToken");
            WithMembersFunc17 = LightupHelper.CreateInstanceMethodAccessor<WithMembersDelegate17>(WrappedType, "WithMembers", "membersSyntaxList`1");
            WithModifiersFunc18 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate18>(WrappedType, "WithModifiers", "modifiersSyntaxTokenList");
            WithOpenBraceTokenFunc19 = LightupHelper.CreateInstanceMethodAccessor<WithOpenBraceTokenDelegate19>(WrappedType, "WithOpenBraceToken", "openBraceTokenSyntaxToken");
            WithParameterListFunc20 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate20>(WrappedType, "WithParameterList", "parameterListParameterListSyntax");
            WithSemicolonTokenFunc21 = LightupHelper.CreateInstanceMethodAccessor<WithSemicolonTokenDelegate21>(WrappedType, "WithSemicolonToken", "semicolonTokenSyntaxToken");
            WithTypeParameterListFunc22 = LightupHelper.CreateInstanceMethodAccessor<WithTypeParameterListDelegate22>(WrappedType, "WithTypeParameterList", "typeParameterListTypeParameterListSyntax");
        }

        private RecordDeclarationSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> AttributeLists
        {
            get => AttributeListsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? BaseList
        {
            get => BaseListGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken ClassOrStructKeyword
        {
            get => ClassOrStructKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken
        {
            get => CloseBraceTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> ConstraintClauses
        {
            get => ConstraintClausesGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken Identifier
        {
            get => IdentifierGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken Keyword
        {
            get => KeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> Members
        {
            get => MembersGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxTokenList Modifiers
        {
            get => ModifiersGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken
        {
            get => OpenBraceTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterList
        {
            get => ParameterListGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken SemicolonToken
        {
            get => SemicolonTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? TypeParameterList
        {
            get => TypeParameterListGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax?(RecordDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static RecordDeclarationSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax>(obj, WrappedType);
            return new RecordDeclarationSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddBaseListTypes(params Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[] items)
            => AddBaseListTypesFunc2(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddConstraintClauses(params Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[] items)
            => AddConstraintClausesFunc3(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddMembers(params Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[] items)
            => AddMembersFunc4(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items)
            => AddModifiersFunc5(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddParameterListParameters(params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items)
            => AddParameterListParametersFunc6(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper AddTypeParameterListParameters(params Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[] items)
            => AddTypeParameterListParametersFunc7(wrappedObject, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => UpdateFunc8(wrappedObject, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => UpdateFunc9(wrappedObject, attributeLists, modifiers, keyword, classOrStructKeyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc10(wrappedObject, attributeLists);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax? baseList)
            => WithBaseListFunc11(wrappedObject, baseList);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithClassOrStructKeyword(Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword)
            => WithClassOrStructKeywordFunc12(wrappedObject, classOrStructKeyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken closeBraceToken)
            => WithCloseBraceTokenFunc13(wrappedObject, closeBraceToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax> constraintClauses)
            => WithConstraintClausesFunc14(wrappedObject, constraintClauses);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier)
            => WithIdentifierFunc15(wrappedObject, identifier);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword)
            => WithKeywordFunc16(wrappedObject, keyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members)
            => WithMembersFunc17(wrappedObject, members);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers)
            => WithModifiersFunc18(wrappedObject, modifiers);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken openBraceToken)
            => WithOpenBraceTokenFunc19(wrappedObject, openBraceToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList)
            => WithParameterListFunc20(wrappedObject, parameterList);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc21(wrappedObject, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax? typeParameterList)
            => WithTypeParameterListFunc22(wrappedObject, typeParameterList);
    }
}
