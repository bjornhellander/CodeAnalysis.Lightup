// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct RecordDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax";

        private static readonly Type? WrappedType;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>> AttributeListsFunc;
        private static readonly Func<TypeDeclarationSyntax?, BaseListSyntax?> BaseListFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> ClassOrStructKeywordFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> CloseBraceTokenFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>> ConstraintClausesFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> IdentifierFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> KeywordFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>> MembersFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxTokenList> ModifiersFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> OpenBraceTokenFunc;
        private static readonly Func<TypeDeclarationSyntax?, ParameterListSyntax?> ParameterListFunc;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken> SemicolonTokenFunc;
        private static readonly Func<TypeDeclarationSyntax?, TypeParameterListSyntax?> TypeParameterListFunc;
        private static readonly Action<TypeDeclarationSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<TypeDeclarationSyntax?, AttributeListSyntax[], RecordDeclarationSyntaxWrapper> AddAttributeListsFunc1;
        private static readonly Func<TypeDeclarationSyntax?, BaseTypeSyntax[], RecordDeclarationSyntaxWrapper> AddBaseListTypesFunc2;
        private static readonly Func<TypeDeclarationSyntax?, TypeParameterConstraintClauseSyntax[], RecordDeclarationSyntaxWrapper> AddConstraintClausesFunc3;
        private static readonly Func<TypeDeclarationSyntax?, MemberDeclarationSyntax[], RecordDeclarationSyntaxWrapper> AddMembersFunc4;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken[], RecordDeclarationSyntaxWrapper> AddModifiersFunc5;
        private static readonly Func<TypeDeclarationSyntax?, ParameterSyntax[], RecordDeclarationSyntaxWrapper> AddParameterListParametersFunc6;
        private static readonly Func<TypeDeclarationSyntax?, TypeParameterSyntax[], RecordDeclarationSyntaxWrapper> AddTypeParameterListParametersFunc7;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax?, ParameterListSyntax?, BaseListSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken, RecordDeclarationSyntaxWrapper> UpdateFunc8;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, SyntaxToken, TypeParameterListSyntax?, ParameterListSyntax?, BaseListSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken, RecordDeclarationSyntaxWrapper> UpdateFunc9;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, RecordDeclarationSyntaxWrapper> WithAttributeListsFunc10;
        private static readonly Func<TypeDeclarationSyntax?, BaseListSyntax?, RecordDeclarationSyntaxWrapper> WithBaseListFunc11;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithClassOrStructKeywordFunc12;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithCloseBraceTokenFunc13;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, RecordDeclarationSyntaxWrapper> WithConstraintClausesFunc14;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithIdentifierFunc15;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithKeywordFunc16;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, RecordDeclarationSyntaxWrapper> WithMembersFunc17;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxTokenList, RecordDeclarationSyntaxWrapper> WithModifiersFunc18;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithOpenBraceTokenFunc19;
        private static readonly Func<TypeDeclarationSyntax?, ParameterListSyntax?, RecordDeclarationSyntaxWrapper> WithParameterListFunc20;
        private static readonly Func<TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper> WithSemicolonTokenFunc21;
        private static readonly Func<TypeDeclarationSyntax?, TypeParameterListSyntax?, RecordDeclarationSyntaxWrapper> WithTypeParameterListFunc22;

        private readonly TypeDeclarationSyntax? WrappedObject;

        static RecordDeclarationSyntaxWrapper()
        {
            WrappedType = WrapperHelper.FindSyntaxType(WrappedTypeName);
            AttributeListsFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>>(WrappedType, nameof(AttributeLists));
            BaseListFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, BaseListSyntax?>(WrappedType, nameof(BaseList));
            ClassOrStructKeywordFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(ClassOrStructKeyword));
            CloseBraceTokenFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(CloseBraceToken));
            ConstraintClausesFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>>(WrappedType, nameof(ConstraintClauses));
            IdentifierFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(Identifier));
            KeywordFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(Keyword));
            MembersFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>>(WrappedType, nameof(Members));
            ModifiersFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxTokenList>(WrappedType, nameof(Modifiers));
            OpenBraceTokenFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(OpenBraceToken));
            ParameterListFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, ParameterListSyntax?>(WrappedType, nameof(ParameterList));
            SemicolonTokenFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(SemicolonToken));
            TypeParameterListFunc = WrapperHelper.CreateGetAccessor<TypeDeclarationSyntax?, TypeParameterListSyntax?>(WrappedType, nameof(TypeParameterList));
            AcceptFunc0 = WrapperHelper.CreateVoidMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, AttributeListSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddAttributeLists));
            AddBaseListTypesFunc2 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, BaseTypeSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddBaseListTypes));
            AddConstraintClausesFunc3 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, TypeParameterConstraintClauseSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddConstraintClauses));
            AddMembersFunc4 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, MemberDeclarationSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddMembers));
            AddModifiersFunc5 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddModifiers));
            AddParameterListParametersFunc6 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, ParameterSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddParameterListParameters));
            AddTypeParameterListParametersFunc7 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, TypeParameterSyntax[], RecordDeclarationSyntaxWrapper>(WrappedType, nameof(AddTypeParameterListParameters));
            UpdateFunc8 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, TypeParameterListSyntax?, ParameterListSyntax?, BaseListSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(Update));
            UpdateFunc9 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, SyntaxToken, TypeParameterListSyntax?, ParameterListSyntax?, BaseListSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, SyntaxToken, SyntaxList<MemberDeclarationSyntax>, SyntaxToken, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(Update));
            WithAttributeListsFunc10 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxList<AttributeListSyntax>, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithAttributeLists));
            WithBaseListFunc11 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, BaseListSyntax?, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithBaseList));
            WithClassOrStructKeywordFunc12 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithClassOrStructKeyword));
            WithCloseBraceTokenFunc13 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithCloseBraceToken));
            WithConstraintClausesFunc14 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxList<TypeParameterConstraintClauseSyntax>, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithConstraintClauses));
            WithIdentifierFunc15 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithIdentifier));
            WithKeywordFunc16 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithKeyword));
            WithMembersFunc17 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithMembers));
            WithModifiersFunc18 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxTokenList, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithModifiers));
            WithOpenBraceTokenFunc19 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithOpenBraceToken));
            WithParameterListFunc20 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, ParameterListSyntax?, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithParameterList));
            WithSemicolonTokenFunc21 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, SyntaxToken, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithSemicolonToken));
            WithTypeParameterListFunc22 = WrapperHelper.CreateMethodAccessor<RecordDeclarationSyntaxWrapper, TypeDeclarationSyntax?, TypeParameterListSyntax?, RecordDeclarationSyntaxWrapper>(WrappedType, nameof(WithTypeParameterList));
        }

        private RecordDeclarationSyntaxWrapper(TypeDeclarationSyntax? obj)
        {
            WrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
            => AttributeListsFunc(WrappedObject);

        public readonly BaseListSyntax? BaseList
            => BaseListFunc(WrappedObject);

        public readonly SyntaxToken ClassOrStructKeyword
            => ClassOrStructKeywordFunc(WrappedObject);

        public readonly SyntaxToken CloseBraceToken
            => CloseBraceTokenFunc(WrappedObject);

        public readonly SyntaxList<TypeParameterConstraintClauseSyntax> ConstraintClauses
            => ConstraintClausesFunc(WrappedObject);

        public readonly SyntaxToken Identifier
            => IdentifierFunc(WrappedObject);

        public readonly SyntaxToken Keyword
            => KeywordFunc(WrappedObject);

        public readonly SyntaxList<MemberDeclarationSyntax> Members
            => MembersFunc(WrappedObject);

        public readonly SyntaxTokenList Modifiers
            => ModifiersFunc(WrappedObject);

        public readonly SyntaxToken OpenBraceToken
            => OpenBraceTokenFunc(WrappedObject);

        public readonly ParameterListSyntax? ParameterList
            => ParameterListFunc(WrappedObject);

        public readonly SyntaxToken SemicolonToken
            => SemicolonTokenFunc(WrappedObject);

        public readonly TypeParameterListSyntax? TypeParameterList
            => TypeParameterListFunc(WrappedObject);

        public static implicit operator TypeDeclarationSyntax?(RecordDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => WrapperHelper.Is(obj, WrappedType);

        public static RecordDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = WrapperHelper.As<TypeDeclarationSyntax>(obj, WrappedType);
            return new RecordDeclarationSyntaxWrapper(obj2);
        }

        public TypeDeclarationSyntax? Unwrap()
            => WrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(WrappedObject, visitor);

        public readonly RecordDeclarationSyntaxWrapper AddAttributeLists(AttributeListSyntax[] items)
            => AddAttributeListsFunc1(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddBaseListTypes(BaseTypeSyntax[] items)
            => AddBaseListTypesFunc2(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddConstraintClauses(TypeParameterConstraintClauseSyntax[] items)
            => AddConstraintClausesFunc3(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddMembers(MemberDeclarationSyntax[] items)
            => AddMembersFunc4(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddModifiers(SyntaxToken[] items)
            => AddModifiersFunc5(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddParameterListParameters(ParameterSyntax[] items)
            => AddParameterListParametersFunc6(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddTypeParameterListParameters(TypeParameterSyntax[] items)
            => AddTypeParameterListParametersFunc7(WrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc8(WrappedObject, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken classOrStructKeyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc9(WrappedObject, attributeLists, modifiers, keyword, classOrStructKeyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc10(WrappedObject, attributeLists);

        public readonly RecordDeclarationSyntaxWrapper WithBaseList(BaseListSyntax? baseList)
            => WithBaseListFunc11(WrappedObject, baseList);

        public readonly RecordDeclarationSyntaxWrapper WithClassOrStructKeyword(SyntaxToken classOrStructKeyword)
            => WithClassOrStructKeywordFunc12(WrappedObject, classOrStructKeyword);

        public readonly RecordDeclarationSyntaxWrapper WithCloseBraceToken(SyntaxToken closeBraceToken)
            => WithCloseBraceTokenFunc13(WrappedObject, closeBraceToken);

        public readonly RecordDeclarationSyntaxWrapper WithConstraintClauses(SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses)
            => WithConstraintClausesFunc14(WrappedObject, constraintClauses);

        public readonly RecordDeclarationSyntaxWrapper WithIdentifier(SyntaxToken identifier)
            => WithIdentifierFunc15(WrappedObject, identifier);

        public readonly RecordDeclarationSyntaxWrapper WithKeyword(SyntaxToken keyword)
            => WithKeywordFunc16(WrappedObject, keyword);

        public readonly RecordDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc17(WrappedObject, members);

        public readonly RecordDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc18(WrappedObject, modifiers);

        public readonly RecordDeclarationSyntaxWrapper WithOpenBraceToken(SyntaxToken openBraceToken)
            => WithOpenBraceTokenFunc19(WrappedObject, openBraceToken);

        public readonly RecordDeclarationSyntaxWrapper WithParameterList(ParameterListSyntax? parameterList)
            => WithParameterListFunc20(WrappedObject, parameterList);

        public readonly RecordDeclarationSyntaxWrapper WithSemicolonToken(SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc21(WrappedObject, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper WithTypeParameterList(TypeParameterListSyntax? typeParameterList)
            => WithTypeParameterListFunc22(WrappedObject, typeParameterList);
    }
}
