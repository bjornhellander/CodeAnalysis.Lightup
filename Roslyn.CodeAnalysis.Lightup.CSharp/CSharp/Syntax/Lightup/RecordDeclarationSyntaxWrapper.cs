// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct RecordDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate BaseListSyntax? BaseListGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken ClassOrStructKeywordGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken CloseBraceTokenGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxList<TypeParameterConstraintClauseSyntax> ConstraintClausesGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken IdentifierGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken KeywordGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxList<MemberDeclarationSyntax> MembersGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken OpenBraceTokenGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate ParameterListSyntax? ParameterListGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate SyntaxToken SemicolonTokenGetterDelegate(TypeDeclarationSyntax? _obj);
        private delegate TypeParameterListSyntax? TypeParameterListGetterDelegate(TypeDeclarationSyntax? _obj);

        private delegate void AcceptDelegate0(TypeDeclarationSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate RecordDeclarationSyntaxWrapper AddAttributeListsDelegate1(TypeDeclarationSyntax? _obj, params AttributeListSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper AddBaseListTypesDelegate2(TypeDeclarationSyntax? _obj, params BaseTypeSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper AddConstraintClausesDelegate3(TypeDeclarationSyntax? _obj, params TypeParameterConstraintClauseSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper AddMembersDelegate4(TypeDeclarationSyntax? _obj, params MemberDeclarationSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper AddModifiersDelegate5(TypeDeclarationSyntax? _obj, params SyntaxToken[] items);
        private delegate RecordDeclarationSyntaxWrapper AddParameterListParametersDelegate6(TypeDeclarationSyntax? _obj, params ParameterSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper AddTypeParameterListParametersDelegate7(TypeDeclarationSyntax? _obj, params TypeParameterSyntax[] items);
        private delegate RecordDeclarationSyntaxWrapper UpdateDelegate8(TypeDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate RecordDeclarationSyntaxWrapper UpdateDelegate9(TypeDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken classOrStructKeyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate RecordDeclarationSyntaxWrapper WithAttributeListsDelegate10(TypeDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate RecordDeclarationSyntaxWrapper WithBaseListDelegate11(TypeDeclarationSyntax? _obj, BaseListSyntax? baseList);
        private delegate RecordDeclarationSyntaxWrapper WithClassOrStructKeywordDelegate12(TypeDeclarationSyntax? _obj, SyntaxToken classOrStructKeyword);
        private delegate RecordDeclarationSyntaxWrapper WithCloseBraceTokenDelegate13(TypeDeclarationSyntax? _obj, SyntaxToken closeBraceToken);
        private delegate RecordDeclarationSyntaxWrapper WithConstraintClausesDelegate14(TypeDeclarationSyntax? _obj, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses);
        private delegate RecordDeclarationSyntaxWrapper WithIdentifierDelegate15(TypeDeclarationSyntax? _obj, SyntaxToken identifier);
        private delegate RecordDeclarationSyntaxWrapper WithKeywordDelegate16(TypeDeclarationSyntax? _obj, SyntaxToken keyword);
        private delegate RecordDeclarationSyntaxWrapper WithMembersDelegate17(TypeDeclarationSyntax? _obj, SyntaxList<MemberDeclarationSyntax> members);
        private delegate RecordDeclarationSyntaxWrapper WithModifiersDelegate18(TypeDeclarationSyntax? _obj, SyntaxTokenList modifiers);
        private delegate RecordDeclarationSyntaxWrapper WithOpenBraceTokenDelegate19(TypeDeclarationSyntax? _obj, SyntaxToken openBraceToken);
        private delegate RecordDeclarationSyntaxWrapper WithParameterListDelegate20(TypeDeclarationSyntax? _obj, ParameterListSyntax? parameterList);
        private delegate RecordDeclarationSyntaxWrapper WithSemicolonTokenDelegate21(TypeDeclarationSyntax? _obj, SyntaxToken semicolonToken);
        private delegate RecordDeclarationSyntaxWrapper WithTypeParameterListDelegate22(TypeDeclarationSyntax? _obj, TypeParameterListSyntax? typeParameterList);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;
        private static readonly BaseListGetterDelegate BaseListGetterFunc;
        private static readonly ClassOrStructKeywordGetterDelegate ClassOrStructKeywordGetterFunc;
        private static readonly CloseBraceTokenGetterDelegate CloseBraceTokenGetterFunc;
        private static readonly ConstraintClausesGetterDelegate ConstraintClausesGetterFunc;
        private static readonly IdentifierGetterDelegate IdentifierGetterFunc;
        private static readonly KeywordGetterDelegate KeywordGetterFunc;
        private static readonly MembersGetterDelegate MembersGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;
        private static readonly OpenBraceTokenGetterDelegate OpenBraceTokenGetterFunc;
        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;
        private static readonly SemicolonTokenGetterDelegate SemicolonTokenGetterFunc;
        private static readonly TypeParameterListGetterDelegate TypeParameterListGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddAttributeListsDelegate1 AddAttributeListsFunc1;
        private static readonly AddBaseListTypesDelegate2 AddBaseListTypesFunc2;
        private static readonly AddConstraintClausesDelegate3 AddConstraintClausesFunc3;
        private static readonly AddMembersDelegate4 AddMembersFunc4;
        private static readonly AddModifiersDelegate5 AddModifiersFunc5;
        private static readonly AddParameterListParametersDelegate6 AddParameterListParametersFunc6;
        private static readonly AddTypeParameterListParametersDelegate7 AddTypeParameterListParametersFunc7;
        private static readonly UpdateDelegate8 UpdateFunc8;
        private static readonly UpdateDelegate9 UpdateFunc9;
        private static readonly WithAttributeListsDelegate10 WithAttributeListsFunc10;
        private static readonly WithBaseListDelegate11 WithBaseListFunc11;
        private static readonly WithClassOrStructKeywordDelegate12 WithClassOrStructKeywordFunc12;
        private static readonly WithCloseBraceTokenDelegate13 WithCloseBraceTokenFunc13;
        private static readonly WithConstraintClausesDelegate14 WithConstraintClausesFunc14;
        private static readonly WithIdentifierDelegate15 WithIdentifierFunc15;
        private static readonly WithKeywordDelegate16 WithKeywordFunc16;
        private static readonly WithMembersDelegate17 WithMembersFunc17;
        private static readonly WithModifiersDelegate18 WithModifiersFunc18;
        private static readonly WithOpenBraceTokenDelegate19 WithOpenBraceTokenFunc19;
        private static readonly WithParameterListDelegate20 WithParameterListFunc20;
        private static readonly WithSemicolonTokenDelegate21 WithSemicolonTokenFunc21;
        private static readonly WithTypeParameterListDelegate22 WithTypeParameterListFunc22;

        private readonly TypeDeclarationSyntax? wrappedObject;

        static RecordDeclarationSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));
            BaseListGetterFunc = LightupHelper.CreateGetAccessor<BaseListGetterDelegate>(WrappedType, nameof(BaseList));
            ClassOrStructKeywordGetterFunc = LightupHelper.CreateGetAccessor<ClassOrStructKeywordGetterDelegate>(WrappedType, nameof(ClassOrStructKeyword));
            CloseBraceTokenGetterFunc = LightupHelper.CreateGetAccessor<CloseBraceTokenGetterDelegate>(WrappedType, nameof(CloseBraceToken));
            ConstraintClausesGetterFunc = LightupHelper.CreateGetAccessor<ConstraintClausesGetterDelegate>(WrappedType, nameof(ConstraintClauses));
            IdentifierGetterFunc = LightupHelper.CreateGetAccessor<IdentifierGetterDelegate>(WrappedType, nameof(Identifier));
            KeywordGetterFunc = LightupHelper.CreateGetAccessor<KeywordGetterDelegate>(WrappedType, nameof(Keyword));
            MembersGetterFunc = LightupHelper.CreateGetAccessor<MembersGetterDelegate>(WrappedType, nameof(Members));
            ModifiersGetterFunc = LightupHelper.CreateGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));
            OpenBraceTokenGetterFunc = LightupHelper.CreateGetAccessor<OpenBraceTokenGetterDelegate>(WrappedType, nameof(OpenBraceToken));
            ParameterListGetterFunc = LightupHelper.CreateGetAccessor<ParameterListGetterDelegate>(WrappedType, nameof(ParameterList));
            SemicolonTokenGetterFunc = LightupHelper.CreateGetAccessor<SemicolonTokenGetterDelegate>(WrappedType, nameof(SemicolonToken));
            TypeParameterListGetterFunc = LightupHelper.CreateGetAccessor<TypeParameterListGetterDelegate>(WrappedType, nameof(TypeParameterList));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = LightupHelper.CreateMethodAccessor<AddAttributeListsDelegate1>(WrappedType, nameof(AddAttributeLists));
            AddBaseListTypesFunc2 = LightupHelper.CreateMethodAccessor<AddBaseListTypesDelegate2>(WrappedType, nameof(AddBaseListTypes));
            AddConstraintClausesFunc3 = LightupHelper.CreateMethodAccessor<AddConstraintClausesDelegate3>(WrappedType, nameof(AddConstraintClauses));
            AddMembersFunc4 = LightupHelper.CreateMethodAccessor<AddMembersDelegate4>(WrappedType, nameof(AddMembers));
            AddModifiersFunc5 = LightupHelper.CreateMethodAccessor<AddModifiersDelegate5>(WrappedType, nameof(AddModifiers));
            AddParameterListParametersFunc6 = LightupHelper.CreateMethodAccessor<AddParameterListParametersDelegate6>(WrappedType, nameof(AddParameterListParameters));
            AddTypeParameterListParametersFunc7 = LightupHelper.CreateMethodAccessor<AddTypeParameterListParametersDelegate7>(WrappedType, nameof(AddTypeParameterListParameters));
            UpdateFunc8 = LightupHelper.CreateMethodAccessor<UpdateDelegate8>(WrappedType, nameof(Update));
            UpdateFunc9 = LightupHelper.CreateMethodAccessor<UpdateDelegate9>(WrappedType, nameof(Update));
            WithAttributeListsFunc10 = LightupHelper.CreateMethodAccessor<WithAttributeListsDelegate10>(WrappedType, nameof(WithAttributeLists));
            WithBaseListFunc11 = LightupHelper.CreateMethodAccessor<WithBaseListDelegate11>(WrappedType, nameof(WithBaseList));
            WithClassOrStructKeywordFunc12 = LightupHelper.CreateMethodAccessor<WithClassOrStructKeywordDelegate12>(WrappedType, nameof(WithClassOrStructKeyword));
            WithCloseBraceTokenFunc13 = LightupHelper.CreateMethodAccessor<WithCloseBraceTokenDelegate13>(WrappedType, nameof(WithCloseBraceToken));
            WithConstraintClausesFunc14 = LightupHelper.CreateMethodAccessor<WithConstraintClausesDelegate14>(WrappedType, nameof(WithConstraintClauses));
            WithIdentifierFunc15 = LightupHelper.CreateMethodAccessor<WithIdentifierDelegate15>(WrappedType, nameof(WithIdentifier));
            WithKeywordFunc16 = LightupHelper.CreateMethodAccessor<WithKeywordDelegate16>(WrappedType, nameof(WithKeyword));
            WithMembersFunc17 = LightupHelper.CreateMethodAccessor<WithMembersDelegate17>(WrappedType, nameof(WithMembers));
            WithModifiersFunc18 = LightupHelper.CreateMethodAccessor<WithModifiersDelegate18>(WrappedType, nameof(WithModifiers));
            WithOpenBraceTokenFunc19 = LightupHelper.CreateMethodAccessor<WithOpenBraceTokenDelegate19>(WrappedType, nameof(WithOpenBraceToken));
            WithParameterListFunc20 = LightupHelper.CreateMethodAccessor<WithParameterListDelegate20>(WrappedType, nameof(WithParameterList));
            WithSemicolonTokenFunc21 = LightupHelper.CreateMethodAccessor<WithSemicolonTokenDelegate21>(WrappedType, nameof(WithSemicolonToken));
            WithTypeParameterListFunc22 = LightupHelper.CreateMethodAccessor<WithTypeParameterListDelegate22>(WrappedType, nameof(WithTypeParameterList));
        }

        private RecordDeclarationSyntaxWrapper(TypeDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
        {
            get => AttributeListsGetterFunc(wrappedObject);
        }

        public readonly BaseListSyntax? BaseList
        {
            get => BaseListGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken ClassOrStructKeyword
        {
            get => ClassOrStructKeywordGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken CloseBraceToken
        {
            get => CloseBraceTokenGetterFunc(wrappedObject);
        }

        public readonly SyntaxList<TypeParameterConstraintClauseSyntax> ConstraintClauses
        {
            get => ConstraintClausesGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken Identifier
        {
            get => IdentifierGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken Keyword
        {
            get => KeywordGetterFunc(wrappedObject);
        }

        public readonly SyntaxList<MemberDeclarationSyntax> Members
        {
            get => MembersGetterFunc(wrappedObject);
        }

        public readonly SyntaxTokenList Modifiers
        {
            get => ModifiersGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken OpenBraceToken
        {
            get => OpenBraceTokenGetterFunc(wrappedObject);
        }

        public readonly ParameterListSyntax? ParameterList
        {
            get => ParameterListGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken SemicolonToken
        {
            get => SemicolonTokenGetterFunc(wrappedObject);
        }

        public readonly TypeParameterListSyntax? TypeParameterList
        {
            get => TypeParameterListGetterFunc(wrappedObject);
        }

        public static implicit operator TypeDeclarationSyntax?(RecordDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static RecordDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<TypeDeclarationSyntax>(obj, WrappedType);
            return new RecordDeclarationSyntaxWrapper(obj2);
        }

        public TypeDeclarationSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly RecordDeclarationSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddBaseListTypes(params BaseTypeSyntax[] items)
            => AddBaseListTypesFunc2(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddConstraintClauses(params TypeParameterConstraintClauseSyntax[] items)
            => AddConstraintClausesFunc3(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddMembers(params MemberDeclarationSyntax[] items)
            => AddMembersFunc4(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc5(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddParameterListParameters(params ParameterSyntax[] items)
            => AddParameterListParametersFunc6(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper AddTypeParameterListParameters(params TypeParameterSyntax[] items)
            => AddTypeParameterListParametersFunc7(wrappedObject, items);

        public readonly RecordDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc8(wrappedObject, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken classOrStructKeyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc9(wrappedObject, attributeLists, modifiers, keyword, classOrStructKeyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc10(wrappedObject, attributeLists);

        public readonly RecordDeclarationSyntaxWrapper WithBaseList(BaseListSyntax? baseList)
            => WithBaseListFunc11(wrappedObject, baseList);

        public readonly RecordDeclarationSyntaxWrapper WithClassOrStructKeyword(SyntaxToken classOrStructKeyword)
            => WithClassOrStructKeywordFunc12(wrappedObject, classOrStructKeyword);

        public readonly RecordDeclarationSyntaxWrapper WithCloseBraceToken(SyntaxToken closeBraceToken)
            => WithCloseBraceTokenFunc13(wrappedObject, closeBraceToken);

        public readonly RecordDeclarationSyntaxWrapper WithConstraintClauses(SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses)
            => WithConstraintClausesFunc14(wrappedObject, constraintClauses);

        public readonly RecordDeclarationSyntaxWrapper WithIdentifier(SyntaxToken identifier)
            => WithIdentifierFunc15(wrappedObject, identifier);

        public readonly RecordDeclarationSyntaxWrapper WithKeyword(SyntaxToken keyword)
            => WithKeywordFunc16(wrappedObject, keyword);

        public readonly RecordDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc17(wrappedObject, members);

        public readonly RecordDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc18(wrappedObject, modifiers);

        public readonly RecordDeclarationSyntaxWrapper WithOpenBraceToken(SyntaxToken openBraceToken)
            => WithOpenBraceTokenFunc19(wrappedObject, openBraceToken);

        public readonly RecordDeclarationSyntaxWrapper WithParameterList(ParameterListSyntax? parameterList)
            => WithParameterListFunc20(wrappedObject, parameterList);

        public readonly RecordDeclarationSyntaxWrapper WithSemicolonToken(SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc21(wrappedObject, semicolonToken);

        public readonly RecordDeclarationSyntaxWrapper WithTypeParameterList(TypeParameterListSyntax? typeParameterList)
            => WithTypeParameterListFunc22(wrappedObject, typeParameterList);
    }
}
