// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.</summary>
    public static class ForStatementSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax";

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(ForStatementSyntax? _obj);

        private delegate ForStatementSyntax AddAttributeListsDelegate0(ForStatementSyntax? _obj, params AttributeListSyntax[] items);
        private delegate ForStatementSyntax UpdateDelegate1(ForStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, SyntaxToken firstSemicolonToken, ExpressionSyntax? condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExpressionSyntax> incrementors, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate ForStatementSyntax WithAttributeListsDelegate2(ForStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithAttributeListsDelegate2 WithAttributeListsFunc2;

        static ForStatementSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(wrappedType, nameof(AttributeLists));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(wrappedType, "AddAttributeLists", "AttributeListSyntax[]");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, "Update", "SyntaxList`1", "SyntaxToken", "SyntaxToken", "VariableDeclarationSyntax", "SeparatedSyntaxList`1", "SyntaxToken", "ExpressionSyntax", "SyntaxToken", "SeparatedSyntaxList`1", "SyntaxToken", "StatementSyntax");
            WithAttributeListsFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate2>(wrappedType, "WithAttributeLists", "SyntaxList`1");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this ForStatementSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForStatementSyntax AddAttributeLists(this ForStatementSyntax _obj, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForStatementSyntax Update(this ForStatementSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, SyntaxToken firstSemicolonToken, ExpressionSyntax? condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExpressionSyntax> incrementors, SyntaxToken closeParenToken, StatementSyntax statement)
            => UpdateFunc1(_obj, attributeLists, forKeyword, openParenToken, declaration, initializers, firstSemicolonToken, condition, secondSemicolonToken, incrementors, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForStatementSyntax WithAttributeLists(this ForStatementSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc2(_obj, attributeLists);
    }
}
