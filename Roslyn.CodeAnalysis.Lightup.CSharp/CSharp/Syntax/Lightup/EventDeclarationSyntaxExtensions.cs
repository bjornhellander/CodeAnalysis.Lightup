// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class EventDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken SemicolonTokenGetterDelegate(EventDeclarationSyntax? _obj);

        private delegate EventDeclarationSyntax UpdateDelegate0(EventDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, SyntaxToken semicolonToken);
        private delegate EventDeclarationSyntax UpdateDelegate1(EventDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax? accessorList, SyntaxToken semicolonToken);
        private delegate EventDeclarationSyntax WithSemicolonTokenDelegate2(EventDeclarationSyntax? _obj, SyntaxToken semicolonToken);

        private static readonly SemicolonTokenGetterDelegate SemicolonTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithSemicolonTokenDelegate2 WithSemicolonTokenFunc2;

        static EventDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            SemicolonTokenGetterFunc = LightupHelper.CreateGetAccessor<SemicolonTokenGetterDelegate>(WrappedType, nameof(SemicolonToken));

            UpdateFunc0 = LightupHelper.CreateMethodAccessor<UpdateDelegate0>(WrappedType, nameof(Update));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithSemicolonTokenFunc2 = LightupHelper.CreateMethodAccessor<WithSemicolonTokenDelegate2>(WrappedType, nameof(WithSemicolonToken));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxToken SemicolonToken(this EventDeclarationSyntax _obj)
            => SemicolonTokenGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EventDeclarationSyntax Update(this EventDeclarationSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, SyntaxToken semicolonToken)
            => UpdateFunc0(wrappedObject, attributeLists, modifiers, eventKeyword, type, explicitInterfaceSpecifier, identifier, semicolonToken);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EventDeclarationSyntax Update(this EventDeclarationSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax? accessorList, SyntaxToken semicolonToken)
            => UpdateFunc1(wrappedObject, attributeLists, modifiers, eventKeyword, type, explicitInterfaceSpecifier, identifier, accessorList, semicolonToken);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EventDeclarationSyntax WithSemicolonToken(this EventDeclarationSyntax wrappedObject, SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc2(wrappedObject, semicolonToken);
    }
}
