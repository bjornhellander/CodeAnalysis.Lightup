// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Added in Roslyn version 4.8.0.0</summary>
    public readonly struct SpreadElementSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SpreadElementSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax> ExpressionFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> OperatorTokenFunc;

        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, ExpressionSyntax, SpreadElementSyntaxWrapper> UpdateFunc1;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, SpreadElementSyntaxWrapper> WithExpressionFunc2;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, SpreadElementSyntaxWrapper> WithOperatorTokenFunc3;

        private readonly CSharpSyntaxNode? wrappedObject;

        static SpreadElementSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, ExpressionSyntax>(WrappedType, nameof(Expression));
            OperatorTokenFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(OperatorToken));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, ExpressionSyntax, SpreadElementSyntaxWrapper>(WrappedType, nameof(Update));
            WithExpressionFunc2 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, ExpressionSyntax, SpreadElementSyntaxWrapper>(WrappedType, nameof(WithExpression));
            WithOperatorTokenFunc3 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, SpreadElementSyntaxWrapper>(WrappedType, nameof(WithOperatorToken));
        }

        private SpreadElementSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly ExpressionSyntax Expression
            => ExpressionFunc(wrappedObject);

        public readonly SyntaxToken OperatorToken
            => OperatorTokenFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(SpreadElementSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SpreadElementSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new SpreadElementSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly SpreadElementSyntaxWrapper Update(SyntaxToken operatorToken, ExpressionSyntax expression)
            => UpdateFunc1(wrappedObject, operatorToken, expression);

        public readonly SpreadElementSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc2(wrappedObject, expression);

        public readonly SpreadElementSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc3(wrappedObject, operatorToken);
    }
}
