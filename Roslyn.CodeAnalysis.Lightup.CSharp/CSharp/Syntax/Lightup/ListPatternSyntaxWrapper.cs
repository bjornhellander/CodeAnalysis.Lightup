// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.4.0.0</summary>
    public readonly struct ListPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken CloseBracketTokenGetterDelegate(PatternSyntax? _obj);
        private delegate VariableDesignationSyntax? DesignationGetterDelegate(PatternSyntax? _obj);
        private delegate SyntaxToken OpenBracketTokenGetterDelegate(PatternSyntax? _obj);
        private delegate SeparatedSyntaxList<PatternSyntax> PatternsGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate ListPatternSyntaxWrapper AddPatternsDelegate1(PatternSyntax? _obj, params PatternSyntax[] items);
        private delegate ListPatternSyntaxWrapper UpdateDelegate2(PatternSyntax? _obj, SyntaxToken openBracketToken, SeparatedSyntaxList<PatternSyntax> patterns, SyntaxToken closeBracketToken, VariableDesignationSyntax? designation);
        private delegate ListPatternSyntaxWrapper WithCloseBracketTokenDelegate3(PatternSyntax? _obj, SyntaxToken closeBracketToken);
        private delegate ListPatternSyntaxWrapper WithDesignationDelegate4(PatternSyntax? _obj, VariableDesignationSyntax? designation);
        private delegate ListPatternSyntaxWrapper WithOpenBracketTokenDelegate5(PatternSyntax? _obj, SyntaxToken openBracketToken);
        private delegate ListPatternSyntaxWrapper WithPatternsDelegate6(PatternSyntax? _obj, SeparatedSyntaxList<PatternSyntax> patterns);

        private static readonly CloseBracketTokenGetterDelegate CloseBracketTokenGetterFunc;
        private static readonly DesignationGetterDelegate DesignationGetterFunc;
        private static readonly OpenBracketTokenGetterDelegate OpenBracketTokenGetterFunc;
        private static readonly PatternsGetterDelegate PatternsGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddPatternsDelegate1 AddPatternsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCloseBracketTokenDelegate3 WithCloseBracketTokenFunc3;
        private static readonly WithDesignationDelegate4 WithDesignationFunc4;
        private static readonly WithOpenBracketTokenDelegate5 WithOpenBracketTokenFunc5;
        private static readonly WithPatternsDelegate6 WithPatternsFunc6;

        private readonly PatternSyntax? wrappedObject;

        static ListPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloseBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseBracketTokenGetterDelegate>(WrappedType, nameof(CloseBracketToken));
            DesignationGetterFunc = LightupHelper.CreateInstanceGetAccessor<DesignationGetterDelegate>(WrappedType, nameof(Designation));
            OpenBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenBracketTokenGetterDelegate>(WrappedType, nameof(OpenBracketToken));
            PatternsGetterFunc = LightupHelper.CreateInstanceGetAccessor<PatternsGetterDelegate>(WrappedType, nameof(Patterns));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddPatternsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddPatternsDelegate1>(WrappedType, nameof(AddPatterns));
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithCloseBracketTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithCloseBracketTokenDelegate3>(WrappedType, nameof(WithCloseBracketToken));
            WithDesignationFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithDesignationDelegate4>(WrappedType, nameof(WithDesignation));
            WithOpenBracketTokenFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithOpenBracketTokenDelegate5>(WrappedType, nameof(WithOpenBracketToken));
            WithPatternsFunc6 = LightupHelper.CreateInstanceMethodAccessor<WithPatternsDelegate6>(WrappedType, nameof(WithPatterns));
        }

        private ListPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly SyntaxToken CloseBracketToken
        {
            get => CloseBracketTokenGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly VariableDesignationSyntax? Designation
        {
            get => DesignationGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly SyntaxToken OpenBracketToken
        {
            get => OpenBracketTokenGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly SeparatedSyntaxList<PatternSyntax> Patterns
        {
            get => PatternsGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(ListPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ListPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new ListPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper AddPatterns(params PatternSyntax[] items)
            => AddPatternsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxList<PatternSyntax> patterns, SyntaxToken closeBracketToken, VariableDesignationSyntax? designation)
            => UpdateFunc2(wrappedObject, openBracketToken, patterns, closeBracketToken, designation);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc3(wrappedObject, closeBracketToken);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper WithDesignation(VariableDesignationSyntax? designation)
            => WithDesignationFunc4(wrappedObject, designation);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly ListPatternSyntaxWrapper WithPatterns(SeparatedSyntaxList<PatternSyntax> patterns)
            => WithPatternsFunc6(wrappedObject, patterns);
    }
}
