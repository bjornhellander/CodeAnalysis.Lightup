// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct ListPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax";

        private static readonly Type? WrappedType;
        private static readonly Func<PatternSyntax?, SyntaxToken> CloseBracketTokenFunc;
        private static readonly Func<PatternSyntax?, VariableDesignationSyntax?> DesignationFunc;
        private static readonly Func<PatternSyntax?, SyntaxToken> OpenBracketTokenFunc;
        private static readonly Func<PatternSyntax?, SeparatedSyntaxList<PatternSyntax>> PatternsFunc;
        private static readonly Action<PatternSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<PatternSyntax?, PatternSyntax[], ListPatternSyntaxWrapper> AddPatternsFunc1;
        private static readonly Func<PatternSyntax?, SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax?, ListPatternSyntaxWrapper> UpdateFunc2;
        private static readonly Func<PatternSyntax?, SyntaxToken, ListPatternSyntaxWrapper> WithCloseBracketTokenFunc3;
        private static readonly Func<PatternSyntax?, VariableDesignationSyntax?, ListPatternSyntaxWrapper> WithDesignationFunc4;
        private static readonly Func<PatternSyntax?, SyntaxToken, ListPatternSyntaxWrapper> WithOpenBracketTokenFunc5;
        private static readonly Func<PatternSyntax?, SeparatedSyntaxList<PatternSyntax>, ListPatternSyntaxWrapper> WithPatternsFunc6;

        private readonly PatternSyntax? WrappedObject;

        static ListPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);
            CloseBracketTokenFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(CloseBracketToken));
            DesignationFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, VariableDesignationSyntax?>(WrappedType, nameof(Designation));
            OpenBracketTokenFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(OpenBracketToken));
            PatternsFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, SeparatedSyntaxList<PatternSyntax>>(WrappedType, nameof(Patterns));
            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddPatternsFunc1 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, PatternSyntax[], ListPatternSyntaxWrapper>(WrappedType, nameof(AddPatterns));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax?, ListPatternSyntaxWrapper>(WrappedType, nameof(Update));
            WithCloseBracketTokenFunc3 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, SyntaxToken, ListPatternSyntaxWrapper>(WrappedType, nameof(WithCloseBracketToken));
            WithDesignationFunc4 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, VariableDesignationSyntax?, ListPatternSyntaxWrapper>(WrappedType, nameof(WithDesignation));
            WithOpenBracketTokenFunc5 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, SyntaxToken, ListPatternSyntaxWrapper>(WrappedType, nameof(WithOpenBracketToken));
            WithPatternsFunc6 = LightupHelper.CreateMethodAccessor<ListPatternSyntaxWrapper, PatternSyntax?, SeparatedSyntaxList<PatternSyntax>, ListPatternSyntaxWrapper>(WrappedType, nameof(WithPatterns));
        }

        private ListPatternSyntaxWrapper(PatternSyntax? obj)
        {
            WrappedObject = obj;
        }

        public readonly SyntaxToken CloseBracketToken
            => CloseBracketTokenFunc(WrappedObject);

        public readonly VariableDesignationSyntax? Designation
            => DesignationFunc(WrappedObject);

        public readonly SyntaxToken OpenBracketToken
            => OpenBracketTokenFunc(WrappedObject);

        public readonly SeparatedSyntaxList<PatternSyntax> Patterns
            => PatternsFunc(WrappedObject);

        public static implicit operator PatternSyntax?(ListPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ListPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new ListPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => WrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(WrappedObject, visitor);

        public readonly ListPatternSyntaxWrapper AddPatterns(PatternSyntax[] items)
            => AddPatternsFunc1(WrappedObject, items);

        public readonly ListPatternSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxList<PatternSyntax> patterns, SyntaxToken closeBracketToken, VariableDesignationSyntax? designation)
            => UpdateFunc2(WrappedObject, openBracketToken, patterns, closeBracketToken, designation);

        public readonly ListPatternSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc3(WrappedObject, closeBracketToken);

        public readonly ListPatternSyntaxWrapper WithDesignation(VariableDesignationSyntax? designation)
            => WithDesignationFunc4(WrappedObject, designation);

        public readonly ListPatternSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(WrappedObject, openBracketToken);

        public readonly ListPatternSyntaxWrapper WithPatterns(SeparatedSyntaxList<PatternSyntax> patterns)
            => WithPatternsFunc6(WrappedObject, patterns);
    }
}
