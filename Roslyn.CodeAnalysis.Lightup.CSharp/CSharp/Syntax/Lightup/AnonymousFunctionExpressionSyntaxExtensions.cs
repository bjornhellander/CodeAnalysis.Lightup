// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.</summary>
    public static class AnonymousFunctionExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax";

        private delegate BlockSyntax? BlockGetterDelegate(AnonymousFunctionExpressionSyntax? _obj);
        private delegate ExpressionSyntax? ExpressionBodyGetterDelegate(AnonymousFunctionExpressionSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(AnonymousFunctionExpressionSyntax? _obj);

        private delegate AnonymousFunctionExpressionSyntax AddBlockAttributeListsDelegate0(AnonymousFunctionExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate AnonymousFunctionExpressionSyntax AddBlockStatementsDelegate1(AnonymousFunctionExpressionSyntax? _obj, params StatementSyntax[] items);
        private delegate AnonymousFunctionExpressionSyntax AddModifiersDelegate2(AnonymousFunctionExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate AnonymousFunctionExpressionSyntax WithBlockDelegate3(AnonymousFunctionExpressionSyntax? _obj, BlockSyntax? block);
        private delegate AnonymousFunctionExpressionSyntax WithExpressionBodyDelegate4(AnonymousFunctionExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate AnonymousFunctionExpressionSyntax WithModifiersDelegate5(AnonymousFunctionExpressionSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly BlockGetterDelegate BlockGetterFunc;
        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddBlockAttributeListsDelegate0 AddBlockAttributeListsFunc0;
        private static readonly AddBlockStatementsDelegate1 AddBlockStatementsFunc1;
        private static readonly AddModifiersDelegate2 AddModifiersFunc2;
        private static readonly WithBlockDelegate3 WithBlockFunc3;
        private static readonly WithExpressionBodyDelegate4 WithExpressionBodyFunc4;
        private static readonly WithModifiersDelegate5 WithModifiersFunc5;

        static AnonymousFunctionExpressionSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            BlockGetterFunc = LightupHelper.CreateInstanceGetAccessor<BlockGetterDelegate>(wrappedType, nameof(Block));
            ExpressionBodyGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionBodyGetterDelegate>(wrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(wrappedType, nameof(Modifiers));

            AddBlockAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate0>(wrappedType, "AddBlockAttributeLists", "AttributeListSyntax[]");
            AddBlockStatementsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddBlockStatementsDelegate1>(wrappedType, "AddBlockStatements", "StatementSyntax[]");
            AddModifiersFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate2>(wrappedType, "AddModifiers", "SyntaxToken[]");
            WithBlockFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithBlockDelegate3>(wrappedType, "WithBlock", "BlockSyntax");
            WithExpressionBodyFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate4>(wrappedType, "WithExpressionBody", "ExpressionSyntax");
            WithModifiersFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate5>(wrappedType, "WithModifiers", "SyntaxTokenList");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static BlockSyntax? Block(this AnonymousFunctionExpressionSyntax _obj)
            => BlockGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static ExpressionSyntax? ExpressionBody(this AnonymousFunctionExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static SyntaxTokenList Modifiers(this AnonymousFunctionExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax AddBlockAttributeLists(this AnonymousFunctionExpressionSyntax _obj, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax AddBlockStatements(this AnonymousFunctionExpressionSyntax _obj, params StatementSyntax[] items)
            => AddBlockStatementsFunc1(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax AddModifiers(this AnonymousFunctionExpressionSyntax _obj, params SyntaxToken[] items)
            => AddModifiersFunc2(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax WithBlock(this AnonymousFunctionExpressionSyntax _obj, BlockSyntax? block)
            => WithBlockFunc3(_obj, block);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax WithExpressionBody(this AnonymousFunctionExpressionSyntax _obj, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc4(_obj, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousFunctionExpressionSyntax WithModifiers(this AnonymousFunctionExpressionSyntax _obj, SyntaxTokenList modifiers)
            => WithModifiersFunc5(_obj, modifiers);
    }
}
