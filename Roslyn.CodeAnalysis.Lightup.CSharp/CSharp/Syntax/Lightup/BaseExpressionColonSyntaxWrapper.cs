// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionColonSyntax. Added in version 4.0.0.0.</summary>
    public readonly struct BaseExpressionColonSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionColonSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken ColonTokenGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate ExpressionSyntax ExpressionGetterDelegate(CSharpSyntaxNode? _obj);

        private delegate BaseExpressionColonSyntaxWrapper WithColonTokenDelegate0(CSharpSyntaxNode? _obj, SyntaxToken colonToken);
        private delegate BaseExpressionColonSyntaxWrapper WithExpressionDelegate1(CSharpSyntaxNode? _obj, ExpressionSyntax expression);

        private static readonly ColonTokenGetterDelegate ColonTokenGetterFunc;
        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;

        private static readonly WithColonTokenDelegate0 WithColonTokenFunc0;
        private static readonly WithExpressionDelegate1 WithExpressionFunc1;

        private readonly CSharpSyntaxNode? wrappedObject;

        static BaseExpressionColonSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ColonTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<ColonTokenGetterDelegate>(WrappedType, nameof(ColonToken));
            ExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));

            WithColonTokenFunc0 = LightupHelper.CreateInstanceMethodAccessor<WithColonTokenDelegate0>(WrappedType, "WithColonToken", "SyntaxToken");
            WithExpressionFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionDelegate1>(WrappedType, "WithExpression", "ExpressionSyntax");
        }

        private BaseExpressionColonSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly SyntaxToken ColonToken
        {
            get => ColonTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly ExpressionSyntax Expression
        {
            get => ExpressionGetterFunc(wrappedObject);
        }

        public static implicit operator CSharpSyntaxNode?(BaseExpressionColonSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BaseExpressionColonSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new BaseExpressionColonSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly BaseExpressionColonSyntaxWrapper WithColonToken(SyntaxToken colonToken)
            => WithColonTokenFunc0(wrappedObject, colonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly BaseExpressionColonSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc1(wrappedObject, expression);
    }
}
