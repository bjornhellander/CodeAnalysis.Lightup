// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct BaseExpressionColonSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionColonSyntax";

        public static readonly Type? WrappedType;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> ColonTokenFunc;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax> ExpressionFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, BaseExpressionColonSyntaxWrapper> WithColonTokenFunc0;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, BaseExpressionColonSyntaxWrapper> WithExpressionFunc1;

        private readonly CSharpSyntaxNode? wrappedObject;

        static BaseExpressionColonSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);
            ColonTokenFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(ColonToken));
            ExpressionFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, ExpressionSyntax>(WrappedType, nameof(Expression));
            WithColonTokenFunc0 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken, BaseExpressionColonSyntaxWrapper>(WrappedType, nameof(WithColonToken));
            WithExpressionFunc1 = LightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, ExpressionSyntax, BaseExpressionColonSyntaxWrapper>(WrappedType, nameof(WithExpression));
        }

        private BaseExpressionColonSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken ColonToken
            => ColonTokenFunc(wrappedObject);

        public readonly ExpressionSyntax Expression
            => ExpressionFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(BaseExpressionColonSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BaseExpressionColonSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new BaseExpressionColonSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly BaseExpressionColonSyntaxWrapper WithColonToken(SyntaxToken colonToken)
            => WithColonTokenFunc0(wrappedObject, colonToken);

        public readonly BaseExpressionColonSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc1(wrappedObject, expression);
    }
}
