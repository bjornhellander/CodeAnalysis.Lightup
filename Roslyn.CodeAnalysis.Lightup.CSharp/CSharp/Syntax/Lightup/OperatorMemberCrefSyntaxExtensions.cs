// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.</summary>
    public static class OperatorMemberCrefSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax";

        private delegate Microsoft.CodeAnalysis.SyntaxToken CheckedKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax UpdateDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken checkedKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax? parameters);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax WithCheckedKeywordDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken checkedKeyword);

        private static readonly CheckedKeywordGetterDelegate CheckedKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithCheckedKeywordDelegate1 WithCheckedKeywordFunc1;

        static OperatorMemberCrefSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CheckedKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<CheckedKeywordGetterDelegate>(wrappedType, nameof(CheckedKeyword));

            UpdateFunc0 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "operatorKeywordSyntaxToken", "checkedKeywordSyntaxToken", "operatorTokenSyntaxToken", "parametersCrefParameterListSyntax");
            WithCheckedKeywordFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithCheckedKeywordDelegate1>(wrappedType, "WithCheckedKeyword", "checkedKeywordSyntaxToken");
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxToken CheckedKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax _obj)
            => CheckedKeywordGetterFunc(_obj);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken checkedKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax? parameters)
            => UpdateFunc0(_obj, operatorKeyword, checkedKeyword, operatorToken, parameters);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax WithCheckedKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken checkedKeyword)
            => WithCheckedKeywordFunc1(_obj, checkedKeyword);
    }
}
