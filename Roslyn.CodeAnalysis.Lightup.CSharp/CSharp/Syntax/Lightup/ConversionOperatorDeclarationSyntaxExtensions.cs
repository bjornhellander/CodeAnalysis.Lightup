// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class ConversionOperatorDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken CheckedKeywordGetterDelegate(ConversionOperatorDeclarationSyntax? _obj);
        private delegate ExplicitInterfaceSpecifierSyntax? ExplicitInterfaceSpecifierGetterDelegate(ConversionOperatorDeclarationSyntax? _obj);

        private delegate ConversionOperatorDeclarationSyntax AddBodyAttributeListsDelegate0(ConversionOperatorDeclarationSyntax? _obj, params AttributeListSyntax[] items);
        private delegate ConversionOperatorDeclarationSyntax UpdateDelegate1(ConversionOperatorDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate ConversionOperatorDeclarationSyntax UpdateDelegate2(ConversionOperatorDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate ConversionOperatorDeclarationSyntax WithCheckedKeywordDelegate3(ConversionOperatorDeclarationSyntax? _obj, SyntaxToken checkedKeyword);
        private delegate ConversionOperatorDeclarationSyntax WithExplicitInterfaceSpecifierDelegate4(ConversionOperatorDeclarationSyntax? _obj, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier);

        private static readonly CheckedKeywordGetterDelegate CheckedKeywordGetterFunc;
        private static readonly ExplicitInterfaceSpecifierGetterDelegate ExplicitInterfaceSpecifierGetterFunc;

        private static readonly AddBodyAttributeListsDelegate0 AddBodyAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCheckedKeywordDelegate3 WithCheckedKeywordFunc3;
        private static readonly WithExplicitInterfaceSpecifierDelegate4 WithExplicitInterfaceSpecifierFunc4;

        static ConversionOperatorDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CheckedKeywordGetterFunc = LightupHelper.CreateGetAccessor<CheckedKeywordGetterDelegate>(WrappedType, nameof(CheckedKeyword));
            ExplicitInterfaceSpecifierGetterFunc = LightupHelper.CreateGetAccessor<ExplicitInterfaceSpecifierGetterDelegate>(WrappedType, nameof(ExplicitInterfaceSpecifier));

            AddBodyAttributeListsFunc0 = LightupHelper.CreateMethodAccessor<AddBodyAttributeListsDelegate0>(WrappedType, nameof(AddBodyAttributeLists));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithCheckedKeywordFunc3 = LightupHelper.CreateMethodAccessor<WithCheckedKeywordDelegate3>(WrappedType, nameof(WithCheckedKeyword));
            WithExplicitInterfaceSpecifierFunc4 = LightupHelper.CreateMethodAccessor<WithExplicitInterfaceSpecifierDelegate4>(WrappedType, nameof(WithExplicitInterfaceSpecifier));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static SyntaxToken CheckedKeyword(this ConversionOperatorDeclarationSyntax _obj)
            => CheckedKeywordGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ExplicitInterfaceSpecifierSyntax? ExplicitInterfaceSpecifier(this ConversionOperatorDeclarationSyntax _obj)
            => ExplicitInterfaceSpecifierGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ConversionOperatorDeclarationSyntax AddBodyAttributeLists(this ConversionOperatorDeclarationSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddBodyAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ConversionOperatorDeclarationSyntax Update(this ConversionOperatorDeclarationSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => UpdateFunc1(wrappedObject, attributeLists, modifiers, implicitOrExplicitKeyword, explicitInterfaceSpecifier, operatorKeyword, type, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ConversionOperatorDeclarationSyntax Update(this ConversionOperatorDeclarationSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => UpdateFunc2(wrappedObject, attributeLists, modifiers, implicitOrExplicitKeyword, explicitInterfaceSpecifier, operatorKeyword, checkedKeyword, type, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ConversionOperatorDeclarationSyntax WithCheckedKeyword(this ConversionOperatorDeclarationSyntax wrappedObject, SyntaxToken checkedKeyword)
            => WithCheckedKeywordFunc3(wrappedObject, checkedKeyword);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ConversionOperatorDeclarationSyntax WithExplicitInterfaceSpecifier(this ConversionOperatorDeclarationSyntax wrappedObject, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier)
            => WithExplicitInterfaceSpecifierFunc4(wrappedObject, explicitInterfaceSpecifier);
    }
}
