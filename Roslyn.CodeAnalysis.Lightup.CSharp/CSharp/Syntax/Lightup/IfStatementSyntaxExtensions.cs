// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class IfStatementSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(IfStatementSyntax? _obj);

        private delegate IfStatementSyntax AddAttributeListsDelegate0(IfStatementSyntax? _obj, params AttributeListSyntax[] items);
        private delegate IfStatementSyntax UpdateDelegate1(IfStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken ifKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement, ElseClauseSyntax? @else);
        private delegate IfStatementSyntax WithAttributeListsDelegate2(IfStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithAttributeListsDelegate2 WithAttributeListsFunc2;

        static IfStatementSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithAttributeListsFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate2>(WrappedType, nameof(WithAttributeLists));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this IfStatementSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IfStatementSyntax AddAttributeLists(this IfStatementSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IfStatementSyntax Update(this IfStatementSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken ifKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement, ElseClauseSyntax? @else)
            => UpdateFunc1(wrappedObject, attributeLists, ifKeyword, openParenToken, condition, closeParenToken, statement, @else);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IfStatementSyntax WithAttributeLists(this IfStatementSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc2(wrappedObject, attributeLists);
    }
}
