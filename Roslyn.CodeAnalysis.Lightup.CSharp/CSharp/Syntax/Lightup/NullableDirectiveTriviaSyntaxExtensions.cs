// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class NullableDirectiveTriviaSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken TargetTokenGetterDelegate(NullableDirectiveTriviaSyntax? _obj);

        private delegate NullableDirectiveTriviaSyntax UpdateDelegate0(NullableDirectiveTriviaSyntax? _obj, SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive);
        private delegate NullableDirectiveTriviaSyntax WithTargetTokenDelegate1(NullableDirectiveTriviaSyntax? _obj, SyntaxToken targetToken);

        private static readonly TargetTokenGetterDelegate TargetTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithTargetTokenDelegate1 WithTargetTokenFunc1;

        static NullableDirectiveTriviaSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            TargetTokenGetterFunc = LightupHelper.CreateGetAccessor<TargetTokenGetterDelegate>(WrappedType, nameof(TargetToken));

            UpdateFunc0 = LightupHelper.CreateMethodAccessor<UpdateDelegate0>(WrappedType, nameof(Update));
            WithTargetTokenFunc1 = LightupHelper.CreateMethodAccessor<WithTargetTokenDelegate1>(WrappedType, nameof(WithTargetToken));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxToken TargetToken(this NullableDirectiveTriviaSyntax _obj)
            => TargetTokenGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static NullableDirectiveTriviaSyntax Update(this NullableDirectiveTriviaSyntax wrappedObject, SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive)
            => UpdateFunc0(wrappedObject, hashToken, nullableKeyword, settingToken, targetToken, endOfDirectiveToken, isActive);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static NullableDirectiveTriviaSyntax WithTargetToken(this NullableDirectiveTriviaSyntax wrappedObject, SyntaxToken targetToken)
            => WithTargetTokenFunc1(wrappedObject, targetToken);
    }
}
