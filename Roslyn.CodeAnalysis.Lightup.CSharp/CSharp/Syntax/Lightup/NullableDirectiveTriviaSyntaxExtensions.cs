// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class NullableDirectiveTriviaSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax";

        private delegate SyntaxToken TargetTokenGetterDelegate(NullableDirectiveTriviaSyntax? _obj);

        private delegate NullableDirectiveTriviaSyntax UpdateDelegate0(NullableDirectiveTriviaSyntax? _obj, SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive);
        private delegate NullableDirectiveTriviaSyntax WithTargetTokenDelegate1(NullableDirectiveTriviaSyntax? _obj, SyntaxToken targetToken);

        private static readonly TargetTokenGetterDelegate TargetTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithTargetTokenDelegate1 WithTargetTokenFunc1;

        static NullableDirectiveTriviaSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            TargetTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<TargetTokenGetterDelegate>(wrappedType, nameof(TargetToken));

            UpdateFunc0 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, nameof(Update));
            WithTargetTokenFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithTargetTokenDelegate1>(wrappedType, nameof(WithTargetToken));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static SyntaxToken TargetToken(this NullableDirectiveTriviaSyntax _obj)
            => TargetTokenGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static NullableDirectiveTriviaSyntax Update(this NullableDirectiveTriviaSyntax _obj, SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive)
            => UpdateFunc0(_obj, hashToken, nullableKeyword, settingToken, targetToken, endOfDirectiveToken, isActive);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static NullableDirectiveTriviaSyntax WithTargetToken(this NullableDirectiveTriviaSyntax _obj, SyntaxToken targetToken)
            => WithTargetTokenFunc1(_obj, targetToken);
    }
}
