// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax.</summary>
    public static partial class NullableDirectiveTriviaSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax";

        private delegate Microsoft.CodeAnalysis.SyntaxToken TargetTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax UpdateDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken nullableKeyword, Microsoft.CodeAnalysis.SyntaxToken settingToken, Microsoft.CodeAnalysis.SyntaxToken targetToken, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, System.Boolean isActive);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax WithTargetTokenDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken targetToken);

        private static readonly TargetTokenGetterDelegate TargetTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithTargetTokenDelegate1 WithTargetTokenFunc1;

        static NullableDirectiveTriviaSyntaxExtensions()
        {
            var wrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            TargetTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<TargetTokenGetterDelegate>(wrappedType, nameof(TargetToken));

            UpdateFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "hashTokenSyntaxToken", "nullableKeywordSyntaxToken", "settingTokenSyntaxToken", "targetTokenSyntaxToken", "endOfDirectiveTokenSyntaxToken", "isActiveBoolean");
            WithTargetTokenFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithTargetTokenDelegate1>(wrappedType, "WithTargetToken", "targetTokenSyntaxToken");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxToken TargetToken(this Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax _obj)
            => TargetTokenGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken nullableKeyword, Microsoft.CodeAnalysis.SyntaxToken settingToken, Microsoft.CodeAnalysis.SyntaxToken targetToken, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, System.Boolean isActive)
            => UpdateFunc0(_obj, hashToken, nullableKeyword, settingToken, targetToken, endOfDirectiveToken, isActive);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax WithTargetToken(this Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken targetToken)
            => WithTargetTokenFunc1(_obj, targetToken);
    }
}
