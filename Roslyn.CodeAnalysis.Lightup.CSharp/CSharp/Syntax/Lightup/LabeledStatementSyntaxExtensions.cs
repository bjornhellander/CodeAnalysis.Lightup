// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class LabeledStatementSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(LabeledStatementSyntax? _obj);

        private delegate LabeledStatementSyntax AddAttributeListsDelegate0(LabeledStatementSyntax? _obj, params AttributeListSyntax[] items);
        private delegate LabeledStatementSyntax UpdateDelegate1(LabeledStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, SyntaxToken colonToken, StatementSyntax statement);
        private delegate LabeledStatementSyntax WithAttributeListsDelegate2(LabeledStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithAttributeListsDelegate2 WithAttributeListsFunc2;

        static LabeledStatementSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithAttributeListsFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate2>(WrappedType, nameof(WithAttributeLists));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this LabeledStatementSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LabeledStatementSyntax AddAttributeLists(this LabeledStatementSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LabeledStatementSyntax Update(this LabeledStatementSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, SyntaxToken colonToken, StatementSyntax statement)
            => UpdateFunc1(wrappedObject, attributeLists, identifier, colonToken, statement);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LabeledStatementSyntax WithAttributeLists(this LabeledStatementSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc2(wrappedObject, attributeLists);
    }
}
