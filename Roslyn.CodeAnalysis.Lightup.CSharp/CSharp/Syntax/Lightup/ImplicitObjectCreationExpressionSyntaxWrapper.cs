// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct ImplicitObjectCreationExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitObjectCreationExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate ArgumentListSyntax ArgumentListGetterDelegate(ExpressionSyntax? _obj);
        private delegate InitializerExpressionSyntax? InitializerGetterDelegate(ExpressionSyntax? _obj);
        private delegate SyntaxToken NewKeywordGetterDelegate(ExpressionSyntax? _obj);

        private delegate void AcceptDelegate0(ExpressionSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper AddArgumentListArgumentsDelegate1(ExpressionSyntax? _obj, params ArgumentSyntax[] items);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper UpdateDelegate2(ExpressionSyntax? _obj, SyntaxToken newKeyword, ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper WithArgumentListDelegate3(ExpressionSyntax? _obj, ArgumentListSyntax argumentList);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper WithInitializerDelegate4(ExpressionSyntax? _obj, InitializerExpressionSyntax? initializer);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper WithNewKeywordDelegate5(ExpressionSyntax? _obj, SyntaxToken newKeyword);

        private static readonly ArgumentListGetterDelegate ArgumentListGetterFunc;
        private static readonly InitializerGetterDelegate InitializerGetterFunc;
        private static readonly NewKeywordGetterDelegate NewKeywordGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddArgumentListArgumentsDelegate1 AddArgumentListArgumentsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithArgumentListDelegate3 WithArgumentListFunc3;
        private static readonly WithInitializerDelegate4 WithInitializerFunc4;
        private static readonly WithNewKeywordDelegate5 WithNewKeywordFunc5;

        private readonly ExpressionSyntax? wrappedObject;

        static ImplicitObjectCreationExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ArgumentListGetterDelegate>(WrappedType, nameof(ArgumentList));
            InitializerGetterFunc = LightupHelper.CreateInstanceGetAccessor<InitializerGetterDelegate>(WrappedType, nameof(Initializer));
            NewKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<NewKeywordGetterDelegate>(WrappedType, nameof(NewKeyword));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddArgumentListArgumentsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddArgumentListArgumentsDelegate1>(WrappedType, nameof(AddArgumentListArguments));
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithArgumentListFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithArgumentListDelegate3>(WrappedType, nameof(WithArgumentList));
            WithInitializerFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithInitializerDelegate4>(WrappedType, nameof(WithInitializer));
            WithNewKeywordFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithNewKeywordDelegate5>(WrappedType, nameof(WithNewKeyword));
        }

        private ImplicitObjectCreationExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ArgumentListSyntax ArgumentList
        {
            get => ArgumentListGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly InitializerExpressionSyntax? Initializer
        {
            get => InitializerGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SyntaxToken NewKeyword
        {
            get => NewKeywordGetterFunc(wrappedObject);
        }

        public static implicit operator ExpressionSyntax?(ImplicitObjectCreationExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ImplicitObjectCreationExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new ImplicitObjectCreationExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImplicitObjectCreationExpressionSyntaxWrapper AddArgumentListArguments(params ArgumentSyntax[] items)
            => AddArgumentListArgumentsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImplicitObjectCreationExpressionSyntaxWrapper Update(SyntaxToken newKeyword, ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer)
            => UpdateFunc2(wrappedObject, newKeyword, argumentList, initializer);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImplicitObjectCreationExpressionSyntaxWrapper WithArgumentList(ArgumentListSyntax argumentList)
            => WithArgumentListFunc3(wrappedObject, argumentList);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImplicitObjectCreationExpressionSyntaxWrapper WithInitializer(InitializerExpressionSyntax? initializer)
            => WithInitializerFunc4(wrappedObject, initializer);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImplicitObjectCreationExpressionSyntaxWrapper WithNewKeyword(SyntaxToken newKeyword)
            => WithNewKeywordFunc5(wrappedObject, newKeyword);
    }
}
