// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class EnumMemberDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxTokenList ModifiersGetterDelegate(EnumMemberDeclarationSyntax? _obj);

        private delegate EnumMemberDeclarationSyntax AddModifiersDelegate0(EnumMemberDeclarationSyntax? _obj, params SyntaxToken[] items);
        private delegate EnumMemberDeclarationSyntax UpdateDelegate1(EnumMemberDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, EqualsValueClauseSyntax? equalsValue);
        private delegate EnumMemberDeclarationSyntax WithModifiersDelegate2(EnumMemberDeclarationSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddModifiersDelegate0 AddModifiersFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithModifiersDelegate2 WithModifiersFunc2;

        static EnumMemberDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));

            AddModifiersFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate0>(WrappedType, nameof(AddModifiers));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithModifiersFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate2>(WrappedType, nameof(WithModifiers));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxTokenList Modifiers(this EnumMemberDeclarationSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EnumMemberDeclarationSyntax AddModifiers(this EnumMemberDeclarationSyntax wrappedObject, params SyntaxToken[] items)
            => AddModifiersFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EnumMemberDeclarationSyntax Update(this EnumMemberDeclarationSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, EqualsValueClauseSyntax? equalsValue)
            => UpdateFunc1(wrappedObject, attributeLists, modifiers, identifier, equalsValue);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static EnumMemberDeclarationSyntax WithModifiers(this EnumMemberDeclarationSyntax wrappedObject, SyntaxTokenList modifiers)
            => WithModifiersFunc2(wrappedObject, modifiers);
    }
}
