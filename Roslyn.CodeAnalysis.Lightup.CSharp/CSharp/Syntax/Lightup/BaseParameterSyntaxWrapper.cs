// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct BaseParameterSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxTokenList ModifiersDelegate(CSharpSyntaxNode? _obj);
        private delegate TypeSyntax? TypeDelegate(CSharpSyntaxNode? _obj);

        private delegate BaseParameterSyntaxWrapper AddAttributeListsDelegate0(CSharpSyntaxNode? _obj, params AttributeListSyntax[] items);
        private delegate BaseParameterSyntaxWrapper AddModifiersDelegate1(CSharpSyntaxNode? _obj, params SyntaxToken[] items);
        private delegate BaseParameterSyntaxWrapper WithAttributeListsDelegate2(CSharpSyntaxNode? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate BaseParameterSyntaxWrapper WithModifiersDelegate3(CSharpSyntaxNode? _obj, SyntaxTokenList modifiers);
        private delegate BaseParameterSyntaxWrapper WithTypeDelegate4(CSharpSyntaxNode? _obj, TypeSyntax? type);

        private static readonly AttributeListsDelegate AttributeListsFunc;
        private static readonly ModifiersDelegate ModifiersFunc;
        private static readonly TypeDelegate TypeFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddModifiersDelegate1 AddModifiersFunc1;
        private static readonly WithAttributeListsDelegate2 WithAttributeListsFunc2;
        private static readonly WithModifiersDelegate3 WithModifiersFunc3;
        private static readonly WithTypeDelegate4 WithTypeFunc4;

        private readonly CSharpSyntaxNode? wrappedObject;

        static BaseParameterSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsFunc = LightupHelper.CreateGetAccessor<AttributeListsDelegate>(WrappedType, nameof(AttributeLists));
            ModifiersFunc = LightupHelper.CreateGetAccessor<ModifiersDelegate>(WrappedType, nameof(Modifiers));
            TypeFunc = LightupHelper.CreateGetAccessor<TypeDelegate>(WrappedType, nameof(Type));

            AddAttributeListsFunc0 = LightupHelper.CreateMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            AddModifiersFunc1 = LightupHelper.CreateMethodAccessor<AddModifiersDelegate1>(WrappedType, nameof(AddModifiers));
            WithAttributeListsFunc2 = LightupHelper.CreateMethodAccessor<WithAttributeListsDelegate2>(WrappedType, nameof(WithAttributeLists));
            WithModifiersFunc3 = LightupHelper.CreateMethodAccessor<WithModifiersDelegate3>(WrappedType, nameof(WithModifiers));
            WithTypeFunc4 = LightupHelper.CreateMethodAccessor<WithTypeDelegate4>(WrappedType, nameof(WithType));
        }

        private BaseParameterSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
            => AttributeListsFunc(wrappedObject);

        public readonly SyntaxTokenList Modifiers
            => ModifiersFunc(wrappedObject);

        public readonly TypeSyntax? Type
            => TypeFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(BaseParameterSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BaseParameterSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new BaseParameterSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly BaseParameterSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        public readonly BaseParameterSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc1(wrappedObject, items);

        public readonly BaseParameterSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc2(wrappedObject, attributeLists);

        public readonly BaseParameterSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc3(wrappedObject, modifiers);

        public readonly BaseParameterSyntaxWrapper WithType(TypeSyntax? type)
            => WithTypeFunc4(wrappedObject, type);
    }
}
