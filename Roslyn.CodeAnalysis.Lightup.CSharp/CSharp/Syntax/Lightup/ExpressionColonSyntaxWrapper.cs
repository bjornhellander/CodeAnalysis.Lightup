// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct ExpressionColonSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionColonSyntax";

        private static readonly Type? WrappedType;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken> ColonTokenFunc;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax> ExpressionFunc;
        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, SyntaxToken, ExpressionColonSyntaxWrapper> UpdateFunc1;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken, ExpressionColonSyntaxWrapper> WithColonTokenFunc2;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, ExpressionColonSyntaxWrapper> WithExpressionFunc3;

        private readonly CSharpSyntaxNode? WrappedObject;

        static ExpressionColonSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);
            ColonTokenFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxToken>(WrappedType, nameof(ColonToken));
            ExpressionFunc = LightupHelper.CreateGetAccessor<CSharpSyntaxNode?, ExpressionSyntax>(WrappedType, nameof(Expression));
            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<ExpressionColonSyntaxWrapper, CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<ExpressionColonSyntaxWrapper, CSharpSyntaxNode?, ExpressionSyntax, SyntaxToken, ExpressionColonSyntaxWrapper>(WrappedType, nameof(Update));
            WithColonTokenFunc2 = LightupHelper.CreateMethodAccessor<ExpressionColonSyntaxWrapper, CSharpSyntaxNode?, SyntaxToken, ExpressionColonSyntaxWrapper>(WrappedType, nameof(WithColonToken));
            WithExpressionFunc3 = LightupHelper.CreateMethodAccessor<ExpressionColonSyntaxWrapper, CSharpSyntaxNode?, ExpressionSyntax, ExpressionColonSyntaxWrapper>(WrappedType, nameof(WithExpression));
        }

        private ExpressionColonSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            WrappedObject = obj;
        }

        public readonly SyntaxToken ColonToken
            => ColonTokenFunc(WrappedObject);

        public readonly ExpressionSyntax Expression
            => ExpressionFunc(WrappedObject);

        public static implicit operator CSharpSyntaxNode?(ExpressionColonSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ExpressionColonSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new ExpressionColonSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => WrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(WrappedObject, visitor);

        public readonly ExpressionColonSyntaxWrapper Update(ExpressionSyntax expression, SyntaxToken colonToken)
            => UpdateFunc1(WrappedObject, expression, colonToken);

        public readonly ExpressionColonSyntaxWrapper WithColonToken(SyntaxToken colonToken)
            => WithColonTokenFunc2(WrappedObject, colonToken);

        public readonly ExpressionColonSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc3(WrappedObject, expression);
    }
}
