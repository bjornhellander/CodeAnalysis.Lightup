// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct ExpressionColonSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionColonSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxToken ColonTokenGetterDelegate(CSharpSyntaxNode? _obj);
        private delegate ExpressionSyntax ExpressionGetterDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate ExpressionColonSyntaxWrapper UpdateDelegate1(CSharpSyntaxNode? _obj, ExpressionSyntax expression, SyntaxToken colonToken);
        private delegate ExpressionColonSyntaxWrapper WithColonTokenDelegate2(CSharpSyntaxNode? _obj, SyntaxToken colonToken);
        private delegate ExpressionColonSyntaxWrapper WithExpressionDelegate3(CSharpSyntaxNode? _obj, ExpressionSyntax expression);

        private static readonly ColonTokenGetterDelegate ColonTokenGetterFunc;
        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithColonTokenDelegate2 WithColonTokenFunc2;
        private static readonly WithExpressionDelegate3 WithExpressionFunc3;

        private readonly CSharpSyntaxNode? wrappedObject;

        static ExpressionColonSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ColonTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<ColonTokenGetterDelegate>(WrappedType, nameof(ColonToken));
            ExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithColonTokenFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithColonTokenDelegate2>(WrappedType, nameof(WithColonToken));
            WithExpressionFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionDelegate3>(WrappedType, nameof(WithExpression));
        }

        private ExpressionColonSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly SyntaxToken ColonToken
        {
            get => ColonTokenGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly ExpressionSyntax Expression
        {
            get => ExpressionGetterFunc(wrappedObject);
        }

        public static implicit operator CSharpSyntaxNode?(ExpressionColonSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ExpressionColonSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new ExpressionColonSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly ExpressionColonSyntaxWrapper Update(ExpressionSyntax expression, SyntaxToken colonToken)
            => UpdateFunc1(wrappedObject, expression, colonToken);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly ExpressionColonSyntaxWrapper WithColonToken(SyntaxToken colonToken)
            => WithColonTokenFunc2(wrappedObject, colonToken);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly ExpressionColonSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc3(wrappedObject, expression);
    }
}
