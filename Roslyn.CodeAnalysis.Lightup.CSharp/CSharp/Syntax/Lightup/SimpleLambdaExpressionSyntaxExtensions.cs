// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.</summary>
    public static class SimpleLambdaExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax";

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(SimpleLambdaExpressionSyntax? _obj);
        private delegate BlockSyntax? BlockGetterDelegate(SimpleLambdaExpressionSyntax? _obj);
        private delegate ExpressionSyntax? ExpressionBodyGetterDelegate(SimpleLambdaExpressionSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(SimpleLambdaExpressionSyntax? _obj);

        private delegate SimpleLambdaExpressionSyntax AddAttributeListsDelegate0(SimpleLambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate SimpleLambdaExpressionSyntax AddBlockAttributeListsDelegate1(SimpleLambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate SimpleLambdaExpressionSyntax AddBlockStatementsDelegate2(SimpleLambdaExpressionSyntax? _obj, params StatementSyntax[] items);
        private delegate SimpleLambdaExpressionSyntax AddModifiersDelegate3(SimpleLambdaExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate SimpleLambdaExpressionSyntax UpdateDelegate4(SimpleLambdaExpressionSyntax? _obj, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax UpdateDelegate5(SimpleLambdaExpressionSyntax? _obj, SyntaxToken asyncKeyword, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax UpdateDelegate6(SimpleLambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax WithAttributeListsDelegate7(SimpleLambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate SimpleLambdaExpressionSyntax WithBlockDelegate8(SimpleLambdaExpressionSyntax? _obj, BlockSyntax? block);
        private delegate SimpleLambdaExpressionSyntax WithExpressionBodyDelegate9(SimpleLambdaExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax WithModifiersDelegate10(SimpleLambdaExpressionSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;
        private static readonly BlockGetterDelegate BlockGetterFunc;
        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddBlockAttributeListsDelegate1 AddBlockAttributeListsFunc1;
        private static readonly AddBlockStatementsDelegate2 AddBlockStatementsFunc2;
        private static readonly AddModifiersDelegate3 AddModifiersFunc3;
        private static readonly UpdateDelegate4 UpdateFunc4;
        private static readonly UpdateDelegate5 UpdateFunc5;
        private static readonly UpdateDelegate6 UpdateFunc6;
        private static readonly WithAttributeListsDelegate7 WithAttributeListsFunc7;
        private static readonly WithBlockDelegate8 WithBlockFunc8;
        private static readonly WithExpressionBodyDelegate9 WithExpressionBodyFunc9;
        private static readonly WithModifiersDelegate10 WithModifiersFunc10;

        static SimpleLambdaExpressionSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(wrappedType, nameof(AttributeLists));
            BlockGetterFunc = LightupHelper.CreateInstanceGetAccessor<BlockGetterDelegate>(wrappedType, nameof(Block));
            ExpressionBodyGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionBodyGetterDelegate>(wrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(wrappedType, nameof(Modifiers));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(wrappedType, "AddAttributeLists", "AttributeListSyntax[]");
            AddBlockAttributeListsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate1>(wrappedType, "AddBlockAttributeLists", "AttributeListSyntax[]");
            AddBlockStatementsFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddBlockStatementsDelegate2>(wrappedType, "AddBlockStatements", "StatementSyntax[]");
            AddModifiersFunc3 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate3>(wrappedType, "AddModifiers", "SyntaxToken[]");
            UpdateFunc4 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate4>(wrappedType, "Update", "SyntaxTokenList", "ParameterSyntax", "SyntaxToken", "BlockSyntax", "ExpressionSyntax");
            UpdateFunc5 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate5>(wrappedType, "Update", "SyntaxToken", "ParameterSyntax", "SyntaxToken", "BlockSyntax", "ExpressionSyntax");
            UpdateFunc6 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate6>(wrappedType, "Update", "SyntaxList`1", "SyntaxTokenList", "ParameterSyntax", "SyntaxToken", "BlockSyntax", "ExpressionSyntax");
            WithAttributeListsFunc7 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate7>(wrappedType, "WithAttributeLists", "SyntaxList`1");
            WithBlockFunc8 = LightupHelper.CreateInstanceMethodAccessor<WithBlockDelegate8>(wrappedType, "WithBlock", "BlockSyntax");
            WithExpressionBodyFunc9 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate9>(wrappedType, "WithExpressionBody", "ExpressionSyntax");
            WithModifiersFunc10 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate10>(wrappedType, "WithModifiers", "SyntaxTokenList");
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this SimpleLambdaExpressionSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static BlockSyntax? Block(this SimpleLambdaExpressionSyntax _obj)
            => BlockGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static ExpressionSyntax? ExpressionBody(this SimpleLambdaExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static SyntaxTokenList Modifiers(this SimpleLambdaExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SimpleLambdaExpressionSyntax AddAttributeLists(this SimpleLambdaExpressionSyntax _obj, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax AddBlockAttributeLists(this SimpleLambdaExpressionSyntax _obj, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc1(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax AddBlockStatements(this SimpleLambdaExpressionSyntax _obj, params StatementSyntax[] items)
            => AddBlockStatementsFunc2(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax AddModifiers(this SimpleLambdaExpressionSyntax _obj, params SyntaxToken[] items)
            => AddModifiersFunc3(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax Update(this SimpleLambdaExpressionSyntax _obj, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc4(_obj, modifiers, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax Update(this SimpleLambdaExpressionSyntax _obj, SyntaxToken asyncKeyword, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc5(_obj, asyncKeyword, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SimpleLambdaExpressionSyntax Update(this SimpleLambdaExpressionSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc6(_obj, attributeLists, modifiers, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SimpleLambdaExpressionSyntax WithAttributeLists(this SimpleLambdaExpressionSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc7(_obj, attributeLists);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax WithBlock(this SimpleLambdaExpressionSyntax _obj, BlockSyntax? block)
            => WithBlockFunc8(_obj, block);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax WithExpressionBody(this SimpleLambdaExpressionSyntax _obj, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc9(_obj, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax WithModifiers(this SimpleLambdaExpressionSyntax _obj, SyntaxTokenList modifiers)
            => WithModifiersFunc10(_obj, modifiers);
    }
}
