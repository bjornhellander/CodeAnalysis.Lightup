// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class CrefParameterSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken ReadOnlyKeywordGetterDelegate(CrefParameterSyntax? _obj);

        private delegate CrefParameterSyntax UpdateDelegate0(CrefParameterSyntax? _obj, SyntaxToken refKindKeyword, SyntaxToken readOnlyKeyword, TypeSyntax type);
        private delegate CrefParameterSyntax WithReadOnlyKeywordDelegate1(CrefParameterSyntax? _obj, SyntaxToken readOnlyKeyword);

        private static readonly ReadOnlyKeywordGetterDelegate ReadOnlyKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithReadOnlyKeywordDelegate1 WithReadOnlyKeywordFunc1;

        static CrefParameterSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ReadOnlyKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<ReadOnlyKeywordGetterDelegate>(WrappedType, nameof(ReadOnlyKeyword));

            UpdateFunc0 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(WrappedType, nameof(Update));
            WithReadOnlyKeywordFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithReadOnlyKeywordDelegate1>(WrappedType, nameof(WithReadOnlyKeyword));
        }

        /// <summary>Property added in version 4.8.0.0 of Roslyn.</summary>
        public static SyntaxToken ReadOnlyKeyword(this CrefParameterSyntax _obj)
            => ReadOnlyKeywordGetterFunc(_obj);

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static CrefParameterSyntax Update(this CrefParameterSyntax _obj, SyntaxToken refKindKeyword, SyntaxToken readOnlyKeyword, TypeSyntax type)
            => UpdateFunc0(_obj, refKindKeyword, readOnlyKeyword, type);

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static CrefParameterSyntax WithReadOnlyKeyword(this CrefParameterSyntax _obj, SyntaxToken readOnlyKeyword)
            => WithReadOnlyKeywordFunc1(_obj, readOnlyKeyword);
    }
}
