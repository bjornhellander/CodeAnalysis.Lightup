// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class LambdaExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(LambdaExpressionSyntax? _obj);

        private delegate LambdaExpressionSyntax AddAttributeListsDelegate0(LambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate AnonymousFunctionExpressionSyntax AddBlockAttributeListsDelegate1(LambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate AnonymousFunctionExpressionSyntax AddBlockStatementsDelegate2(LambdaExpressionSyntax? _obj, params StatementSyntax[] items);
        private delegate LambdaExpressionSyntax AddModifiersDelegate3(LambdaExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate LambdaExpressionSyntax WithAttributeListsDelegate4(LambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate LambdaExpressionSyntax WithBlockDelegate5(LambdaExpressionSyntax? _obj, BlockSyntax? block);
        private delegate LambdaExpressionSyntax WithExpressionBodyDelegate6(LambdaExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate LambdaExpressionSyntax WithModifiersDelegate7(LambdaExpressionSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddBlockAttributeListsDelegate1 AddBlockAttributeListsFunc1;
        private static readonly AddBlockStatementsDelegate2 AddBlockStatementsFunc2;
        private static readonly AddModifiersDelegate3 AddModifiersFunc3;
        private static readonly WithAttributeListsDelegate4 WithAttributeListsFunc4;
        private static readonly WithBlockDelegate5 WithBlockFunc5;
        private static readonly WithExpressionBodyDelegate6 WithExpressionBodyFunc6;
        private static readonly WithModifiersDelegate7 WithModifiersFunc7;

        static LambdaExpressionSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            AddBlockAttributeListsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate1>(WrappedType, nameof(AddBlockAttributeLists));
            AddBlockStatementsFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddBlockStatementsDelegate2>(WrappedType, nameof(AddBlockStatements));
            AddModifiersFunc3 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate3>(WrappedType, nameof(AddModifiers));
            WithAttributeListsFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate4>(WrappedType, nameof(WithAttributeLists));
            WithBlockFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithBlockDelegate5>(WrappedType, nameof(WithBlock));
            WithExpressionBodyFunc6 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate6>(WrappedType, nameof(WithExpressionBody));
            WithModifiersFunc7 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate7>(WrappedType, nameof(WithModifiers));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this LambdaExpressionSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static LambdaExpressionSyntax AddAttributeLists(this LambdaExpressionSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousFunctionExpressionSyntax AddBlockAttributeLists(this LambdaExpressionSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousFunctionExpressionSyntax AddBlockStatements(this LambdaExpressionSyntax wrappedObject, params StatementSyntax[] items)
            => AddBlockStatementsFunc2(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LambdaExpressionSyntax AddModifiers(this LambdaExpressionSyntax wrappedObject, params SyntaxToken[] items)
            => AddModifiersFunc3(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static LambdaExpressionSyntax WithAttributeLists(this LambdaExpressionSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc4(wrappedObject, attributeLists);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LambdaExpressionSyntax WithBlock(this LambdaExpressionSyntax wrappedObject, BlockSyntax? block)
            => WithBlockFunc5(wrappedObject, block);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LambdaExpressionSyntax WithExpressionBody(this LambdaExpressionSyntax wrappedObject, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc6(wrappedObject, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static LambdaExpressionSyntax WithModifiers(this LambdaExpressionSyntax wrappedObject, SyntaxTokenList modifiers)
            => WithModifiersFunc7(wrappedObject, modifiers);
    }
}
