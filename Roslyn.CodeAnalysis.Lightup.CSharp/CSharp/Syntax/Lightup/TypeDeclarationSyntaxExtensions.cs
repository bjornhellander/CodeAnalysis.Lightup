// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.</summary>
    public static partial class TypeDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax";

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterListGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax AddParameterListParametersDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax WithParameterListDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList);

        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AddParameterListParametersDelegate0 AddParameterListParametersFunc0;
        private static readonly WithParameterListDelegate1 WithParameterListFunc1;

        static TypeDeclarationSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(wrappedType, nameof(ParameterList));

            AddParameterListParametersFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate0>(wrappedType, "AddParameterListParameters", "itemsParameterSyntax[]");
            WithParameterListFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate1>(wrappedType, "WithParameterList", "parameterListParameterListSyntax");
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? ParameterList(this Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax _obj)
            => ParameterListGetterFunc(_obj);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax AddParameterListParameters(this Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[] items)
            => AddParameterListParametersFunc0(_obj, items);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax WithParameterList(this Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList)
            => WithParameterListFunc1(_obj, parameterList);
    }
}
