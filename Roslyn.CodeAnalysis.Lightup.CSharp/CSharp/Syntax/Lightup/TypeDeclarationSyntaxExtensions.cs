// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class TypeDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate ParameterListSyntax? ParameterListGetterDelegate(TypeDeclarationSyntax? _obj);

        private delegate TypeDeclarationSyntax AddParameterListParametersDelegate0(TypeDeclarationSyntax? _obj, params ParameterSyntax[] items);
        private delegate TypeDeclarationSyntax WithParameterListDelegate1(TypeDeclarationSyntax? _obj, ParameterListSyntax? parameterList);

        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AddParameterListParametersDelegate0 AddParameterListParametersFunc0;
        private static readonly WithParameterListDelegate1 WithParameterListFunc1;

        static TypeDeclarationSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(WrappedType, nameof(ParameterList));

            AddParameterListParametersFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate0>(WrappedType, nameof(AddParameterListParameters));
            WithParameterListFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate1>(WrappedType, nameof(WithParameterList));
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static ParameterListSyntax? ParameterList(this TypeDeclarationSyntax _obj)
            => ParameterListGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static TypeDeclarationSyntax AddParameterListParameters(this TypeDeclarationSyntax wrappedObject, params ParameterSyntax[] items)
            => AddParameterListParametersFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static TypeDeclarationSyntax WithParameterList(this TypeDeclarationSyntax wrappedObject, ParameterListSyntax? parameterList)
            => WithParameterListFunc1(wrappedObject, parameterList);
    }
}
