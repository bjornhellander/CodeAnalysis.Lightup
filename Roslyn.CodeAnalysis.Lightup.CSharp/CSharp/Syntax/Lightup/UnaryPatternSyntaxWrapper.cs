// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.UnaryPatternSyntax. Added in version 3.8.0.0.</summary>
    public readonly struct UnaryPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.UnaryPatternSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken OperatorTokenGetterDelegate(PatternSyntax? _obj);
        private delegate PatternSyntax PatternGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate UnaryPatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, SyntaxToken operatorToken, PatternSyntax pattern);
        private delegate UnaryPatternSyntaxWrapper WithOperatorTokenDelegate2(PatternSyntax? _obj, SyntaxToken operatorToken);
        private delegate UnaryPatternSyntaxWrapper WithPatternDelegate3(PatternSyntax? _obj, PatternSyntax pattern);

        private static readonly OperatorTokenGetterDelegate OperatorTokenGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithOperatorTokenDelegate2 WithOperatorTokenFunc2;
        private static readonly WithPatternDelegate3 WithPatternFunc3;

        private readonly PatternSyntax? wrappedObject;

        static UnaryPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            OperatorTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OperatorTokenGetterDelegate>(WrappedType, nameof(OperatorToken));
            PatternGetterFunc = LightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "CSharpSyntaxVisitor");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "SyntaxToken", "PatternSyntax");
            WithOperatorTokenFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithOperatorTokenDelegate2>(WrappedType, "WithOperatorToken", "SyntaxToken");
            WithPatternFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithPatternDelegate3>(WrappedType, "WithPattern", "PatternSyntax");
        }

        private UnaryPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly SyntaxToken OperatorToken
        {
            get => OperatorTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly PatternSyntax Pattern
        {
            get => PatternGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(UnaryPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static UnaryPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new UnaryPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly UnaryPatternSyntaxWrapper Update(SyntaxToken operatorToken, PatternSyntax pattern)
            => UpdateFunc1(wrappedObject, operatorToken, pattern);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly UnaryPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc2(wrappedObject, operatorToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly UnaryPatternSyntaxWrapper WithPattern(PatternSyntax pattern)
            => WithPatternFunc3(wrappedObject, pattern);
    }
}
