// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct UnaryPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.UnaryPatternSyntax";

        private static readonly Type? WrappedType;
        private static readonly Func<PatternSyntax?, SyntaxToken> OperatorTokenFunc;
        private static readonly Func<PatternSyntax?, PatternSyntax> PatternFunc;
        private static readonly Action<PatternSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<PatternSyntax?, SyntaxToken, PatternSyntax, UnaryPatternSyntaxWrapper> UpdateFunc1;
        private static readonly Func<PatternSyntax?, SyntaxToken, UnaryPatternSyntaxWrapper> WithOperatorTokenFunc2;
        private static readonly Func<PatternSyntax?, PatternSyntax, UnaryPatternSyntaxWrapper> WithPatternFunc3;

        private readonly PatternSyntax? WrappedObject;

        static UnaryPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);
            OperatorTokenFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(OperatorToken));
            PatternFunc = LightupHelper.CreateGetAccessor<PatternSyntax?, PatternSyntax>(WrappedType, nameof(Pattern));
            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<UnaryPatternSyntaxWrapper, PatternSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UnaryPatternSyntaxWrapper, PatternSyntax?, SyntaxToken, PatternSyntax, UnaryPatternSyntaxWrapper>(WrappedType, nameof(Update));
            WithOperatorTokenFunc2 = LightupHelper.CreateMethodAccessor<UnaryPatternSyntaxWrapper, PatternSyntax?, SyntaxToken, UnaryPatternSyntaxWrapper>(WrappedType, nameof(WithOperatorToken));
            WithPatternFunc3 = LightupHelper.CreateMethodAccessor<UnaryPatternSyntaxWrapper, PatternSyntax?, PatternSyntax, UnaryPatternSyntaxWrapper>(WrappedType, nameof(WithPattern));
        }

        private UnaryPatternSyntaxWrapper(PatternSyntax? obj)
        {
            WrappedObject = obj;
        }

        public readonly SyntaxToken OperatorToken
            => OperatorTokenFunc(WrappedObject);

        public readonly PatternSyntax Pattern
            => PatternFunc(WrappedObject);

        public static implicit operator PatternSyntax?(UnaryPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static UnaryPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new UnaryPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => WrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(WrappedObject, visitor);

        public readonly UnaryPatternSyntaxWrapper Update(SyntaxToken operatorToken, PatternSyntax pattern)
            => UpdateFunc1(WrappedObject, operatorToken, pattern);

        public readonly UnaryPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc2(WrappedObject, operatorToken);

        public readonly UnaryPatternSyntaxWrapper WithPattern(PatternSyntax pattern)
            => WithPatternFunc3(WrappedObject, pattern);
    }
}
