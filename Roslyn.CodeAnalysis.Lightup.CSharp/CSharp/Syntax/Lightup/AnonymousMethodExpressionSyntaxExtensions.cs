// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.</summary>
    public static class AnonymousMethodExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax";

        private delegate ExpressionSyntax? ExpressionBodyGetterDelegate(AnonymousMethodExpressionSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(AnonymousMethodExpressionSyntax? _obj);

        private delegate AnonymousMethodExpressionSyntax AddBlockAttributeListsDelegate0(AnonymousMethodExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate AnonymousMethodExpressionSyntax AddModifiersDelegate1(AnonymousMethodExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate AnonymousMethodExpressionSyntax UpdateDelegate2(AnonymousMethodExpressionSyntax? _obj, SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax? UpdateDelegate3(AnonymousMethodExpressionSyntax? _obj, SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax WithExpressionBodyDelegate4(AnonymousMethodExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax WithModifiersDelegate5(AnonymousMethodExpressionSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddBlockAttributeListsDelegate0 AddBlockAttributeListsFunc0;
        private static readonly AddModifiersDelegate1 AddModifiersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly UpdateDelegate3 UpdateFunc3;
        private static readonly WithExpressionBodyDelegate4 WithExpressionBodyFunc4;
        private static readonly WithModifiersDelegate5 WithModifiersFunc5;

        static AnonymousMethodExpressionSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionBodyGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionBodyGetterDelegate>(wrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(wrappedType, nameof(Modifiers));

            AddBlockAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate0>(wrappedType, "AddBlockAttributeLists", "AttributeListSyntax[]");
            AddModifiersFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate1>(wrappedType, "AddModifiers", "SyntaxToken[]");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(wrappedType, "Update", "SyntaxTokenList", "SyntaxToken", "ParameterListSyntax", "BlockSyntax", "ExpressionSyntax");
            UpdateFunc3 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate3>(wrappedType, "Update", "SyntaxToken", "SyntaxToken", "ParameterListSyntax", "BlockSyntax", "ExpressionSyntax");
            WithExpressionBodyFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate4>(wrappedType, "WithExpressionBody", "ExpressionSyntax");
            WithModifiersFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate5>(wrappedType, "WithModifiers", "SyntaxTokenList");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static ExpressionSyntax? ExpressionBody(this AnonymousMethodExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static SyntaxTokenList Modifiers(this AnonymousMethodExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax AddBlockAttributeLists(this AnonymousMethodExpressionSyntax _obj, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax AddModifiers(this AnonymousMethodExpressionSyntax _obj, params SyntaxToken[] items)
            => AddModifiersFunc1(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax Update(this AnonymousMethodExpressionSyntax _obj, SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody)
            => UpdateFunc2(_obj, modifiers, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax? Update(this AnonymousMethodExpressionSyntax _obj, SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc3(_obj, asyncKeyword, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax WithExpressionBody(this AnonymousMethodExpressionSyntax _obj, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc4(_obj, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax WithModifiers(this AnonymousMethodExpressionSyntax _obj, SyntaxTokenList modifiers)
            => WithModifiersFunc5(_obj, modifiers);
    }
}
