// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class AnonymousMethodExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate ExpressionSyntax? ExpressionBodyGetterDelegate(AnonymousMethodExpressionSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(AnonymousMethodExpressionSyntax? _obj);

        private delegate AnonymousMethodExpressionSyntax AddBlockAttributeListsDelegate0(AnonymousMethodExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate AnonymousMethodExpressionSyntax AddModifiersDelegate1(AnonymousMethodExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate AnonymousMethodExpressionSyntax UpdateDelegate2(AnonymousMethodExpressionSyntax? _obj, SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax? UpdateDelegate3(AnonymousMethodExpressionSyntax? _obj, SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax WithExpressionBodyDelegate4(AnonymousMethodExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax WithModifiersDelegate5(AnonymousMethodExpressionSyntax? _obj, SyntaxTokenList modifiers);

        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddBlockAttributeListsDelegate0 AddBlockAttributeListsFunc0;
        private static readonly AddModifiersDelegate1 AddModifiersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly UpdateDelegate3 UpdateFunc3;
        private static readonly WithExpressionBodyDelegate4 WithExpressionBodyFunc4;
        private static readonly WithModifiersDelegate5 WithModifiersFunc5;

        static AnonymousMethodExpressionSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionBodyGetterFunc = LightupHelper.CreateGetAccessor<ExpressionBodyGetterDelegate>(WrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));

            AddBlockAttributeListsFunc0 = LightupHelper.CreateMethodAccessor<AddBlockAttributeListsDelegate0>(WrappedType, nameof(AddBlockAttributeLists));
            AddModifiersFunc1 = LightupHelper.CreateMethodAccessor<AddModifiersDelegate1>(WrappedType, nameof(AddModifiers));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            UpdateFunc3 = LightupHelper.CreateMethodAccessor<UpdateDelegate3>(WrappedType, nameof(Update));
            WithExpressionBodyFunc4 = LightupHelper.CreateMethodAccessor<WithExpressionBodyDelegate4>(WrappedType, nameof(WithExpressionBody));
            WithModifiersFunc5 = LightupHelper.CreateMethodAccessor<WithModifiersDelegate5>(WrappedType, nameof(WithModifiers));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ExpressionSyntax? ExpressionBody(this AnonymousMethodExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxTokenList Modifiers(this AnonymousMethodExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax AddBlockAttributeLists(this AnonymousMethodExpressionSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax AddModifiers(this AnonymousMethodExpressionSyntax wrappedObject, params SyntaxToken[] items)
            => AddModifiersFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax Update(this AnonymousMethodExpressionSyntax wrappedObject, SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody)
            => UpdateFunc2(wrappedObject, modifiers, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax? Update(this AnonymousMethodExpressionSyntax wrappedObject, SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc3(wrappedObject, asyncKeyword, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax WithExpressionBody(this AnonymousMethodExpressionSyntax wrappedObject, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc4(wrappedObject, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static AnonymousMethodExpressionSyntax WithModifiers(this AnonymousMethodExpressionSyntax wrappedObject, SyntaxTokenList modifiers)
            => WithModifiersFunc5(wrappedObject, modifiers);
    }
}
