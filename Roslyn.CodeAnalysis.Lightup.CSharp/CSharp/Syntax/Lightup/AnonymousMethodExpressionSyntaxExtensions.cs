// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.</summary>
    public static class AnonymousMethodExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax";

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? ExpressionBodyGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxTokenList ModifiersGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AddBlockAttributeListsDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AddModifiersDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, params Microsoft.CodeAnalysis.SyntaxToken[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax UpdateDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? UpdateDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax WithExpressionBodyDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax WithModifiersDelegate5(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers);

        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;

        private static readonly AddBlockAttributeListsDelegate0 AddBlockAttributeListsFunc0;
        private static readonly AddModifiersDelegate1 AddModifiersFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly UpdateDelegate3 UpdateFunc3;
        private static readonly WithExpressionBodyDelegate4 WithExpressionBodyFunc4;
        private static readonly WithModifiersDelegate5 WithModifiersFunc5;

        static AnonymousMethodExpressionSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ExpressionBodyGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionBodyGetterDelegate>(wrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(wrappedType, nameof(Modifiers));

            AddBlockAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate0>(wrappedType, "AddBlockAttributeLists", "itemsAttributeListSyntax[]");
            AddModifiersFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate1>(wrappedType, "AddModifiers", "itemsSyntaxToken[]");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(wrappedType, "Update", "modifiersSyntaxTokenList", "delegateKeywordSyntaxToken", "parameterListParameterListSyntax", "blockBlockSyntax", "expressionBodyExpressionSyntax");
            UpdateFunc3 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate3>(wrappedType, "Update", "asyncKeywordSyntaxToken", "delegateKeywordSyntaxToken", "parameterListParameterListSyntax", "blockBlockSyntax", "expressionBodyExpressionSyntax");
            WithExpressionBodyFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate4>(wrappedType, "WithExpressionBody", "expressionBodyExpressionSyntax");
            WithModifiersFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate5>(wrappedType, "WithModifiers", "modifiersSyntaxTokenList");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? ExpressionBody(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTokenList Modifiers(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AddBlockAttributeLists(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AddModifiers(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, params Microsoft.CodeAnalysis.SyntaxToken[] items)
            => AddModifiersFunc1(_obj, items);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody)
            => UpdateFunc2(_obj, modifiers, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax? Update(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax? parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody)
            => UpdateFunc3(_obj, asyncKeyword, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax WithExpressionBody(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc4(_obj, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax WithModifiers(this Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers)
            => WithModifiersFunc5(_obj, modifiers);
    }
}
