// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CollectionExpressionSyntax. Added in version 4.8.0.0.</summary>
    public readonly struct CollectionExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CollectionExpressionSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken CloseBracketTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> ElementsGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken OpenBracketTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper AddElementsDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper UpdateDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> elements, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithCloseBracketTokenDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithElementsDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> elements);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithOpenBracketTokenDelegate5(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken openBracketToken);

        private static readonly CloseBracketTokenGetterDelegate CloseBracketTokenGetterFunc;
        private static readonly ElementsGetterDelegate ElementsGetterFunc;
        private static readonly OpenBracketTokenGetterDelegate OpenBracketTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddElementsDelegate1 AddElementsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCloseBracketTokenDelegate3 WithCloseBracketTokenFunc3;
        private static readonly WithElementsDelegate4 WithElementsFunc4;
        private static readonly WithOpenBracketTokenDelegate5 WithOpenBracketTokenFunc5;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? wrappedObject;

        static CollectionExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloseBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseBracketTokenGetterDelegate>(WrappedType, nameof(CloseBracketToken));
            ElementsGetterFunc = LightupHelper.CreateInstanceGetAccessor<ElementsGetterDelegate>(WrappedType, nameof(Elements));
            OpenBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenBracketTokenGetterDelegate>(WrappedType, nameof(OpenBracketToken));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            AddElementsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddElementsDelegate1>(WrappedType, "AddElements", "itemsCollectionElementSyntax[]");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, "Update", "openBracketTokenSyntaxToken", "elementsSeparatedSyntaxList`1", "closeBracketTokenSyntaxToken");
            WithCloseBracketTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithCloseBracketTokenDelegate3>(WrappedType, "WithCloseBracketToken", "closeBracketTokenSyntaxToken");
            WithElementsFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithElementsDelegate4>(WrappedType, "WithElements", "elementsSeparatedSyntaxList`1");
            WithOpenBracketTokenFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithOpenBracketTokenDelegate5>(WrappedType, "WithOpenBracketToken", "openBracketTokenSyntaxToken");
        }

        private CollectionExpressionSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken CloseBracketToken
        {
            get => CloseBracketTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> Elements
        {
            get => ElementsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken OpenBracketToken
        {
            get => OpenBracketTokenGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?(CollectionExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static CollectionExpressionSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>(obj, WrappedType);
            return new CollectionExpressionSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper AddElements(params Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper[] items)
            => AddElementsFunc1(wrappedObject, items);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> elements, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken)
            => UpdateFunc2(wrappedObject, openBracketToken, elements, closeBracketToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc3(wrappedObject, closeBracketToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithElements(Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionElementSyntaxWrapper> elements)
            => WithElementsFunc4(wrappedObject, elements);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);
    }
}
