// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.8.0.0</summary>
    public readonly struct CollectionExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CollectionExpressionSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<ExpressionSyntax?, SyntaxToken> CloseBracketTokenFunc;
        private static readonly Func<ExpressionSyntax?, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>> ElementsFunc;
        private static readonly Func<ExpressionSyntax?, SyntaxToken> OpenBracketTokenFunc;

        private static readonly Action<ExpressionSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<ExpressionSyntax?, CollectionElementSyntaxWrapper[], CollectionExpressionSyntaxWrapper> AddElementsFunc1;
        private static readonly Func<ExpressionSyntax?, SyntaxToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>, SyntaxToken, CollectionExpressionSyntaxWrapper> UpdateFunc2;
        private static readonly Func<ExpressionSyntax?, SyntaxToken, CollectionExpressionSyntaxWrapper> WithCloseBracketTokenFunc3;
        private static readonly Func<ExpressionSyntax?, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>, CollectionExpressionSyntaxWrapper> WithElementsFunc4;
        private static readonly Func<ExpressionSyntax?, SyntaxToken, CollectionExpressionSyntaxWrapper> WithOpenBracketTokenFunc5;

        private readonly ExpressionSyntax? wrappedObject;

        static CollectionExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloseBracketTokenFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, SyntaxToken>(WrappedType, nameof(CloseBracketToken));
            ElementsFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>>(WrappedType, nameof(Elements));
            OpenBracketTokenFunc = LightupHelper.CreateGetAccessor<ExpressionSyntax?, SyntaxToken>(WrappedType, nameof(OpenBracketToken));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<ExpressionSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddElementsFunc1 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, CollectionElementSyntaxWrapper[], CollectionExpressionSyntaxWrapper>(WrappedType, nameof(AddElements));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, SyntaxToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>, SyntaxToken, CollectionExpressionSyntaxWrapper>(WrappedType, nameof(Update));
            WithCloseBracketTokenFunc3 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, SyntaxToken, CollectionExpressionSyntaxWrapper>(WrappedType, nameof(WithCloseBracketToken));
            WithElementsFunc4 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper>, CollectionExpressionSyntaxWrapper>(WrappedType, nameof(WithElements));
            WithOpenBracketTokenFunc5 = LightupHelper.CreateMethodAccessor<ExpressionSyntax?, SyntaxToken, CollectionExpressionSyntaxWrapper>(WrappedType, nameof(WithOpenBracketToken));
        }

        private CollectionExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken CloseBracketToken
            => CloseBracketTokenFunc(wrappedObject);

        public readonly SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> Elements
            => ElementsFunc(wrappedObject);

        public readonly SyntaxToken OpenBracketToken
            => OpenBracketTokenFunc(wrappedObject);

        public static implicit operator ExpressionSyntax?(CollectionExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static CollectionExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new CollectionExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly CollectionExpressionSyntaxWrapper AddElements(params CollectionElementSyntaxWrapper[] items)
            => AddElementsFunc1(wrappedObject, items);

        public readonly CollectionExpressionSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements, SyntaxToken closeBracketToken)
            => UpdateFunc2(wrappedObject, openBracketToken, elements, closeBracketToken);

        public readonly CollectionExpressionSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc3(wrappedObject, closeBracketToken);

        public readonly CollectionExpressionSyntaxWrapper WithElements(SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements)
            => WithElementsFunc4(wrappedObject, elements);

        public readonly CollectionExpressionSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);
    }
}
