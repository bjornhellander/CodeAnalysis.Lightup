// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CollectionExpressionSyntax. Added in version 4.8.0.0.</summary>
    public readonly struct CollectionExpressionSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CollectionExpressionSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken CloseBracketTokenGetterDelegate(ExpressionSyntax? _obj);
        private delegate SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> ElementsGetterDelegate(ExpressionSyntax? _obj);
        private delegate SyntaxToken OpenBracketTokenGetterDelegate(ExpressionSyntax? _obj);

        private delegate void AcceptDelegate0(ExpressionSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate CollectionExpressionSyntaxWrapper AddElementsDelegate1(ExpressionSyntax? _obj, params CollectionElementSyntaxWrapper[] items);
        private delegate CollectionExpressionSyntaxWrapper UpdateDelegate2(ExpressionSyntax? _obj, SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements, SyntaxToken closeBracketToken);
        private delegate CollectionExpressionSyntaxWrapper WithCloseBracketTokenDelegate3(ExpressionSyntax? _obj, SyntaxToken closeBracketToken);
        private delegate CollectionExpressionSyntaxWrapper WithElementsDelegate4(ExpressionSyntax? _obj, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements);
        private delegate CollectionExpressionSyntaxWrapper WithOpenBracketTokenDelegate5(ExpressionSyntax? _obj, SyntaxToken openBracketToken);

        private static readonly CloseBracketTokenGetterDelegate CloseBracketTokenGetterFunc;
        private static readonly ElementsGetterDelegate ElementsGetterFunc;
        private static readonly OpenBracketTokenGetterDelegate OpenBracketTokenGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddElementsDelegate1 AddElementsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithCloseBracketTokenDelegate3 WithCloseBracketTokenFunc3;
        private static readonly WithElementsDelegate4 WithElementsFunc4;
        private static readonly WithOpenBracketTokenDelegate5 WithOpenBracketTokenFunc5;

        private readonly ExpressionSyntax? wrappedObject;

        static CollectionExpressionSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloseBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseBracketTokenGetterDelegate>(WrappedType, nameof(CloseBracketToken));
            ElementsGetterFunc = LightupHelper.CreateInstanceGetAccessor<ElementsGetterDelegate>(WrappedType, nameof(Elements));
            OpenBracketTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenBracketTokenGetterDelegate>(WrappedType, nameof(OpenBracketToken));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "CSharpSyntaxVisitor");
            AddElementsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddElementsDelegate1>(WrappedType, "AddElements", "CollectionElementSyntax[]");
            UpdateFunc2 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, "Update", "SyntaxToken", "SeparatedSyntaxList`1", "SyntaxToken");
            WithCloseBracketTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithCloseBracketTokenDelegate3>(WrappedType, "WithCloseBracketToken", "SyntaxToken");
            WithElementsFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithElementsDelegate4>(WrappedType, "WithElements", "SeparatedSyntaxList`1");
            WithOpenBracketTokenFunc5 = LightupHelper.CreateInstanceMethodAccessor<WithOpenBracketTokenDelegate5>(WrappedType, "WithOpenBracketToken", "SyntaxToken");
        }

        private CollectionExpressionSyntaxWrapper(ExpressionSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly SyntaxToken CloseBracketToken
        {
            get => CloseBracketTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> Elements
        {
            get => ElementsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly SyntaxToken OpenBracketToken
        {
            get => OpenBracketTokenGetterFunc(wrappedObject);
        }

        public static implicit operator ExpressionSyntax?(CollectionExpressionSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static CollectionExpressionSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ExpressionSyntax>(obj, WrappedType);
            return new CollectionExpressionSyntaxWrapper(obj2);
        }

        public ExpressionSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly CollectionExpressionSyntaxWrapper AddElements(params CollectionElementSyntaxWrapper[] items)
            => AddElementsFunc1(wrappedObject, items);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly CollectionExpressionSyntaxWrapper Update(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements, SyntaxToken closeBracketToken)
            => UpdateFunc2(wrappedObject, openBracketToken, elements, closeBracketToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly CollectionExpressionSyntaxWrapper WithCloseBracketToken(SyntaxToken closeBracketToken)
            => WithCloseBracketTokenFunc3(wrappedObject, closeBracketToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly CollectionExpressionSyntaxWrapper WithElements(SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements)
            => WithElementsFunc4(wrappedObject, elements);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public readonly CollectionExpressionSyntaxWrapper WithOpenBracketToken(SyntaxToken openBracketToken)
            => WithOpenBracketTokenFunc5(wrappedObject, openBracketToken);
    }
}
