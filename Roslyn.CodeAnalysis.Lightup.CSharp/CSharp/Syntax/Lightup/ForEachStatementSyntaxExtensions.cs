// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class ForEachStatementSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax";

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(ForEachStatementSyntax? _obj);

        private delegate ForEachStatementSyntax AddAttributeListsDelegate0(ForEachStatementSyntax? _obj, params AttributeListSyntax[] items);
        private delegate ForEachStatementSyntax UpdateDelegate1(ForEachStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate ForEachStatementSyntax WithAttributeListsDelegate2(ForEachStatementSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithAttributeListsDelegate2 WithAttributeListsFunc2;

        static ForEachStatementSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(wrappedType, nameof(AttributeLists));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(wrappedType, nameof(AddAttributeLists));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, nameof(Update));
            WithAttributeListsFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate2>(wrappedType, nameof(WithAttributeLists));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this ForEachStatementSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static ForEachStatementSyntax AddAttributeLists(this ForEachStatementSyntax _obj, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(_obj, items);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static ForEachStatementSyntax Update(this ForEachStatementSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
            => UpdateFunc1(_obj, attributeLists, awaitKeyword, forEachKeyword, openParenToken, type, identifier, inKeyword, expression, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static ForEachStatementSyntax WithAttributeLists(this ForEachStatementSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc2(_obj, attributeLists);
    }
}
