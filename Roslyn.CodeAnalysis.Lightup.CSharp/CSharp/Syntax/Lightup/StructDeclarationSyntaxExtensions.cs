// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.</summary>
    public static class StructDeclarationSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax";

        private delegate ParameterListSyntax? ParameterListGetterDelegate(StructDeclarationSyntax? _obj);

        private delegate StructDeclarationSyntax AddParameterListParametersDelegate0(StructDeclarationSyntax? _obj, params ParameterSyntax[] items);
        private delegate StructDeclarationSyntax UpdateDelegate1(StructDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate StructDeclarationSyntax WithParameterListDelegate2(StructDeclarationSyntax? _obj, ParameterListSyntax? parameterList);

        private static readonly ParameterListGetterDelegate ParameterListGetterFunc;

        private static readonly AddParameterListParametersDelegate0 AddParameterListParametersFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithParameterListDelegate2 WithParameterListFunc2;

        static StructDeclarationSyntaxExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ParameterListGetterFunc = LightupHelper.CreateInstanceGetAccessor<ParameterListGetterDelegate>(wrappedType, nameof(ParameterList));

            AddParameterListParametersFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddParameterListParametersDelegate0>(wrappedType, "AddParameterListParameters", "ParameterSyntax[]");
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, "Update", "SyntaxList`1", "SyntaxTokenList", "SyntaxToken", "SyntaxToken", "TypeParameterListSyntax", "ParameterListSyntax", "BaseListSyntax", "SyntaxList`1", "SyntaxToken", "SyntaxList`1", "SyntaxToken", "SyntaxToken");
            WithParameterListFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithParameterListDelegate2>(wrappedType, "WithParameterList", "ParameterListSyntax");
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static ParameterListSyntax? ParameterList(this StructDeclarationSyntax _obj)
            => ParameterListGetterFunc(_obj);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static StructDeclarationSyntax AddParameterListParameters(this StructDeclarationSyntax _obj, params ParameterSyntax[] items)
            => AddParameterListParametersFunc0(_obj, items);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static StructDeclarationSyntax Update(this StructDeclarationSyntax _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => UpdateFunc1(_obj, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static StructDeclarationSyntax WithParameterList(this StructDeclarationSyntax _obj, ParameterListSyntax? parameterList)
            => WithParameterListFunc2(_obj, parameterList);
    }
}
