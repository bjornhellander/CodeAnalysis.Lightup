// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct BinaryPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BinaryPatternSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<PatternSyntax?, PatternSyntax> LeftFunc;
        private static readonly Func<PatternSyntax?, SyntaxToken> OperatorTokenFunc;
        private static readonly Func<PatternSyntax?, PatternSyntax> RightFunc;

        private static readonly Action<PatternSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<PatternSyntax?, PatternSyntax, SyntaxToken, PatternSyntax, BinaryPatternSyntaxWrapper> UpdateFunc1;
        private static readonly Func<PatternSyntax?, PatternSyntax, BinaryPatternSyntaxWrapper> WithLeftFunc2;
        private static readonly Func<PatternSyntax?, SyntaxToken, BinaryPatternSyntaxWrapper> WithOperatorTokenFunc3;
        private static readonly Func<PatternSyntax?, PatternSyntax, BinaryPatternSyntaxWrapper> WithRightFunc4;

        private readonly PatternSyntax? wrappedObject;

        static BinaryPatternSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            LeftFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, PatternSyntax>(WrappedType, nameof(Left));
            OperatorTokenFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(OperatorToken));
            RightFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, PatternSyntax>(WrappedType, nameof(Right));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<PatternSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, PatternSyntax, SyntaxToken, PatternSyntax, BinaryPatternSyntaxWrapper>(WrappedType, nameof(Update));
            WithLeftFunc2 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, PatternSyntax, BinaryPatternSyntaxWrapper>(WrappedType, nameof(WithLeft));
            WithOperatorTokenFunc3 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, SyntaxToken, BinaryPatternSyntaxWrapper>(WrappedType, nameof(WithOperatorToken));
            WithRightFunc4 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, PatternSyntax, BinaryPatternSyntaxWrapper>(WrappedType, nameof(WithRight));
        }

        private BinaryPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly PatternSyntax Left
            => LeftFunc(wrappedObject);

        public readonly SyntaxToken OperatorToken
            => OperatorTokenFunc(wrappedObject);

        public readonly PatternSyntax Right
            => RightFunc(wrappedObject);

        public static implicit operator PatternSyntax?(BinaryPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static BinaryPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new BinaryPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly BinaryPatternSyntaxWrapper Update(PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right)
            => UpdateFunc1(wrappedObject, left, operatorToken, right);

        public readonly BinaryPatternSyntaxWrapper WithLeft(PatternSyntax left)
            => WithLeftFunc2(wrappedObject, left);

        public readonly BinaryPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc3(wrappedObject, operatorToken);

        public readonly BinaryPatternSyntaxWrapper WithRight(PatternSyntax right)
            => WithRightFunc4(wrappedObject, right);
    }
}
