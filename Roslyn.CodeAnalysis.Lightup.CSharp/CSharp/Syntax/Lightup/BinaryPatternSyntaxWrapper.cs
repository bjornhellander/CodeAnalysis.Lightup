// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in version 3.8.0.0 of Roslyn.</summary>
    public readonly struct BinaryPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BinaryPatternSyntax";

        public static readonly Type? WrappedType;

        private delegate PatternSyntax LeftGetterDelegate(PatternSyntax? _obj);
        private delegate SyntaxToken OperatorTokenGetterDelegate(PatternSyntax? _obj);
        private delegate PatternSyntax RightGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate BinaryPatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right);
        private delegate BinaryPatternSyntaxWrapper WithLeftDelegate2(PatternSyntax? _obj, PatternSyntax left);
        private delegate BinaryPatternSyntaxWrapper WithOperatorTokenDelegate3(PatternSyntax? _obj, SyntaxToken operatorToken);
        private delegate BinaryPatternSyntaxWrapper WithRightDelegate4(PatternSyntax? _obj, PatternSyntax right);

        private static readonly LeftGetterDelegate LeftGetterFunc;
        private static readonly OperatorTokenGetterDelegate OperatorTokenGetterFunc;
        private static readonly RightGetterDelegate RightGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithLeftDelegate2 WithLeftFunc2;
        private static readonly WithOperatorTokenDelegate3 WithOperatorTokenFunc3;
        private static readonly WithRightDelegate4 WithRightFunc4;

        private readonly PatternSyntax? wrappedObject;

        static BinaryPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftGetterFunc = LightupHelper.CreateInstanceGetAccessor<LeftGetterDelegate>(WrappedType, nameof(Left));
            OperatorTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OperatorTokenGetterDelegate>(WrappedType, nameof(OperatorToken));
            RightGetterFunc = LightupHelper.CreateInstanceGetAccessor<RightGetterDelegate>(WrappedType, nameof(Right));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithLeftFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithLeftDelegate2>(WrappedType, nameof(WithLeft));
            WithOperatorTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithOperatorTokenDelegate3>(WrappedType, nameof(WithOperatorToken));
            WithRightFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithRightDelegate4>(WrappedType, nameof(WithRight));
        }

        private BinaryPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly PatternSyntax Left
        {
            get => LeftGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly SyntaxToken OperatorToken
        {
            get => OperatorTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly PatternSyntax Right
        {
            get => RightGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(BinaryPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BinaryPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new BinaryPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly BinaryPatternSyntaxWrapper Update(PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right)
            => UpdateFunc1(wrappedObject, left, operatorToken, right);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly BinaryPatternSyntaxWrapper WithLeft(PatternSyntax left)
            => WithLeftFunc2(wrappedObject, left);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly BinaryPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc3(wrappedObject, operatorToken);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly BinaryPatternSyntaxWrapper WithRight(PatternSyntax right)
            => WithRightFunc4(wrappedObject, right);
    }
}
