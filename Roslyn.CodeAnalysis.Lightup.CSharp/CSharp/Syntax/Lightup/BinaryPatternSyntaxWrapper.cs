// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct BinaryPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BinaryPatternSyntax";

        public static readonly Type? WrappedType;

        private delegate PatternSyntax LeftGetterDelegate(PatternSyntax? _obj);
        private delegate SyntaxToken OperatorTokenGetterDelegate(PatternSyntax? _obj);
        private delegate PatternSyntax RightGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate BinaryPatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right);
        private delegate BinaryPatternSyntaxWrapper WithLeftDelegate2(PatternSyntax? _obj, PatternSyntax left);
        private delegate BinaryPatternSyntaxWrapper WithOperatorTokenDelegate3(PatternSyntax? _obj, SyntaxToken operatorToken);
        private delegate BinaryPatternSyntaxWrapper WithRightDelegate4(PatternSyntax? _obj, PatternSyntax right);

        private static readonly LeftGetterDelegate LeftGetterFunc;
        private static readonly OperatorTokenGetterDelegate OperatorTokenGetterFunc;
        private static readonly RightGetterDelegate RightGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithLeftDelegate2 WithLeftFunc2;
        private static readonly WithOperatorTokenDelegate3 WithOperatorTokenFunc3;
        private static readonly WithRightDelegate4 WithRightFunc4;

        private readonly PatternSyntax? wrappedObject;

        static BinaryPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftGetterFunc = LightupHelper.CreateGetAccessor<LeftGetterDelegate>(WrappedType, nameof(Left));
            OperatorTokenGetterFunc = LightupHelper.CreateGetAccessor<OperatorTokenGetterDelegate>(WrappedType, nameof(OperatorToken));
            RightGetterFunc = LightupHelper.CreateGetAccessor<RightGetterDelegate>(WrappedType, nameof(Right));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithLeftFunc2 = LightupHelper.CreateMethodAccessor<WithLeftDelegate2>(WrappedType, nameof(WithLeft));
            WithOperatorTokenFunc3 = LightupHelper.CreateMethodAccessor<WithOperatorTokenDelegate3>(WrappedType, nameof(WithOperatorToken));
            WithRightFunc4 = LightupHelper.CreateMethodAccessor<WithRightDelegate4>(WrappedType, nameof(WithRight));
        }

        private BinaryPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly PatternSyntax Left
        {
            get => LeftGetterFunc(wrappedObject);
        }

        public readonly SyntaxToken OperatorToken
        {
            get => OperatorTokenGetterFunc(wrappedObject);
        }

        public readonly PatternSyntax Right
        {
            get => RightGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(BinaryPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BinaryPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new BinaryPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly BinaryPatternSyntaxWrapper Update(PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right)
            => UpdateFunc1(wrappedObject, left, operatorToken, right);

        public readonly BinaryPatternSyntaxWrapper WithLeft(PatternSyntax left)
            => WithLeftFunc2(wrappedObject, left);

        public readonly BinaryPatternSyntaxWrapper WithOperatorToken(SyntaxToken operatorToken)
            => WithOperatorTokenFunc3(wrappedObject, operatorToken);

        public readonly BinaryPatternSyntaxWrapper WithRight(PatternSyntax right)
            => WithRightFunc4(wrappedObject, right);
    }
}
