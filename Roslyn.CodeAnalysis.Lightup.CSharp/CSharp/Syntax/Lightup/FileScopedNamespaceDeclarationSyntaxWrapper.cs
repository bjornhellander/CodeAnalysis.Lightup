// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Added in Roslyn version 4.0.0.0</summary>
    public readonly struct FileScopedNamespaceDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FileScopedNamespaceDeclarationSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>> AttributeListsFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>> ExternsFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>> MembersFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxTokenList> ModifiersFunc;
        private static readonly Func<MemberDeclarationSyntax?, NameSyntax> NameFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken> NamespaceKeywordFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken> SemicolonTokenFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>> UsingsFunc;

        private static readonly Action<MemberDeclarationSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<MemberDeclarationSyntax?, AttributeListSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper> AddAttributeListsFunc1;
        private static readonly Func<MemberDeclarationSyntax?, ExternAliasDirectiveSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper> AddExternsFunc2;
        private static readonly Func<MemberDeclarationSyntax?, MemberDeclarationSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper> AddMembersFunc3;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken[], FileScopedNamespaceDeclarationSyntaxWrapper> AddModifiersFunc4;
        private static readonly Func<MemberDeclarationSyntax?, UsingDirectiveSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper> AddUsingsFunc5;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, NameSyntax, SyntaxToken, SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<MemberDeclarationSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper> UpdateFunc6;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper> WithAttributeListsFunc7;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper> WithExternsFunc8;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper> WithMembersFunc9;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxTokenList, FileScopedNamespaceDeclarationSyntaxWrapper> WithModifiersFunc10;
        private static readonly Func<MemberDeclarationSyntax?, NameSyntax, FileScopedNamespaceDeclarationSyntaxWrapper> WithNameFunc11;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken, FileScopedNamespaceDeclarationSyntaxWrapper> WithNamespaceKeywordFunc12;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken, FileScopedNamespaceDeclarationSyntaxWrapper> WithSemicolonTokenFunc13;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper> WithUsingsFunc14;

        private readonly MemberDeclarationSyntax? wrappedObject;

        static FileScopedNamespaceDeclarationSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            AttributeListsFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>>(WrappedType, nameof(AttributeLists));
            ExternsFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>>(WrappedType, nameof(Externs));
            MembersFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>>(WrappedType, nameof(Members));
            ModifiersFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxTokenList>(WrappedType, nameof(Modifiers));
            NameFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, NameSyntax>(WrappedType, nameof(Name));
            NamespaceKeywordFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(NamespaceKeyword));
            SemicolonTokenFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(SemicolonToken));
            UsingsFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>>(WrappedType, nameof(Usings));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<MemberDeclarationSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, AttributeListSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddAttributeLists));
            AddExternsFunc2 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, ExternAliasDirectiveSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddExterns));
            AddMembersFunc3 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, MemberDeclarationSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddMembers));
            AddModifiersFunc4 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxToken[], FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddModifiers));
            AddUsingsFunc5 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, UsingDirectiveSyntax[], FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddUsings));
            UpdateFunc6 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, NameSyntax, SyntaxToken, SyntaxList<ExternAliasDirectiveSyntax>, SyntaxList<UsingDirectiveSyntax>, SyntaxList<MemberDeclarationSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(Update));
            WithAttributeListsFunc7 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithAttributeLists));
            WithExternsFunc8 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithExterns));
            WithMembersFunc9 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithMembers));
            WithModifiersFunc10 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxTokenList, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithModifiers));
            WithNameFunc11 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, NameSyntax, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithName));
            WithNamespaceKeywordFunc12 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxToken, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithNamespaceKeyword));
            WithSemicolonTokenFunc13 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxToken, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithSemicolonToken));
            WithUsingsFunc14 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>, FileScopedNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithUsings));
        }

        private FileScopedNamespaceDeclarationSyntaxWrapper(MemberDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
            => AttributeListsFunc(wrappedObject);

        public readonly SyntaxList<ExternAliasDirectiveSyntax> Externs
            => ExternsFunc(wrappedObject);

        public readonly SyntaxList<MemberDeclarationSyntax> Members
            => MembersFunc(wrappedObject);

        public readonly SyntaxTokenList Modifiers
            => ModifiersFunc(wrappedObject);

        public readonly NameSyntax Name
            => NameFunc(wrappedObject);

        public readonly SyntaxToken NamespaceKeyword
            => NamespaceKeywordFunc(wrappedObject);

        public readonly SyntaxToken SemicolonToken
            => SemicolonTokenFunc(wrappedObject);

        public readonly SyntaxList<UsingDirectiveSyntax> Usings
            => UsingsFunc(wrappedObject);

        public static implicit operator MemberDeclarationSyntax?(FileScopedNamespaceDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static FileScopedNamespaceDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<MemberDeclarationSyntax>(obj, WrappedType);
            return new FileScopedNamespaceDeclarationSyntaxWrapper(obj2);
        }

        public MemberDeclarationSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddExterns(params ExternAliasDirectiveSyntax[] items)
            => AddExternsFunc2(wrappedObject, items);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddMembers(params MemberDeclarationSyntax[] items)
            => AddMembersFunc3(wrappedObject, items);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc4(wrappedObject, items);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddUsings(params UsingDirectiveSyntax[] items)
            => AddUsingsFunc5(wrappedObject, items);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken semicolonToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
            => UpdateFunc6(wrappedObject, attributeLists, modifiers, namespaceKeyword, name, semicolonToken, externs, usings, members);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc7(wrappedObject, attributeLists);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithExterns(SyntaxList<ExternAliasDirectiveSyntax> externs)
            => WithExternsFunc8(wrappedObject, externs);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc9(wrappedObject, members);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc10(wrappedObject, modifiers);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithName(NameSyntax name)
            => WithNameFunc11(wrappedObject, name);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithNamespaceKeyword(SyntaxToken namespaceKeyword)
            => WithNamespaceKeywordFunc12(wrappedObject, namespaceKeyword);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithSemicolonToken(SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc13(wrappedObject, semicolonToken);

        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithUsings(SyntaxList<UsingDirectiveSyntax> usings)
            => WithUsingsFunc14(wrappedObject, usings);
    }
}
