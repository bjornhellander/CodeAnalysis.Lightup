// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in version 4.0.0.0 of Roslyn.</summary>
    public readonly struct FileScopedNamespaceDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FileScopedNamespaceDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxList<ExternAliasDirectiveSyntax> ExternsGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxList<MemberDeclarationSyntax> MembersGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate NameSyntax NameGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxToken NamespaceKeywordGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxToken SemicolonTokenGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxList<UsingDirectiveSyntax> UsingsGetterDelegate(MemberDeclarationSyntax? _obj);

        private delegate void AcceptDelegate0(MemberDeclarationSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper AddAttributeListsDelegate1(MemberDeclarationSyntax? _obj, params AttributeListSyntax[] items);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper AddExternsDelegate2(MemberDeclarationSyntax? _obj, params ExternAliasDirectiveSyntax[] items);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper AddMembersDelegate3(MemberDeclarationSyntax? _obj, params MemberDeclarationSyntax[] items);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper AddModifiersDelegate4(MemberDeclarationSyntax? _obj, params SyntaxToken[] items);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper AddUsingsDelegate5(MemberDeclarationSyntax? _obj, params UsingDirectiveSyntax[] items);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper UpdateDelegate6(MemberDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken semicolonToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithAttributeListsDelegate7(MemberDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithExternsDelegate8(MemberDeclarationSyntax? _obj, SyntaxList<ExternAliasDirectiveSyntax> externs);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithMembersDelegate9(MemberDeclarationSyntax? _obj, SyntaxList<MemberDeclarationSyntax> members);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithModifiersDelegate10(MemberDeclarationSyntax? _obj, SyntaxTokenList modifiers);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithNameDelegate11(MemberDeclarationSyntax? _obj, NameSyntax name);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithNamespaceKeywordDelegate12(MemberDeclarationSyntax? _obj, SyntaxToken namespaceKeyword);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithSemicolonTokenDelegate13(MemberDeclarationSyntax? _obj, SyntaxToken semicolonToken);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper WithUsingsDelegate14(MemberDeclarationSyntax? _obj, SyntaxList<UsingDirectiveSyntax> usings);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;
        private static readonly ExternsGetterDelegate ExternsGetterFunc;
        private static readonly MembersGetterDelegate MembersGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;
        private static readonly NameGetterDelegate NameGetterFunc;
        private static readonly NamespaceKeywordGetterDelegate NamespaceKeywordGetterFunc;
        private static readonly SemicolonTokenGetterDelegate SemicolonTokenGetterFunc;
        private static readonly UsingsGetterDelegate UsingsGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddAttributeListsDelegate1 AddAttributeListsFunc1;
        private static readonly AddExternsDelegate2 AddExternsFunc2;
        private static readonly AddMembersDelegate3 AddMembersFunc3;
        private static readonly AddModifiersDelegate4 AddModifiersFunc4;
        private static readonly AddUsingsDelegate5 AddUsingsFunc5;
        private static readonly UpdateDelegate6 UpdateFunc6;
        private static readonly WithAttributeListsDelegate7 WithAttributeListsFunc7;
        private static readonly WithExternsDelegate8 WithExternsFunc8;
        private static readonly WithMembersDelegate9 WithMembersFunc9;
        private static readonly WithModifiersDelegate10 WithModifiersFunc10;
        private static readonly WithNameDelegate11 WithNameFunc11;
        private static readonly WithNamespaceKeywordDelegate12 WithNamespaceKeywordFunc12;
        private static readonly WithSemicolonTokenDelegate13 WithSemicolonTokenFunc13;
        private static readonly WithUsingsDelegate14 WithUsingsFunc14;

        private readonly MemberDeclarationSyntax? wrappedObject;

        static FileScopedNamespaceDeclarationSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));
            ExternsGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExternsGetterDelegate>(WrappedType, nameof(Externs));
            MembersGetterFunc = LightupHelper.CreateInstanceGetAccessor<MembersGetterDelegate>(WrappedType, nameof(Members));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));
            NameGetterFunc = LightupHelper.CreateInstanceGetAccessor<NameGetterDelegate>(WrappedType, nameof(Name));
            NamespaceKeywordGetterFunc = LightupHelper.CreateInstanceGetAccessor<NamespaceKeywordGetterDelegate>(WrappedType, nameof(NamespaceKeyword));
            SemicolonTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<SemicolonTokenGetterDelegate>(WrappedType, nameof(SemicolonToken));
            UsingsGetterFunc = LightupHelper.CreateInstanceGetAccessor<UsingsGetterDelegate>(WrappedType, nameof(Usings));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate1>(WrappedType, nameof(AddAttributeLists));
            AddExternsFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddExternsDelegate2>(WrappedType, nameof(AddExterns));
            AddMembersFunc3 = LightupHelper.CreateInstanceMethodAccessor<AddMembersDelegate3>(WrappedType, nameof(AddMembers));
            AddModifiersFunc4 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate4>(WrappedType, nameof(AddModifiers));
            AddUsingsFunc5 = LightupHelper.CreateInstanceMethodAccessor<AddUsingsDelegate5>(WrappedType, nameof(AddUsings));
            UpdateFunc6 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate6>(WrappedType, nameof(Update));
            WithAttributeListsFunc7 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate7>(WrappedType, nameof(WithAttributeLists));
            WithExternsFunc8 = LightupHelper.CreateInstanceMethodAccessor<WithExternsDelegate8>(WrappedType, nameof(WithExterns));
            WithMembersFunc9 = LightupHelper.CreateInstanceMethodAccessor<WithMembersDelegate9>(WrappedType, nameof(WithMembers));
            WithModifiersFunc10 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate10>(WrappedType, nameof(WithModifiers));
            WithNameFunc11 = LightupHelper.CreateInstanceMethodAccessor<WithNameDelegate11>(WrappedType, nameof(WithName));
            WithNamespaceKeywordFunc12 = LightupHelper.CreateInstanceMethodAccessor<WithNamespaceKeywordDelegate12>(WrappedType, nameof(WithNamespaceKeyword));
            WithSemicolonTokenFunc13 = LightupHelper.CreateInstanceMethodAccessor<WithSemicolonTokenDelegate13>(WrappedType, nameof(WithSemicolonToken));
            WithUsingsFunc14 = LightupHelper.CreateInstanceMethodAccessor<WithUsingsDelegate14>(WrappedType, nameof(WithUsings));
        }

        private FileScopedNamespaceDeclarationSyntaxWrapper(MemberDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxList<AttributeListSyntax> AttributeLists
        {
            get => AttributeListsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxList<ExternAliasDirectiveSyntax> Externs
        {
            get => ExternsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxList<MemberDeclarationSyntax> Members
        {
            get => MembersGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxTokenList Modifiers
        {
            get => ModifiersGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly NameSyntax Name
        {
            get => NameGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxToken NamespaceKeyword
        {
            get => NamespaceKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxToken SemicolonToken
        {
            get => SemicolonTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly SyntaxList<UsingDirectiveSyntax> Usings
        {
            get => UsingsGetterFunc(wrappedObject);
        }

        public static implicit operator MemberDeclarationSyntax?(FileScopedNamespaceDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FileScopedNamespaceDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<MemberDeclarationSyntax>(obj, WrappedType);
            return new FileScopedNamespaceDeclarationSyntaxWrapper(obj2);
        }

        public MemberDeclarationSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddExterns(params ExternAliasDirectiveSyntax[] items)
            => AddExternsFunc2(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddMembers(params MemberDeclarationSyntax[] items)
            => AddMembersFunc3(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc4(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper AddUsings(params UsingDirectiveSyntax[] items)
            => AddUsingsFunc5(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken semicolonToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
            => UpdateFunc6(wrappedObject, attributeLists, modifiers, namespaceKeyword, name, semicolonToken, externs, usings, members);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc7(wrappedObject, attributeLists);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithExterns(SyntaxList<ExternAliasDirectiveSyntax> externs)
            => WithExternsFunc8(wrappedObject, externs);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc9(wrappedObject, members);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc10(wrappedObject, modifiers);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithName(NameSyntax name)
            => WithNameFunc11(wrappedObject, name);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithNamespaceKeyword(SyntaxToken namespaceKeyword)
            => WithNamespaceKeywordFunc12(wrappedObject, namespaceKeyword);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithSemicolonToken(SyntaxToken semicolonToken)
            => WithSemicolonTokenFunc13(wrappedObject, semicolonToken);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public readonly FileScopedNamespaceDeclarationSyntaxWrapper WithUsings(SyntaxList<UsingDirectiveSyntax> usings)
            => WithUsingsFunc14(wrappedObject, usings);
    }
}
