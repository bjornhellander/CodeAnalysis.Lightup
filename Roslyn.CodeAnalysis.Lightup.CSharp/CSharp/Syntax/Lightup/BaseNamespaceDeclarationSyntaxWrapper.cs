// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.BaseNamespaceDeclarationSyntax. Added in version 4.0.0.0.</summary>
    public readonly partial struct BaseNamespaceDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseNamespaceDeclarationSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax> ExternsGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> MembersGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax NameGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken NamespaceKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax> UsingsGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddAttributeListsDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddExternsDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddMembersDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddModifiersDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.SyntaxToken[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddUsingsDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, params Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax[] items);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithAttributeListsDelegate5(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithExternsDelegate6(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax> externs);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithMembersDelegate7(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithModifiersDelegate8(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxTokenList modifiers);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithNameDelegate9(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithNamespaceKeywordDelegate10(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithUsingsDelegate11(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? _obj, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax> usings);

        private static readonly ExternsGetterDelegate ExternsGetterFunc;
        private static readonly MembersGetterDelegate MembersGetterFunc;
        private static readonly NameGetterDelegate NameGetterFunc;
        private static readonly NamespaceKeywordGetterDelegate NamespaceKeywordGetterFunc;
        private static readonly UsingsGetterDelegate UsingsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddExternsDelegate1 AddExternsFunc1;
        private static readonly AddMembersDelegate2 AddMembersFunc2;
        private static readonly AddModifiersDelegate3 AddModifiersFunc3;
        private static readonly AddUsingsDelegate4 AddUsingsFunc4;
        private static readonly WithAttributeListsDelegate5 WithAttributeListsFunc5;
        private static readonly WithExternsDelegate6 WithExternsFunc6;
        private static readonly WithMembersDelegate7 WithMembersFunc7;
        private static readonly WithModifiersDelegate8 WithModifiersFunc8;
        private static readonly WithNameDelegate9 WithNameFunc9;
        private static readonly WithNamespaceKeywordDelegate10 WithNamespaceKeywordFunc10;
        private static readonly WithUsingsDelegate11 WithUsingsFunc11;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? wrappedObject;

        static BaseNamespaceDeclarationSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ExternsGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ExternsGetterDelegate>(WrappedType, nameof(Externs));
            MembersGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<MembersGetterDelegate>(WrappedType, nameof(Members));
            NameGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<NameGetterDelegate>(WrappedType, nameof(Name));
            NamespaceKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<NamespaceKeywordGetterDelegate>(WrappedType, nameof(NamespaceKeyword));
            UsingsGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<UsingsGetterDelegate>(WrappedType, nameof(Usings));

            AddAttributeListsFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(WrappedType, "AddAttributeLists", "itemsAttributeListSyntax[]");
            AddExternsFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddExternsDelegate1>(WrappedType, "AddExterns", "itemsExternAliasDirectiveSyntax[]");
            AddMembersFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddMembersDelegate2>(WrappedType, "AddMembers", "itemsMemberDeclarationSyntax[]");
            AddModifiersFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate3>(WrappedType, "AddModifiers", "itemsSyntaxToken[]");
            AddUsingsFunc4 = CSharpLightupHelper.CreateInstanceMethodAccessor<AddUsingsDelegate4>(WrappedType, "AddUsings", "itemsUsingDirectiveSyntax[]");
            WithAttributeListsFunc5 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate5>(WrappedType, "WithAttributeLists", "attributeListsSyntaxList`1");
            WithExternsFunc6 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithExternsDelegate6>(WrappedType, "WithExterns", "externsSyntaxList`1");
            WithMembersFunc7 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithMembersDelegate7>(WrappedType, "WithMembers", "membersSyntaxList`1");
            WithModifiersFunc8 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate8>(WrappedType, "WithModifiers", "modifiersSyntaxTokenList");
            WithNameFunc9 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithNameDelegate9>(WrappedType, "WithName", "nameNameSyntax");
            WithNamespaceKeywordFunc10 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithNamespaceKeywordDelegate10>(WrappedType, "WithNamespaceKeyword", "namespaceKeywordSyntaxToken");
            WithUsingsFunc11 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithUsingsDelegate11>(WrappedType, "WithUsings", "usingsSyntaxList`1");
        }

        private BaseNamespaceDeclarationSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax> Externs
        {
            get => ExternsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> Members
        {
            get => MembersGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax Name
        {
            get => NameGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken NamespaceKeyword
        {
            get => NamespaceKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax> Usings
        {
            get => UsingsGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax?(BaseNamespaceDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        public static BaseNamespaceDeclarationSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>(obj, WrappedType);
            return new BaseNamespaceDeclarationSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddAttributeLists(params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddExterns(params Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax[] items)
            => AddExternsFunc1(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddMembers(params Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[] items)
            => AddMembersFunc2(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items)
            => AddModifiersFunc3(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper AddUsings(params Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax[] items)
            => AddUsingsFunc4(wrappedObject, items);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc5(wrappedObject, attributeLists);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithExterns(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax> externs)
            => WithExternsFunc6(wrappedObject, externs);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax> members)
            => WithMembersFunc7(wrappedObject, members);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers)
            => WithModifiersFunc8(wrappedObject, modifiers);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name)
            => WithNameFunc9(wrappedObject, name);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithNamespaceKeyword(Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword)
            => WithNamespaceKeywordFunc10(wrappedObject, namespaceKeyword);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseNamespaceDeclarationSyntaxWrapper WithUsings(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax> usings)
            => WithUsingsFunc11(wrappedObject, usings);
    }
}
