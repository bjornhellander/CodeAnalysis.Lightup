// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct BaseNamespaceDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseNamespaceDeclarationSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<ExternAliasDirectiveSyntax> ExternsGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxList<MemberDeclarationSyntax> MembersGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate NameSyntax NameGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxToken NamespaceKeywordGetterDelegate(MemberDeclarationSyntax? _obj);
        private delegate SyntaxList<UsingDirectiveSyntax> UsingsGetterDelegate(MemberDeclarationSyntax? _obj);

        private delegate BaseNamespaceDeclarationSyntaxWrapper AddAttributeListsDelegate0(MemberDeclarationSyntax? _obj, params AttributeListSyntax[] items);
        private delegate BaseNamespaceDeclarationSyntaxWrapper AddExternsDelegate1(MemberDeclarationSyntax? _obj, params ExternAliasDirectiveSyntax[] items);
        private delegate BaseNamespaceDeclarationSyntaxWrapper AddMembersDelegate2(MemberDeclarationSyntax? _obj, params MemberDeclarationSyntax[] items);
        private delegate BaseNamespaceDeclarationSyntaxWrapper AddModifiersDelegate3(MemberDeclarationSyntax? _obj, params SyntaxToken[] items);
        private delegate BaseNamespaceDeclarationSyntaxWrapper AddUsingsDelegate4(MemberDeclarationSyntax? _obj, params UsingDirectiveSyntax[] items);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithAttributeListsDelegate5(MemberDeclarationSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithExternsDelegate6(MemberDeclarationSyntax? _obj, SyntaxList<ExternAliasDirectiveSyntax> externs);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithMembersDelegate7(MemberDeclarationSyntax? _obj, SyntaxList<MemberDeclarationSyntax> members);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithModifiersDelegate8(MemberDeclarationSyntax? _obj, SyntaxTokenList modifiers);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithNameDelegate9(MemberDeclarationSyntax? _obj, NameSyntax name);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithNamespaceKeywordDelegate10(MemberDeclarationSyntax? _obj, SyntaxToken namespaceKeyword);
        private delegate BaseNamespaceDeclarationSyntaxWrapper WithUsingsDelegate11(MemberDeclarationSyntax? _obj, SyntaxList<UsingDirectiveSyntax> usings);

        private static readonly ExternsGetterDelegate ExternsGetterFunc;
        private static readonly MembersGetterDelegate MembersGetterFunc;
        private static readonly NameGetterDelegate NameGetterFunc;
        private static readonly NamespaceKeywordGetterDelegate NamespaceKeywordGetterFunc;
        private static readonly UsingsGetterDelegate UsingsGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddExternsDelegate1 AddExternsFunc1;
        private static readonly AddMembersDelegate2 AddMembersFunc2;
        private static readonly AddModifiersDelegate3 AddModifiersFunc3;
        private static readonly AddUsingsDelegate4 AddUsingsFunc4;
        private static readonly WithAttributeListsDelegate5 WithAttributeListsFunc5;
        private static readonly WithExternsDelegate6 WithExternsFunc6;
        private static readonly WithMembersDelegate7 WithMembersFunc7;
        private static readonly WithModifiersDelegate8 WithModifiersFunc8;
        private static readonly WithNameDelegate9 WithNameFunc9;
        private static readonly WithNamespaceKeywordDelegate10 WithNamespaceKeywordFunc10;
        private static readonly WithUsingsDelegate11 WithUsingsFunc11;

        private readonly MemberDeclarationSyntax? wrappedObject;

        static BaseNamespaceDeclarationSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ExternsGetterFunc = LightupHelper.CreateGetAccessor<ExternsGetterDelegate>(WrappedType, nameof(Externs));
            MembersGetterFunc = LightupHelper.CreateGetAccessor<MembersGetterDelegate>(WrappedType, nameof(Members));
            NameGetterFunc = LightupHelper.CreateGetAccessor<NameGetterDelegate>(WrappedType, nameof(Name));
            NamespaceKeywordGetterFunc = LightupHelper.CreateGetAccessor<NamespaceKeywordGetterDelegate>(WrappedType, nameof(NamespaceKeyword));
            UsingsGetterFunc = LightupHelper.CreateGetAccessor<UsingsGetterDelegate>(WrappedType, nameof(Usings));

            AddAttributeListsFunc0 = LightupHelper.CreateMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            AddExternsFunc1 = LightupHelper.CreateMethodAccessor<AddExternsDelegate1>(WrappedType, nameof(AddExterns));
            AddMembersFunc2 = LightupHelper.CreateMethodAccessor<AddMembersDelegate2>(WrappedType, nameof(AddMembers));
            AddModifiersFunc3 = LightupHelper.CreateMethodAccessor<AddModifiersDelegate3>(WrappedType, nameof(AddModifiers));
            AddUsingsFunc4 = LightupHelper.CreateMethodAccessor<AddUsingsDelegate4>(WrappedType, nameof(AddUsings));
            WithAttributeListsFunc5 = LightupHelper.CreateMethodAccessor<WithAttributeListsDelegate5>(WrappedType, nameof(WithAttributeLists));
            WithExternsFunc6 = LightupHelper.CreateMethodAccessor<WithExternsDelegate6>(WrappedType, nameof(WithExterns));
            WithMembersFunc7 = LightupHelper.CreateMethodAccessor<WithMembersDelegate7>(WrappedType, nameof(WithMembers));
            WithModifiersFunc8 = LightupHelper.CreateMethodAccessor<WithModifiersDelegate8>(WrappedType, nameof(WithModifiers));
            WithNameFunc9 = LightupHelper.CreateMethodAccessor<WithNameDelegate9>(WrappedType, nameof(WithName));
            WithNamespaceKeywordFunc10 = LightupHelper.CreateMethodAccessor<WithNamespaceKeywordDelegate10>(WrappedType, nameof(WithNamespaceKeyword));
            WithUsingsFunc11 = LightupHelper.CreateMethodAccessor<WithUsingsDelegate11>(WrappedType, nameof(WithUsings));
        }

        private BaseNamespaceDeclarationSyntaxWrapper(MemberDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly SyntaxList<ExternAliasDirectiveSyntax> Externs
        {
            get => ExternsGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly SyntaxList<MemberDeclarationSyntax> Members
        {
            get => MembersGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly NameSyntax Name
        {
            get => NameGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly SyntaxToken NamespaceKeyword
        {
            get => NamespaceKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly SyntaxList<UsingDirectiveSyntax> Usings
        {
            get => UsingsGetterFunc(wrappedObject);
        }

        public static implicit operator MemberDeclarationSyntax?(BaseNamespaceDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static BaseNamespaceDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<MemberDeclarationSyntax>(obj, WrappedType);
            return new BaseNamespaceDeclarationSyntaxWrapper(obj2);
        }

        public MemberDeclarationSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper AddExterns(params ExternAliasDirectiveSyntax[] items)
            => AddExternsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper AddMembers(params MemberDeclarationSyntax[] items)
            => AddMembersFunc2(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc3(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper AddUsings(params UsingDirectiveSyntax[] items)
            => AddUsingsFunc4(wrappedObject, items);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc5(wrappedObject, attributeLists);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithExterns(SyntaxList<ExternAliasDirectiveSyntax> externs)
            => WithExternsFunc6(wrappedObject, externs);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc7(wrappedObject, members);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc8(wrappedObject, modifiers);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithName(NameSyntax name)
            => WithNameFunc9(wrappedObject, name);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithNamespaceKeyword(SyntaxToken namespaceKeyword)
            => WithNamespaceKeywordFunc10(wrappedObject, namespaceKeyword);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly BaseNamespaceDeclarationSyntaxWrapper WithUsings(SyntaxList<UsingDirectiveSyntax> usings)
            => WithUsingsFunc11(wrappedObject, usings);
    }
}
