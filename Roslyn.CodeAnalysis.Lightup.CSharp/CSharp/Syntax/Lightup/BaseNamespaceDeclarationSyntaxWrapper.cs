// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Added in Roslyn version 4.0.0.0</summary>
    public readonly struct BaseNamespaceDeclarationSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseNamespaceDeclarationSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>> ExternsFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>> MembersFunc;
        private static readonly Func<MemberDeclarationSyntax?, NameSyntax> NameFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken> NamespaceKeywordFunc;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>> UsingsFunc;

        private static readonly Func<MemberDeclarationSyntax?, AttributeListSyntax[], BaseNamespaceDeclarationSyntaxWrapper> AddAttributeListsFunc0;
        private static readonly Func<MemberDeclarationSyntax?, ExternAliasDirectiveSyntax[], BaseNamespaceDeclarationSyntaxWrapper> AddExternsFunc1;
        private static readonly Func<MemberDeclarationSyntax?, MemberDeclarationSyntax[], BaseNamespaceDeclarationSyntaxWrapper> AddMembersFunc2;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken[], BaseNamespaceDeclarationSyntaxWrapper> AddModifiersFunc3;
        private static readonly Func<MemberDeclarationSyntax?, UsingDirectiveSyntax[], BaseNamespaceDeclarationSyntaxWrapper> AddUsingsFunc4;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, BaseNamespaceDeclarationSyntaxWrapper> WithAttributeListsFunc5;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>, BaseNamespaceDeclarationSyntaxWrapper> WithExternsFunc6;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, BaseNamespaceDeclarationSyntaxWrapper> WithMembersFunc7;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxTokenList, BaseNamespaceDeclarationSyntaxWrapper> WithModifiersFunc8;
        private static readonly Func<MemberDeclarationSyntax?, NameSyntax, BaseNamespaceDeclarationSyntaxWrapper> WithNameFunc9;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxToken, BaseNamespaceDeclarationSyntaxWrapper> WithNamespaceKeywordFunc10;
        private static readonly Func<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>, BaseNamespaceDeclarationSyntaxWrapper> WithUsingsFunc11;

        private readonly MemberDeclarationSyntax? wrappedObject;

        static BaseNamespaceDeclarationSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            ExternsFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>>(WrappedType, nameof(Externs));
            MembersFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>>(WrappedType, nameof(Members));
            NameFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, NameSyntax>(WrappedType, nameof(Name));
            NamespaceKeywordFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxToken>(WrappedType, nameof(NamespaceKeyword));
            UsingsFunc = CommonLightupHelper.CreateGetAccessor<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>>(WrappedType, nameof(Usings));

            AddAttributeListsFunc0 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, AttributeListSyntax[], BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddAttributeLists));
            AddExternsFunc1 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, ExternAliasDirectiveSyntax[], BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddExterns));
            AddMembersFunc2 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, MemberDeclarationSyntax[], BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddMembers));
            AddModifiersFunc3 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxToken[], BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddModifiers));
            AddUsingsFunc4 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, UsingDirectiveSyntax[], BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(AddUsings));
            WithAttributeListsFunc5 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<AttributeListSyntax>, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithAttributeLists));
            WithExternsFunc6 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<ExternAliasDirectiveSyntax>, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithExterns));
            WithMembersFunc7 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<MemberDeclarationSyntax>, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithMembers));
            WithModifiersFunc8 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxTokenList, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithModifiers));
            WithNameFunc9 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, NameSyntax, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithName));
            WithNamespaceKeywordFunc10 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxToken, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithNamespaceKeyword));
            WithUsingsFunc11 = CommonLightupHelper.CreateMethodAccessor<MemberDeclarationSyntax?, SyntaxList<UsingDirectiveSyntax>, BaseNamespaceDeclarationSyntaxWrapper>(WrappedType, nameof(WithUsings));
        }

        private BaseNamespaceDeclarationSyntaxWrapper(MemberDeclarationSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<ExternAliasDirectiveSyntax> Externs
            => ExternsFunc(wrappedObject);

        public readonly SyntaxList<MemberDeclarationSyntax> Members
            => MembersFunc(wrappedObject);

        public readonly NameSyntax Name
            => NameFunc(wrappedObject);

        public readonly SyntaxToken NamespaceKeyword
            => NamespaceKeywordFunc(wrappedObject);

        public readonly SyntaxList<UsingDirectiveSyntax> Usings
            => UsingsFunc(wrappedObject);

        public static implicit operator MemberDeclarationSyntax?(BaseNamespaceDeclarationSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static BaseNamespaceDeclarationSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<MemberDeclarationSyntax>(obj, WrappedType);
            return new BaseNamespaceDeclarationSyntaxWrapper(obj2);
        }

        public MemberDeclarationSyntax? Unwrap()
            => wrappedObject;

        public readonly BaseNamespaceDeclarationSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        public readonly BaseNamespaceDeclarationSyntaxWrapper AddExterns(params ExternAliasDirectiveSyntax[] items)
            => AddExternsFunc1(wrappedObject, items);

        public readonly BaseNamespaceDeclarationSyntaxWrapper AddMembers(params MemberDeclarationSyntax[] items)
            => AddMembersFunc2(wrappedObject, items);

        public readonly BaseNamespaceDeclarationSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc3(wrappedObject, items);

        public readonly BaseNamespaceDeclarationSyntaxWrapper AddUsings(params UsingDirectiveSyntax[] items)
            => AddUsingsFunc4(wrappedObject, items);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc5(wrappedObject, attributeLists);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithExterns(SyntaxList<ExternAliasDirectiveSyntax> externs)
            => WithExternsFunc6(wrappedObject, externs);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithMembers(SyntaxList<MemberDeclarationSyntax> members)
            => WithMembersFunc7(wrappedObject, members);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc8(wrappedObject, modifiers);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithName(NameSyntax name)
            => WithNameFunc9(wrappedObject, name);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithNamespaceKeyword(SyntaxToken namespaceKeyword)
            => WithNamespaceKeywordFunc10(wrappedObject, namespaceKeyword);

        public readonly BaseNamespaceDeclarationSyntaxWrapper WithUsings(SyntaxList<UsingDirectiveSyntax> usings)
            => WithUsingsFunc11(wrappedObject, usings);
    }
}
