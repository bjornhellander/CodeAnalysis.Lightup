// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct PrimaryConstructorBaseTypeSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<BaseTypeSyntax?, ArgumentListSyntax> ArgumentListFunc;
        private static readonly Func<BaseTypeSyntax?, TypeSyntax> TypeFunc;

        private static readonly Action<BaseTypeSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<BaseTypeSyntax?, ArgumentSyntax[], PrimaryConstructorBaseTypeSyntaxWrapper> AddArgumentListArgumentsFunc1;
        private static readonly Func<BaseTypeSyntax?, TypeSyntax, ArgumentListSyntax, PrimaryConstructorBaseTypeSyntaxWrapper> UpdateFunc2;
        private static readonly Func<BaseTypeSyntax?, ArgumentListSyntax, PrimaryConstructorBaseTypeSyntaxWrapper> WithArgumentListFunc3;
        private static readonly Func<BaseTypeSyntax?, TypeSyntax, PrimaryConstructorBaseTypeSyntaxWrapper> WithTypeFunc4;

        private readonly BaseTypeSyntax? wrappedObject;

        static PrimaryConstructorBaseTypeSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentListFunc = LightupHelper.CreateGetAccessor<BaseTypeSyntax?, ArgumentListSyntax>(WrappedType, nameof(ArgumentList));
            TypeFunc = LightupHelper.CreateGetAccessor<BaseTypeSyntax?, TypeSyntax>(WrappedType, nameof(Type));

            AcceptFunc0 = LightupHelper.CreateVoidMethodAccessor<BaseTypeSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddArgumentListArgumentsFunc1 = LightupHelper.CreateMethodAccessor<BaseTypeSyntax?, ArgumentSyntax[], PrimaryConstructorBaseTypeSyntaxWrapper>(WrappedType, nameof(AddArgumentListArguments));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<BaseTypeSyntax?, TypeSyntax, ArgumentListSyntax, PrimaryConstructorBaseTypeSyntaxWrapper>(WrappedType, nameof(Update));
            WithArgumentListFunc3 = LightupHelper.CreateMethodAccessor<BaseTypeSyntax?, ArgumentListSyntax, PrimaryConstructorBaseTypeSyntaxWrapper>(WrappedType, nameof(WithArgumentList));
            WithTypeFunc4 = LightupHelper.CreateMethodAccessor<BaseTypeSyntax?, TypeSyntax, PrimaryConstructorBaseTypeSyntaxWrapper>(WrappedType, nameof(WithType));
        }

        private PrimaryConstructorBaseTypeSyntaxWrapper(BaseTypeSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly ArgumentListSyntax ArgumentList
            => ArgumentListFunc(wrappedObject);

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator BaseTypeSyntax?(PrimaryConstructorBaseTypeSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static PrimaryConstructorBaseTypeSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<BaseTypeSyntax>(obj, WrappedType);
            return new PrimaryConstructorBaseTypeSyntaxWrapper(obj2);
        }

        public BaseTypeSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly PrimaryConstructorBaseTypeSyntaxWrapper AddArgumentListArguments(params ArgumentSyntax[] items)
            => AddArgumentListArgumentsFunc1(wrappedObject, items);

        public readonly PrimaryConstructorBaseTypeSyntaxWrapper Update(TypeSyntax type, ArgumentListSyntax argumentList)
            => UpdateFunc2(wrappedObject, type, argumentList);

        public readonly PrimaryConstructorBaseTypeSyntaxWrapper WithArgumentList(ArgumentListSyntax argumentList)
            => WithArgumentListFunc3(wrappedObject, argumentList);

        public readonly PrimaryConstructorBaseTypeSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc4(wrappedObject, type);
    }
}
