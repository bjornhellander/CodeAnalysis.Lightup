// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct PrimaryConstructorBaseTypeSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax";

        public static readonly Type? WrappedType;

        private delegate ArgumentListSyntax ArgumentListGetterDelegate(BaseTypeSyntax? _obj);
        private delegate TypeSyntax TypeGetterDelegate(BaseTypeSyntax? _obj);

        private delegate void AcceptDelegate0(BaseTypeSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper AddArgumentListArgumentsDelegate1(BaseTypeSyntax? _obj, params ArgumentSyntax[] items);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper UpdateDelegate2(BaseTypeSyntax? _obj, TypeSyntax type, ArgumentListSyntax argumentList);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper WithArgumentListDelegate3(BaseTypeSyntax? _obj, ArgumentListSyntax argumentList);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper WithTypeDelegate4(BaseTypeSyntax? _obj, TypeSyntax type);

        private static readonly ArgumentListGetterDelegate ArgumentListGetterFunc;
        private static readonly TypeGetterDelegate TypeGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddArgumentListArgumentsDelegate1 AddArgumentListArgumentsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithArgumentListDelegate3 WithArgumentListFunc3;
        private static readonly WithTypeDelegate4 WithTypeFunc4;

        private readonly BaseTypeSyntax? wrappedObject;

        static PrimaryConstructorBaseTypeSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentListGetterFunc = LightupHelper.CreateGetAccessor<ArgumentListGetterDelegate>(WrappedType, nameof(ArgumentList));
            TypeGetterFunc = LightupHelper.CreateGetAccessor<TypeGetterDelegate>(WrappedType, nameof(Type));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddArgumentListArgumentsFunc1 = LightupHelper.CreateMethodAccessor<AddArgumentListArgumentsDelegate1>(WrappedType, nameof(AddArgumentListArguments));
            UpdateFunc2 = LightupHelper.CreateMethodAccessor<UpdateDelegate2>(WrappedType, nameof(Update));
            WithArgumentListFunc3 = LightupHelper.CreateMethodAccessor<WithArgumentListDelegate3>(WrappedType, nameof(WithArgumentList));
            WithTypeFunc4 = LightupHelper.CreateMethodAccessor<WithTypeDelegate4>(WrappedType, nameof(WithType));
        }

        private PrimaryConstructorBaseTypeSyntaxWrapper(BaseTypeSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ArgumentListSyntax ArgumentList
        {
            get => ArgumentListGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly TypeSyntax Type
        {
            get => TypeGetterFunc(wrappedObject);
        }

        public static implicit operator BaseTypeSyntax?(PrimaryConstructorBaseTypeSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static PrimaryConstructorBaseTypeSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<BaseTypeSyntax>(obj, WrappedType);
            return new PrimaryConstructorBaseTypeSyntaxWrapper(obj2);
        }

        public BaseTypeSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly PrimaryConstructorBaseTypeSyntaxWrapper AddArgumentListArguments(params ArgumentSyntax[] items)
            => AddArgumentListArgumentsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly PrimaryConstructorBaseTypeSyntaxWrapper Update(TypeSyntax type, ArgumentListSyntax argumentList)
            => UpdateFunc2(wrappedObject, type, argumentList);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly PrimaryConstructorBaseTypeSyntaxWrapper WithArgumentList(ArgumentListSyntax argumentList)
            => WithArgumentListFunc3(wrappedObject, argumentList);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly PrimaryConstructorBaseTypeSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc4(wrappedObject, type);
    }
}
