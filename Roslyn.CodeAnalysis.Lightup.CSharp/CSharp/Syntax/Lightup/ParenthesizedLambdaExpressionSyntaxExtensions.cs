// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public static class ParenthesizedLambdaExpressionSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsGetterDelegate(ParenthesizedLambdaExpressionSyntax? _obj);
        private delegate BlockSyntax? BlockGetterDelegate(ParenthesizedLambdaExpressionSyntax? _obj);
        private delegate ExpressionSyntax? ExpressionBodyGetterDelegate(ParenthesizedLambdaExpressionSyntax? _obj);
        private delegate SyntaxTokenList ModifiersGetterDelegate(ParenthesizedLambdaExpressionSyntax? _obj);
        private delegate TypeSyntax? ReturnTypeGetterDelegate(ParenthesizedLambdaExpressionSyntax? _obj);

        private delegate ParenthesizedLambdaExpressionSyntax AddAttributeListsDelegate0(ParenthesizedLambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate ParenthesizedLambdaExpressionSyntax AddBlockAttributeListsDelegate1(ParenthesizedLambdaExpressionSyntax? _obj, params AttributeListSyntax[] items);
        private delegate ParenthesizedLambdaExpressionSyntax AddBlockStatementsDelegate2(ParenthesizedLambdaExpressionSyntax? _obj, params StatementSyntax[] items);
        private delegate ParenthesizedLambdaExpressionSyntax AddModifiersDelegate3(ParenthesizedLambdaExpressionSyntax? _obj, params SyntaxToken[] items);
        private delegate ParenthesizedLambdaExpressionSyntax UpdateDelegate4(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax UpdateDelegate5(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxToken asyncKeyword, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax UpdateDelegate6(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax UpdateDelegate7(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax WithAttributeListsDelegate8(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate ParenthesizedLambdaExpressionSyntax WithBlockDelegate9(ParenthesizedLambdaExpressionSyntax? _obj, BlockSyntax? block);
        private delegate ParenthesizedLambdaExpressionSyntax WithExpressionBodyDelegate10(ParenthesizedLambdaExpressionSyntax? _obj, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax WithModifiersDelegate11(ParenthesizedLambdaExpressionSyntax? _obj, SyntaxTokenList modifiers);
        private delegate ParenthesizedLambdaExpressionSyntax WithReturnTypeDelegate12(ParenthesizedLambdaExpressionSyntax? _obj, TypeSyntax? returnType);

        private static readonly AttributeListsGetterDelegate AttributeListsGetterFunc;
        private static readonly BlockGetterDelegate BlockGetterFunc;
        private static readonly ExpressionBodyGetterDelegate ExpressionBodyGetterFunc;
        private static readonly ModifiersGetterDelegate ModifiersGetterFunc;
        private static readonly ReturnTypeGetterDelegate ReturnTypeGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly AddBlockAttributeListsDelegate1 AddBlockAttributeListsFunc1;
        private static readonly AddBlockStatementsDelegate2 AddBlockStatementsFunc2;
        private static readonly AddModifiersDelegate3 AddModifiersFunc3;
        private static readonly UpdateDelegate4 UpdateFunc4;
        private static readonly UpdateDelegate5 UpdateFunc5;
        private static readonly UpdateDelegate6 UpdateFunc6;
        private static readonly UpdateDelegate7 UpdateFunc7;
        private static readonly WithAttributeListsDelegate8 WithAttributeListsFunc8;
        private static readonly WithBlockDelegate9 WithBlockFunc9;
        private static readonly WithExpressionBodyDelegate10 WithExpressionBodyFunc10;
        private static readonly WithModifiersDelegate11 WithModifiersFunc11;
        private static readonly WithReturnTypeDelegate12 WithReturnTypeFunc12;

        static ParenthesizedLambdaExpressionSyntaxExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AttributeListsGetterDelegate>(WrappedType, nameof(AttributeLists));
            BlockGetterFunc = LightupHelper.CreateInstanceGetAccessor<BlockGetterDelegate>(WrappedType, nameof(Block));
            ExpressionBodyGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExpressionBodyGetterDelegate>(WrappedType, nameof(ExpressionBody));
            ModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<ModifiersGetterDelegate>(WrappedType, nameof(Modifiers));
            ReturnTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<ReturnTypeGetterDelegate>(WrappedType, nameof(ReturnType));

            AddAttributeListsFunc0 = LightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(WrappedType, nameof(AddAttributeLists));
            AddBlockAttributeListsFunc1 = LightupHelper.CreateInstanceMethodAccessor<AddBlockAttributeListsDelegate1>(WrappedType, nameof(AddBlockAttributeLists));
            AddBlockStatementsFunc2 = LightupHelper.CreateInstanceMethodAccessor<AddBlockStatementsDelegate2>(WrappedType, nameof(AddBlockStatements));
            AddModifiersFunc3 = LightupHelper.CreateInstanceMethodAccessor<AddModifiersDelegate3>(WrappedType, nameof(AddModifiers));
            UpdateFunc4 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate4>(WrappedType, nameof(Update));
            UpdateFunc5 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate5>(WrappedType, nameof(Update));
            UpdateFunc6 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate6>(WrappedType, nameof(Update));
            UpdateFunc7 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate7>(WrappedType, nameof(Update));
            WithAttributeListsFunc8 = LightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate8>(WrappedType, nameof(WithAttributeLists));
            WithBlockFunc9 = LightupHelper.CreateInstanceMethodAccessor<WithBlockDelegate9>(WrappedType, nameof(WithBlock));
            WithExpressionBodyFunc10 = LightupHelper.CreateInstanceMethodAccessor<WithExpressionBodyDelegate10>(WrappedType, nameof(WithExpressionBody));
            WithModifiersFunc11 = LightupHelper.CreateInstanceMethodAccessor<WithModifiersDelegate11>(WrappedType, nameof(WithModifiers));
            WithReturnTypeFunc12 = LightupHelper.CreateInstanceMethodAccessor<WithReturnTypeDelegate12>(WrappedType, nameof(WithReturnType));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static SyntaxList<AttributeListSyntax> AttributeLists(this ParenthesizedLambdaExpressionSyntax _obj)
            => AttributeListsGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static BlockSyntax? Block(this ParenthesizedLambdaExpressionSyntax _obj)
            => BlockGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ExpressionSyntax? ExpressionBody(this ParenthesizedLambdaExpressionSyntax _obj)
            => ExpressionBodyGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxTokenList Modifiers(this ParenthesizedLambdaExpressionSyntax _obj)
            => ModifiersGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static TypeSyntax? ReturnType(this ParenthesizedLambdaExpressionSyntax _obj)
            => ReturnTypeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax AddAttributeLists(this ParenthesizedLambdaExpressionSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddAttributeListsFunc0(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax AddBlockAttributeLists(this ParenthesizedLambdaExpressionSyntax wrappedObject, params AttributeListSyntax[] items)
            => AddBlockAttributeListsFunc1(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax AddBlockStatements(this ParenthesizedLambdaExpressionSyntax wrappedObject, params StatementSyntax[] items)
            => AddBlockStatementsFunc2(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax AddModifiers(this ParenthesizedLambdaExpressionSyntax wrappedObject, params SyntaxToken[] items)
            => AddModifiersFunc3(wrappedObject, items);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax Update(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc4(wrappedObject, modifiers, parameterList, arrowToken, block, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax Update(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxToken asyncKeyword, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc5(wrappedObject, asyncKeyword, parameterList, arrowToken, block, expressionBody);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax Update(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc6(wrappedObject, attributeLists, modifiers, parameterList, arrowToken, block, expressionBody);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax Update(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => UpdateFunc7(wrappedObject, attributeLists, modifiers, returnType, parameterList, arrowToken, block, expressionBody);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax WithAttributeLists(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc8(wrappedObject, attributeLists);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax WithBlock(this ParenthesizedLambdaExpressionSyntax wrappedObject, BlockSyntax? block)
            => WithBlockFunc9(wrappedObject, block);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax WithExpressionBody(this ParenthesizedLambdaExpressionSyntax wrappedObject, ExpressionSyntax? expressionBody)
            => WithExpressionBodyFunc10(wrappedObject, expressionBody);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax WithModifiers(this ParenthesizedLambdaExpressionSyntax wrappedObject, SyntaxTokenList modifiers)
            => WithModifiersFunc11(wrappedObject, modifiers);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ParenthesizedLambdaExpressionSyntax WithReturnType(this ParenthesizedLambdaExpressionSyntax wrappedObject, TypeSyntax? returnType)
            => WithReturnTypeFunc12(wrappedObject, returnType);
    }
}
