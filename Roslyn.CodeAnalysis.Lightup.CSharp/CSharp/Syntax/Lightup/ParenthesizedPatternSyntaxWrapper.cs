// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct ParenthesizedPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedPatternSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<PatternSyntax?, SyntaxToken> CloseParenTokenFunc;
        private static readonly Func<PatternSyntax?, SyntaxToken> OpenParenTokenFunc;
        private static readonly Func<PatternSyntax?, PatternSyntax> PatternFunc;

        private static readonly Action<PatternSyntax?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<PatternSyntax?, SyntaxToken, PatternSyntax, SyntaxToken, ParenthesizedPatternSyntaxWrapper> UpdateFunc1;
        private static readonly Func<PatternSyntax?, SyntaxToken, ParenthesizedPatternSyntaxWrapper> WithCloseParenTokenFunc2;
        private static readonly Func<PatternSyntax?, SyntaxToken, ParenthesizedPatternSyntaxWrapper> WithOpenParenTokenFunc3;
        private static readonly Func<PatternSyntax?, PatternSyntax, ParenthesizedPatternSyntaxWrapper> WithPatternFunc4;

        private readonly PatternSyntax? wrappedObject;

        static ParenthesizedPatternSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            CloseParenTokenFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(CloseParenToken));
            OpenParenTokenFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, SyntaxToken>(WrappedType, nameof(OpenParenToken));
            PatternFunc = CommonLightupHelper.CreateGetAccessor<PatternSyntax?, PatternSyntax>(WrappedType, nameof(Pattern));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<PatternSyntax?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, SyntaxToken, PatternSyntax, SyntaxToken, ParenthesizedPatternSyntaxWrapper>(WrappedType, nameof(Update));
            WithCloseParenTokenFunc2 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, SyntaxToken, ParenthesizedPatternSyntaxWrapper>(WrappedType, nameof(WithCloseParenToken));
            WithOpenParenTokenFunc3 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, SyntaxToken, ParenthesizedPatternSyntaxWrapper>(WrappedType, nameof(WithOpenParenToken));
            WithPatternFunc4 = CommonLightupHelper.CreateMethodAccessor<PatternSyntax?, PatternSyntax, ParenthesizedPatternSyntaxWrapper>(WrappedType, nameof(WithPattern));
        }

        private ParenthesizedPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxToken CloseParenToken
            => CloseParenTokenFunc(wrappedObject);

        public readonly SyntaxToken OpenParenToken
            => OpenParenTokenFunc(wrappedObject);

        public readonly PatternSyntax Pattern
            => PatternFunc(wrappedObject);

        public static implicit operator PatternSyntax?(ParenthesizedPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static ParenthesizedPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new ParenthesizedPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly ParenthesizedPatternSyntaxWrapper Update(SyntaxToken openParenToken, PatternSyntax pattern, SyntaxToken closeParenToken)
            => UpdateFunc1(wrappedObject, openParenToken, pattern, closeParenToken);

        public readonly ParenthesizedPatternSyntaxWrapper WithCloseParenToken(SyntaxToken closeParenToken)
            => WithCloseParenTokenFunc2(wrappedObject, closeParenToken);

        public readonly ParenthesizedPatternSyntaxWrapper WithOpenParenToken(SyntaxToken openParenToken)
            => WithOpenParenTokenFunc3(wrappedObject, openParenToken);

        public readonly ParenthesizedPatternSyntaxWrapper WithPattern(PatternSyntax pattern)
            => WithPatternFunc4(wrappedObject, pattern);
    }
}
