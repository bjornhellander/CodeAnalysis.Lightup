// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in version 3.8.0.0 of Roslyn.</summary>
    public readonly struct ParenthesizedPatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedPatternSyntax";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxToken CloseParenTokenGetterDelegate(PatternSyntax? _obj);
        private delegate SyntaxToken OpenParenTokenGetterDelegate(PatternSyntax? _obj);
        private delegate PatternSyntax PatternGetterDelegate(PatternSyntax? _obj);

        private delegate void AcceptDelegate0(PatternSyntax? _obj, CSharpSyntaxVisitor visitor);
        private delegate ParenthesizedPatternSyntaxWrapper UpdateDelegate1(PatternSyntax? _obj, SyntaxToken openParenToken, PatternSyntax pattern, SyntaxToken closeParenToken);
        private delegate ParenthesizedPatternSyntaxWrapper WithCloseParenTokenDelegate2(PatternSyntax? _obj, SyntaxToken closeParenToken);
        private delegate ParenthesizedPatternSyntaxWrapper WithOpenParenTokenDelegate3(PatternSyntax? _obj, SyntaxToken openParenToken);
        private delegate ParenthesizedPatternSyntaxWrapper WithPatternDelegate4(PatternSyntax? _obj, PatternSyntax pattern);

        private static readonly CloseParenTokenGetterDelegate CloseParenTokenGetterFunc;
        private static readonly OpenParenTokenGetterDelegate OpenParenTokenGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithCloseParenTokenDelegate2 WithCloseParenTokenFunc2;
        private static readonly WithOpenParenTokenDelegate3 WithOpenParenTokenFunc3;
        private static readonly WithPatternDelegate4 WithPatternFunc4;

        private readonly PatternSyntax? wrappedObject;

        static ParenthesizedPatternSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloseParenTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CloseParenTokenGetterDelegate>(WrappedType, nameof(CloseParenToken));
            OpenParenTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<OpenParenTokenGetterDelegate>(WrappedType, nameof(OpenParenToken));
            PatternGetterFunc = LightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));

            AcceptFunc0 = LightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            UpdateFunc1 = LightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, nameof(Update));
            WithCloseParenTokenFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithCloseParenTokenDelegate2>(WrappedType, nameof(WithCloseParenToken));
            WithOpenParenTokenFunc3 = LightupHelper.CreateInstanceMethodAccessor<WithOpenParenTokenDelegate3>(WrappedType, nameof(WithOpenParenToken));
            WithPatternFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithPatternDelegate4>(WrappedType, nameof(WithPattern));
        }

        private ParenthesizedPatternSyntaxWrapper(PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly SyntaxToken CloseParenToken
        {
            get => CloseParenTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly SyntaxToken OpenParenToken
        {
            get => OpenParenTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly PatternSyntax Pattern
        {
            get => PatternGetterFunc(wrappedObject);
        }

        public static implicit operator PatternSyntax?(ParenthesizedPatternSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ParenthesizedPatternSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<PatternSyntax>(obj, WrappedType);
            return new ParenthesizedPatternSyntaxWrapper(obj2);
        }

        public PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ParenthesizedPatternSyntaxWrapper Update(SyntaxToken openParenToken, PatternSyntax pattern, SyntaxToken closeParenToken)
            => UpdateFunc1(wrappedObject, openParenToken, pattern, closeParenToken);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ParenthesizedPatternSyntaxWrapper WithCloseParenToken(SyntaxToken closeParenToken)
            => WithCloseParenTokenFunc2(wrappedObject, closeParenToken);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ParenthesizedPatternSyntaxWrapper WithOpenParenToken(SyntaxToken openParenToken)
            => WithOpenParenTokenFunc3(wrappedObject, openParenToken);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ParenthesizedPatternSyntaxWrapper WithPattern(PatternSyntax pattern)
            => WithPatternFunc4(wrappedObject, pattern);
    }
}
