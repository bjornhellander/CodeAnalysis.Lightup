// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct ExpressionElementSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionElementSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax> ExpressionFunc;

        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, ExpressionElementSyntaxWrapper> UpdateFunc1;
        private static readonly Func<CSharpSyntaxNode?, ExpressionSyntax, ExpressionElementSyntaxWrapper> WithExpressionFunc2;

        private readonly CSharpSyntaxNode? wrappedObject;

        static ExpressionElementSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            ExpressionFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, ExpressionSyntax>(WrappedType, nameof(Expression));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            UpdateFunc1 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, ExpressionSyntax, ExpressionElementSyntaxWrapper>(WrappedType, nameof(Update));
            WithExpressionFunc2 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, ExpressionSyntax, ExpressionElementSyntaxWrapper>(WrappedType, nameof(WithExpression));
        }

        private ExpressionElementSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly ExpressionSyntax Expression
            => ExpressionFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(ExpressionElementSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static ExpressionElementSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new ExpressionElementSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly ExpressionElementSyntaxWrapper Update(ExpressionSyntax expression)
            => UpdateFunc1(wrappedObject, expression);

        public readonly ExpressionElementSyntaxWrapper WithExpression(ExpressionSyntax expression)
            => WithExpressionFunc2(wrappedObject, expression);
    }
}
