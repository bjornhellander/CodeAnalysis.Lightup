// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct FunctionPointerParameterSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterSyntax";

        public static readonly Type? WrappedType;

        private delegate SyntaxList<AttributeListSyntax> AttributeListsDelegate(CSharpSyntaxNode? _obj);
        private delegate SyntaxTokenList ModifiersDelegate(CSharpSyntaxNode? _obj);
        private delegate TypeSyntax TypeDelegate(CSharpSyntaxNode? _obj);

        private delegate void AcceptDelegate0(CSharpSyntaxNode? _obj, CSharpSyntaxVisitor visitor);
        private delegate FunctionPointerParameterSyntaxWrapper AddAttributeListsDelegate1(CSharpSyntaxNode? _obj, params AttributeListSyntax[] items);
        private delegate FunctionPointerParameterSyntaxWrapper AddModifiersDelegate2(CSharpSyntaxNode? _obj, params SyntaxToken[] items);
        private delegate FunctionPointerParameterSyntaxWrapper UpdateDelegate3(CSharpSyntaxNode? _obj, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type);
        private delegate FunctionPointerParameterSyntaxWrapper WithAttributeListsDelegate4(CSharpSyntaxNode? _obj, SyntaxList<AttributeListSyntax> attributeLists);
        private delegate FunctionPointerParameterSyntaxWrapper WithModifiersDelegate5(CSharpSyntaxNode? _obj, SyntaxTokenList modifiers);
        private delegate FunctionPointerParameterSyntaxWrapper WithTypeDelegate6(CSharpSyntaxNode? _obj, TypeSyntax type);

        private static readonly AttributeListsDelegate AttributeListsFunc;
        private static readonly ModifiersDelegate ModifiersFunc;
        private static readonly TypeDelegate TypeFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddAttributeListsDelegate1 AddAttributeListsFunc1;
        private static readonly AddModifiersDelegate2 AddModifiersFunc2;
        private static readonly UpdateDelegate3 UpdateFunc3;
        private static readonly WithAttributeListsDelegate4 WithAttributeListsFunc4;
        private static readonly WithModifiersDelegate5 WithModifiersFunc5;
        private static readonly WithTypeDelegate6 WithTypeFunc6;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerParameterSyntaxWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributeListsFunc = LightupHelper.CreateGetAccessor<AttributeListsDelegate>(WrappedType, nameof(AttributeLists));
            ModifiersFunc = LightupHelper.CreateGetAccessor<ModifiersDelegate>(WrappedType, nameof(Modifiers));
            TypeFunc = LightupHelper.CreateGetAccessor<TypeDelegate>(WrappedType, nameof(Type));

            AcceptFunc0 = LightupHelper.CreateMethodAccessor<AcceptDelegate0>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = LightupHelper.CreateMethodAccessor<AddAttributeListsDelegate1>(WrappedType, nameof(AddAttributeLists));
            AddModifiersFunc2 = LightupHelper.CreateMethodAccessor<AddModifiersDelegate2>(WrappedType, nameof(AddModifiers));
            UpdateFunc3 = LightupHelper.CreateMethodAccessor<UpdateDelegate3>(WrappedType, nameof(Update));
            WithAttributeListsFunc4 = LightupHelper.CreateMethodAccessor<WithAttributeListsDelegate4>(WrappedType, nameof(WithAttributeLists));
            WithModifiersFunc5 = LightupHelper.CreateMethodAccessor<WithModifiersDelegate5>(WrappedType, nameof(WithModifiers));
            WithTypeFunc6 = LightupHelper.CreateMethodAccessor<WithTypeDelegate6>(WrappedType, nameof(WithType));
        }

        private FunctionPointerParameterSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
            => AttributeListsFunc(wrappedObject);

        public readonly SyntaxTokenList Modifiers
            => ModifiersFunc(wrappedObject);

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(FunctionPointerParameterSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static FunctionPointerParameterSyntaxWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerParameterSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerParameterSyntaxWrapper AddAttributeLists(params AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        public readonly FunctionPointerParameterSyntaxWrapper AddModifiers(params SyntaxToken[] items)
            => AddModifiersFunc2(wrappedObject, items);

        public readonly FunctionPointerParameterSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type)
            => UpdateFunc3(wrappedObject, attributeLists, modifiers, type);

        public readonly FunctionPointerParameterSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc4(wrappedObject, attributeLists);

        public readonly FunctionPointerParameterSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc5(wrappedObject, modifiers);

        public readonly FunctionPointerParameterSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc6(wrappedObject, type);
    }
}
