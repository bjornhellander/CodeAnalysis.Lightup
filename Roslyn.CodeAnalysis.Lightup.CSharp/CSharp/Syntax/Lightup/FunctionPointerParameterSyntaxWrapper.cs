// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    public readonly struct FunctionPointerParameterSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.FunctionPointerParameterSyntax";

        public static readonly Type? WrappedType;

        private static readonly Func<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>> AttributeListsFunc;
        private static readonly Func<CSharpSyntaxNode?, SyntaxTokenList> ModifiersFunc;
        private static readonly Func<CSharpSyntaxNode?, TypeSyntax> TypeFunc;

        private static readonly Action<CSharpSyntaxNode?, CSharpSyntaxVisitor> AcceptFunc0;
        private static readonly Func<CSharpSyntaxNode?, AttributeListSyntax[], FunctionPointerParameterSyntaxWrapper> AddAttributeListsFunc1;
        private static readonly Func<CSharpSyntaxNode?, SyntaxToken[], FunctionPointerParameterSyntaxWrapper> AddModifiersFunc2;
        private static readonly Func<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, FunctionPointerParameterSyntaxWrapper> UpdateFunc3;
        private static readonly Func<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>, FunctionPointerParameterSyntaxWrapper> WithAttributeListsFunc4;
        private static readonly Func<CSharpSyntaxNode?, SyntaxTokenList, FunctionPointerParameterSyntaxWrapper> WithModifiersFunc5;
        private static readonly Func<CSharpSyntaxNode?, TypeSyntax, FunctionPointerParameterSyntaxWrapper> WithTypeFunc6;

        private readonly CSharpSyntaxNode? wrappedObject;

        static FunctionPointerParameterSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindSyntaxType(WrappedTypeName);

            AttributeListsFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>>(WrappedType, nameof(AttributeLists));
            ModifiersFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, SyntaxTokenList>(WrappedType, nameof(Modifiers));
            TypeFunc = CommonLightupHelper.CreateGetAccessor<CSharpSyntaxNode?, TypeSyntax>(WrappedType, nameof(Type));

            AcceptFunc0 = CommonLightupHelper.CreateVoidMethodAccessor<CSharpSyntaxNode?, CSharpSyntaxVisitor>(WrappedType, nameof(Accept));
            AddAttributeListsFunc1 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, AttributeListSyntax[], FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(AddAttributeLists));
            AddModifiersFunc2 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxToken[], FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(AddModifiers));
            UpdateFunc3 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>, SyntaxTokenList, TypeSyntax, FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(Update));
            WithAttributeListsFunc4 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxList<AttributeListSyntax>, FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(WithAttributeLists));
            WithModifiersFunc5 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, SyntaxTokenList, FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(WithModifiers));
            WithTypeFunc6 = CommonLightupHelper.CreateMethodAccessor<CSharpSyntaxNode?, TypeSyntax, FunctionPointerParameterSyntaxWrapper>(WrappedType, nameof(WithType));
        }

        private FunctionPointerParameterSyntaxWrapper(CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxList<AttributeListSyntax> AttributeLists
            => AttributeListsFunc(wrappedObject);

        public readonly SyntaxTokenList Modifiers
            => ModifiersFunc(wrappedObject);

        public readonly TypeSyntax Type
            => TypeFunc(wrappedObject);

        public static implicit operator CSharpSyntaxNode?(FunctionPointerParameterSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static FunctionPointerParameterSyntaxWrapper As(object? obj)
        {
            var obj2 = CommonLightupHelper.As<CSharpSyntaxNode>(obj, WrappedType);
            return new FunctionPointerParameterSyntaxWrapper(obj2);
        }

        public CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        public readonly void Accept(CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        public readonly FunctionPointerParameterSyntaxWrapper AddAttributeLists(AttributeListSyntax[] items)
            => AddAttributeListsFunc1(wrappedObject, items);

        public readonly FunctionPointerParameterSyntaxWrapper AddModifiers(SyntaxToken[] items)
            => AddModifiersFunc2(wrappedObject, items);

        public readonly FunctionPointerParameterSyntaxWrapper Update(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type)
            => UpdateFunc3(wrappedObject, attributeLists, modifiers, type);

        public readonly FunctionPointerParameterSyntaxWrapper WithAttributeLists(SyntaxList<AttributeListSyntax> attributeLists)
            => WithAttributeListsFunc4(wrappedObject, attributeLists);

        public readonly FunctionPointerParameterSyntaxWrapper WithModifiers(SyntaxTokenList modifiers)
            => WithModifiersFunc5(wrappedObject, modifiers);

        public readonly FunctionPointerParameterSyntaxWrapper WithType(TypeSyntax type)
            => WithTypeFunc6(wrappedObject, type);
    }
}
