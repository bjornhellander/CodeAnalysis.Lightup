// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class ConversionExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Conversion";

        public static readonly Type? WrappedType;

        private delegate ITypeSymbol? ConstrainedToTypeGetterDelegate(Conversion? _obj);
        private delegate Boolean IsCollectionExpressionGetterDelegate(Conversion? _obj);
        private delegate Boolean IsConditionalExpressionGetterDelegate(Conversion? _obj);
        private delegate Boolean IsDefaultLiteralGetterDelegate(Conversion? _obj);
        private delegate Boolean IsInlineArrayGetterDelegate(Conversion? _obj);
        private delegate Boolean IsInterpolatedStringHandlerGetterDelegate(Conversion? _obj);
        private delegate Boolean IsObjectCreationGetterDelegate(Conversion? _obj);
        private delegate Boolean IsSwitchExpressionGetterDelegate(Conversion? _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly IsCollectionExpressionGetterDelegate IsCollectionExpressionGetterFunc;
        private static readonly IsConditionalExpressionGetterDelegate IsConditionalExpressionGetterFunc;
        private static readonly IsDefaultLiteralGetterDelegate IsDefaultLiteralGetterFunc;
        private static readonly IsInlineArrayGetterDelegate IsInlineArrayGetterFunc;
        private static readonly IsInterpolatedStringHandlerGetterDelegate IsInterpolatedStringHandlerGetterFunc;
        private static readonly IsObjectCreationGetterDelegate IsObjectCreationGetterFunc;
        private static readonly IsSwitchExpressionGetterDelegate IsSwitchExpressionGetterFunc;

        static ConversionExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(WrappedType, nameof(ConstrainedToType));
            IsCollectionExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsCollectionExpressionGetterDelegate>(WrappedType, nameof(IsCollectionExpression));
            IsConditionalExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsConditionalExpressionGetterDelegate>(WrappedType, nameof(IsConditionalExpression));
            IsDefaultLiteralGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsDefaultLiteralGetterDelegate>(WrappedType, nameof(IsDefaultLiteral));
            IsInlineArrayGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsInlineArrayGetterDelegate>(WrappedType, nameof(IsInlineArray));
            IsInterpolatedStringHandlerGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsInterpolatedStringHandlerGetterDelegate>(WrappedType, nameof(IsInterpolatedStringHandler));
            IsObjectCreationGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsObjectCreationGetterDelegate>(WrappedType, nameof(IsObjectCreation));
            IsSwitchExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsSwitchExpressionGetterDelegate>(WrappedType, nameof(IsSwitchExpression));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ITypeSymbol? ConstrainedToType(this Conversion _obj)
            => ConstrainedToTypeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static Boolean IsCollectionExpression(this Conversion _obj)
            => IsCollectionExpressionGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsConditionalExpression(this Conversion _obj)
            => IsConditionalExpressionGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsDefaultLiteral(this Conversion _obj)
            => IsDefaultLiteralGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static Boolean IsInlineArray(this Conversion _obj)
            => IsInlineArrayGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Boolean IsInterpolatedStringHandler(this Conversion _obj)
            => IsInterpolatedStringHandlerGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static Boolean IsObjectCreation(this Conversion _obj)
            => IsObjectCreationGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsSwitchExpression(this Conversion _obj)
            => IsSwitchExpressionGetterFunc(_obj);
    }
}
