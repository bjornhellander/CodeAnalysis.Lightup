// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CSharp.Conversion.</summary>
    public static class ConversionExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Conversion";

        private delegate Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToTypeGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsCollectionExpressionGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsConditionalExpressionGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsDefaultLiteralGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsInlineArrayGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsInterpolatedStringHandlerGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsObjectCreationGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);
        private delegate System.Boolean IsSwitchExpressionGetterDelegate(Microsoft.CodeAnalysis.CSharp.Conversion? _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly IsCollectionExpressionGetterDelegate IsCollectionExpressionGetterFunc;
        private static readonly IsConditionalExpressionGetterDelegate IsConditionalExpressionGetterFunc;
        private static readonly IsDefaultLiteralGetterDelegate IsDefaultLiteralGetterFunc;
        private static readonly IsInlineArrayGetterDelegate IsInlineArrayGetterFunc;
        private static readonly IsInterpolatedStringHandlerGetterDelegate IsInterpolatedStringHandlerGetterFunc;
        private static readonly IsObjectCreationGetterDelegate IsObjectCreationGetterFunc;
        private static readonly IsSwitchExpressionGetterDelegate IsSwitchExpressionGetterFunc;

        static ConversionExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(wrappedType, nameof(ConstrainedToType));
            IsCollectionExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsCollectionExpressionGetterDelegate>(wrappedType, nameof(IsCollectionExpression));
            IsConditionalExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsConditionalExpressionGetterDelegate>(wrappedType, nameof(IsConditionalExpression));
            IsDefaultLiteralGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsDefaultLiteralGetterDelegate>(wrappedType, nameof(IsDefaultLiteral));
            IsInlineArrayGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsInlineArrayGetterDelegate>(wrappedType, nameof(IsInlineArray));
            IsInterpolatedStringHandlerGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsInterpolatedStringHandlerGetterDelegate>(wrappedType, nameof(IsInterpolatedStringHandler));
            IsObjectCreationGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsObjectCreationGetterDelegate>(wrappedType, nameof(IsObjectCreation));
            IsSwitchExpressionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsSwitchExpressionGetterDelegate>(wrappedType, nameof(IsSwitchExpression));
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToType(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => ConstrainedToTypeGetterFunc(_obj);

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static System.Boolean IsCollectionExpression(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsCollectionExpressionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsConditionalExpression(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsConditionalExpressionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsDefaultLiteral(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsDefaultLiteralGetterFunc(_obj);

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static System.Boolean IsInlineArray(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsInlineArrayGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static System.Boolean IsInterpolatedStringHandler(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsInterpolatedStringHandlerGetterFunc(_obj);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static System.Boolean IsObjectCreation(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsObjectCreationGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsSwitchExpression(this Microsoft.CodeAnalysis.CSharp.Conversion _obj)
            => IsSwitchExpressionGetterFunc(_obj);
    }
}
