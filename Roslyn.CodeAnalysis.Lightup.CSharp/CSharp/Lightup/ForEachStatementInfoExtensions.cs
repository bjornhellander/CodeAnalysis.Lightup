// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class ForEachStatementInfoExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo";

        public static readonly Type? WrappedType;

        private delegate Boolean IsAsynchronousGetterDelegate(ForEachStatementInfo? _obj);

        private static readonly IsAsynchronousGetterDelegate IsAsynchronousGetterFunc;

        static ForEachStatementInfoExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsAsynchronousGetterFunc = LightupHelper.CreateGetAccessor<IsAsynchronousGetterDelegate>(WrappedType, nameof(IsAsynchronous));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsAsynchronous(this ForEachStatementInfo _obj)
            => IsAsynchronousGetterFunc(_obj);
    }
}
