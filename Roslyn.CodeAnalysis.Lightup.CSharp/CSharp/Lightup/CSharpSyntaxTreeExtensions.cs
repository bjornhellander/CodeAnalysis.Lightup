// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.</summary>
    public static class CSharpSyntaxTreeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree";

        private delegate Microsoft.CodeAnalysis.SyntaxTree CreateDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode root, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String? path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions);
        private delegate Microsoft.CodeAnalysis.SyntaxTree CreateDelegate1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode root, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String? path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode);
        private delegate Microsoft.CodeAnalysis.SyntaxTree ParseTextDelegate2(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Threading.CancellationToken cancellationToken);
        private delegate Microsoft.CodeAnalysis.SyntaxTree ParseTextDelegate3(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode, System.Threading.CancellationToken cancellationToken);
        private delegate Microsoft.CodeAnalysis.SyntaxTree ParseTextDelegate4(System.String text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Threading.CancellationToken cancellationToken);
        private delegate Microsoft.CodeAnalysis.SyntaxTree ParseTextDelegate5(System.String text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode, System.Threading.CancellationToken cancellationToken);

        private delegate System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappingsDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree? _obj, System.Threading.CancellationToken cancellationToken);

        private static readonly CreateDelegate0 CreateFunc0;
        private static readonly CreateDelegate1 CreateFunc1;
        private static readonly ParseTextDelegate2 ParseTextFunc2;
        private static readonly ParseTextDelegate3 ParseTextFunc3;
        private static readonly ParseTextDelegate4 ParseTextFunc4;
        private static readonly ParseTextDelegate5 ParseTextFunc5;

        private static readonly GetLineMappingsDelegate0 GetLineMappingsFunc0;

        static CSharpSyntaxTreeExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(wrappedType, "Create", "rootCSharpSyntaxNode", "optionsCSharpParseOptions", "pathString", "encodingEncoding", "diagnosticOptionsImmutableDictionary`2");
            CreateFunc1 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate1>(wrappedType, "Create", "rootCSharpSyntaxNode", "optionsCSharpParseOptions", "pathString", "encodingEncoding", "diagnosticOptionsImmutableDictionary`2", "isGeneratedCodeNullable`1");
            ParseTextFunc2 = LightupHelper.CreateStaticMethodAccessor<ParseTextDelegate2>(wrappedType, "ParseText", "textSourceText", "optionsCSharpParseOptions", "pathString", "diagnosticOptionsImmutableDictionary`2", "cancellationTokenCancellationToken");
            ParseTextFunc3 = LightupHelper.CreateStaticMethodAccessor<ParseTextDelegate3>(wrappedType, "ParseText", "textSourceText", "optionsCSharpParseOptions", "pathString", "diagnosticOptionsImmutableDictionary`2", "isGeneratedCodeNullable`1", "cancellationTokenCancellationToken");
            ParseTextFunc4 = LightupHelper.CreateStaticMethodAccessor<ParseTextDelegate4>(wrappedType, "ParseText", "textString", "optionsCSharpParseOptions", "pathString", "encodingEncoding", "diagnosticOptionsImmutableDictionary`2", "cancellationTokenCancellationToken");
            ParseTextFunc5 = LightupHelper.CreateStaticMethodAccessor<ParseTextDelegate5>(wrappedType, "ParseText", "textString", "optionsCSharpParseOptions", "pathString", "encodingEncoding", "diagnosticOptionsImmutableDictionary`2", "isGeneratedCodeNullable`1", "cancellationTokenCancellationToken");

            GetLineMappingsFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetLineMappingsDelegate0>(wrappedType, "GetLineMappings", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode root, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String? path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions)
            => CreateFunc0(root, options, path, encoding, diagnosticOptions);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode root, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String? path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode)
            => CreateFunc1(root, options, path, encoding, diagnosticOptions, isGeneratedCode);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Threading.CancellationToken cancellationToken)
            => ParseTextFunc2(text, options, path, diagnosticOptions, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode, System.Threading.CancellationToken cancellationToken)
            => ParseTextFunc3(text, options, path, diagnosticOptions, isGeneratedCode, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(System.String text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Threading.CancellationToken cancellationToken)
            => ParseTextFunc4(text, options, path, encoding, diagnosticOptions, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(System.String text, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions? options, System.String path, System.Text.Encoding? encoding, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic>? diagnosticOptions, System.Nullable<System.Boolean> isGeneratedCode, System.Threading.CancellationToken cancellationToken)
            => ParseTextFunc5(text, options, path, encoding, diagnosticOptions, isGeneratedCode, cancellationToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappings(this Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree _obj, System.Threading.CancellationToken cancellationToken)
            => GetLineMappingsFunc0(_obj, cancellationToken);
    }
}
