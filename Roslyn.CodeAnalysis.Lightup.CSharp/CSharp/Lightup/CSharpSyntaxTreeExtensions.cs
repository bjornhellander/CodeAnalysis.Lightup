// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class CSharpSyntaxTreeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree";

        public static readonly Type? WrappedType;

        private delegate IEnumerable<LineMappingWrapper> GetLineMappingsDelegate0(CSharpSyntaxTree? _obj, CancellationToken cancellationToken);

        private static readonly GetLineMappingsDelegate0 GetLineMappingsFunc0;

        static CSharpSyntaxTreeExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetLineMappingsFunc0 = LightupHelper.CreateMethodAccessor<GetLineMappingsDelegate0>(WrappedType, nameof(GetLineMappings));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static IEnumerable<LineMappingWrapper> GetLineMappings(this CSharpSyntaxTree wrappedObject, CancellationToken cancellationToken)
            => GetLineMappingsFunc0(wrappedObject, cancellationToken);
    }
}
