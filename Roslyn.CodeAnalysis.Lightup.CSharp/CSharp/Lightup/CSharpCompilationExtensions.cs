// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    public static class CSharpCompilationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpCompilation";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ImmutableArray<MetadataReference> GetUsedAssemblyReferencesDelegate0(CSharpCompilation? _obj, CancellationToken cancellationToken);

        private static readonly GetUsedAssemblyReferencesDelegate0 GetUsedAssemblyReferencesFunc0;

        static CSharpCompilationExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetUsedAssemblyReferencesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate0>(WrappedType, nameof(GetUsedAssemblyReferences));
        }

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public static ImmutableArray<MetadataReference> GetUsedAssemblyReferences(this CSharpCompilation _obj, CancellationToken cancellationToken)
            => GetUsedAssemblyReferencesFunc0(_obj, cancellationToken);
    }
}
