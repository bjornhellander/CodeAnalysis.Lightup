// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpCompilation.</summary>
    public static class CSharpCompilationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpCompilation";

        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferencesDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpCompilation? _obj, System.Threading.CancellationToken cancellationToken);

        private static readonly GetUsedAssemblyReferencesDelegate0 GetUsedAssemblyReferencesFunc0;

        static CSharpCompilationExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            GetUsedAssemblyReferencesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate0>(wrappedType, "GetUsedAssemblyReferences", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferences(this Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, System.Threading.CancellationToken cancellationToken)
            => GetUsedAssemblyReferencesFunc0(_obj, cancellationToken);
    }
}
