// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.</summary>
    public static class CSharpCompilationOptionsExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions";

        private delegate Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptionsGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithNullableContextOptionsDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions? _obj, Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx options);
        private delegate Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithSyntaxTreeOptionsProviderDelegate1(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions? _obj, Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper provider);

        private static readonly NullableContextOptionsGetterDelegate NullableContextOptionsGetterFunc;

        private static readonly WithNullableContextOptionsDelegate0 WithNullableContextOptionsFunc0;
        private static readonly WithSyntaxTreeOptionsProviderDelegate1 WithSyntaxTreeOptionsProviderFunc1;

        static CSharpCompilationOptionsExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            NullableContextOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<NullableContextOptionsGetterDelegate>(wrappedType, nameof(NullableContextOptions));

            WithNullableContextOptionsFunc0 = LightupHelper.CreateInstanceMethodAccessor<WithNullableContextOptionsDelegate0>(wrappedType, "WithNullableContextOptions", "optionsNullableContextOptions");
            WithSyntaxTreeOptionsProviderFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithSyntaxTreeOptionsProviderDelegate1>(wrappedType, "WithSyntaxTreeOptionsProvider", "providerSyntaxTreeOptionsProvider");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptions(this Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj)
            => NullableContextOptionsGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithNullableContextOptions(this Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx options)
            => WithNullableContextOptionsFunc0(_obj, options);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithSyntaxTreeOptionsProvider(this Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper provider)
            => WithSyntaxTreeOptionsProviderFunc1(_obj, provider);
    }
}
