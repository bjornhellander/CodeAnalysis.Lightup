// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp.Syntax.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.SyntaxFactory.</summary>
    public static class SyntaxFactoryEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.SyntaxFactory";

        private delegate AnonymousMethodExpressionSyntax AnonymousMethodExpressionDelegate0(SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody);
        private delegate AnonymousMethodExpressionSyntax? AnonymousMethodExpressionDelegate1(SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate BinaryPatternSyntaxWrapper BinaryPatternDelegate2(SyntaxKind kind, PatternSyntax left, PatternSyntax right);
        private delegate BinaryPatternSyntaxWrapper BinaryPatternDelegate3(SyntaxKind kind, PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right);
        private delegate BlockSyntax BlockDelegate4(SyntaxList<AttributeListSyntax> attributeLists, SyntaxList<StatementSyntax> statements);
        private delegate BlockSyntax BlockDelegate5(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken openBraceToken, SyntaxList<StatementSyntax> statements, SyntaxToken closeBraceToken);
        private delegate BreakStatementSyntax BreakStatementDelegate6(SyntaxList<AttributeListSyntax> attributeLists);
        private delegate BreakStatementSyntax BreakStatementDelegate7(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken breakKeyword, SyntaxToken semicolonToken);
        private delegate CheckedStatementSyntax CheckedStatementDelegate8(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block);
        private delegate CheckedStatementSyntax CheckedStatementDelegate9(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken keyword, BlockSyntax block);
        private delegate ClassDeclarationSyntax ClassDeclarationDelegate10(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members);
        private delegate ClassDeclarationSyntax ClassDeclarationDelegate11(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate CollectionExpressionSyntaxWrapper CollectionExpressionDelegate12(SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements);
        private delegate CollectionExpressionSyntaxWrapper CollectionExpressionDelegate13(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements, SyntaxToken closeBracketToken);
        private delegate ContinueStatementSyntax ContinueStatementDelegate14(SyntaxList<AttributeListSyntax> attributeLists);
        private delegate ContinueStatementSyntax ContinueStatementDelegate15(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken continueKeyword, SyntaxToken semicolonToken);
        private delegate ConversionOperatorDeclarationSyntax ConversionOperatorDeclarationDelegate16(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody);
        private delegate ConversionOperatorDeclarationSyntax ConversionOperatorDeclarationDelegate17(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate ConversionOperatorDeclarationSyntax ConversionOperatorDeclarationDelegate18(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCrefDelegate19(SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, CrefParameterListSyntax? parameters);
        private delegate CrefParameterSyntax CrefParameterDelegate20(SyntaxToken refKindKeyword, SyntaxToken readOnlyKeyword, TypeSyntax type);
        private delegate DefaultConstraintSyntaxWrapper DefaultConstraintDelegate21();
        private delegate DefaultConstraintSyntaxWrapper DefaultConstraintDelegate22(SyntaxToken defaultKeyword);
        private delegate DoStatementSyntax DoStatementDelegate23(SyntaxList<AttributeListSyntax> attributeLists, StatementSyntax statement, ExpressionSyntax condition);
        private delegate DoStatementSyntax DoStatementDelegate24(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken doKeyword, StatementSyntax statement, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, SyntaxToken semicolonToken);
        private delegate EmptyStatementSyntax EmptyStatementDelegate25(SyntaxList<AttributeListSyntax> attributeLists);
        private delegate EmptyStatementSyntax EmptyStatementDelegate26(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken semicolonToken);
        private delegate EnumMemberDeclarationSyntax EnumMemberDeclarationDelegate27(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, EqualsValueClauseSyntax? equalsValue);
        private delegate EventDeclarationSyntax EventDeclarationDelegate28(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, SyntaxToken semicolonToken);
        private delegate EventDeclarationSyntax EventDeclarationDelegate29(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax? accessorList, SyntaxToken semicolonToken);
        private delegate ExpressionColonSyntaxWrapper ExpressionColonDelegate30(ExpressionSyntax expression, SyntaxToken colonToken);
        private delegate ExpressionElementSyntaxWrapper ExpressionElementDelegate31(ExpressionSyntax expression);
        private delegate ExpressionStatementSyntax ExpressionStatementDelegate32(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression);
        private delegate ExpressionStatementSyntax ExpressionStatementDelegate33(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression, SyntaxToken semicolonToken);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclarationDelegate34(NameSyntax name);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclarationDelegate35(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, NameSyntax name, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members);
        private delegate FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclarationDelegate36(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken semicolonToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members);
        private delegate FixedStatementSyntax FixedStatementDelegate37(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax declaration, StatementSyntax statement);
        private delegate FixedStatementSyntax FixedStatementDelegate38(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken fixedKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax declaration, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate ForEachStatementSyntax ForEachStatementDelegate39(SyntaxList<AttributeListSyntax> attributeLists, TypeSyntax type, SyntaxToken identifier, ExpressionSyntax expression, StatementSyntax statement);
        private delegate ForEachStatementSyntax ForEachStatementDelegate40(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate ForEachVariableStatementSyntax ForEachVariableStatementDelegate41(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax variable, ExpressionSyntax expression, StatementSyntax statement);
        private delegate ForEachVariableStatementSyntax ForEachVariableStatementDelegate42(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, ExpressionSyntax variable, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate ForStatementSyntax ForStatementDelegate43(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, ExpressionSyntax? condition, SeparatedSyntaxList<ExpressionSyntax> incrementors, StatementSyntax statement);
        private delegate ForStatementSyntax ForStatementDelegate44(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, SyntaxToken firstSemicolonToken, ExpressionSyntax? condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExpressionSyntax> incrementors, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate FunctionPointerCallingConventionSyntaxWrapper FunctionPointerCallingConventionDelegate45(SyntaxToken managedOrUnmanagedKeyword);
        private delegate FunctionPointerCallingConventionSyntaxWrapper FunctionPointerCallingConventionDelegate46(SyntaxToken managedOrUnmanagedKeyword, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList);
        private delegate FunctionPointerParameterSyntaxWrapper FunctionPointerParameterDelegate47(TypeSyntax type);
        private delegate FunctionPointerParameterSyntaxWrapper FunctionPointerParameterDelegate48(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type);
        private delegate FunctionPointerParameterListSyntaxWrapper FunctionPointerParameterListDelegate49(SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters);
        private delegate FunctionPointerParameterListSyntaxWrapper FunctionPointerParameterListDelegate50(SyntaxToken lessThanToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters, SyntaxToken greaterThanToken);
        private delegate FunctionPointerTypeSyntaxWrapper FunctionPointerTypeDelegate51();
        private delegate FunctionPointerTypeSyntaxWrapper FunctionPointerTypeDelegate52(FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList);
        private delegate FunctionPointerTypeSyntaxWrapper FunctionPointerTypeDelegate53(SyntaxToken delegateKeyword, SyntaxToken asteriskToken, FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList);
        private delegate FunctionPointerUnmanagedCallingConventionSyntaxWrapper FunctionPointerUnmanagedCallingConventionDelegate54(SyntaxToken name);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper FunctionPointerUnmanagedCallingConventionListDelegate55(SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions);
        private delegate FunctionPointerUnmanagedCallingConventionListSyntaxWrapper FunctionPointerUnmanagedCallingConventionListDelegate56(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions, SyntaxToken closeBracketToken);
        private delegate GlobalStatementSyntax GlobalStatementDelegate57(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, StatementSyntax statement);
        private delegate GotoStatementSyntax GotoStatementDelegate58(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax? expression);
        private delegate GotoStatementSyntax GotoStatementDelegate59(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken gotoKeyword, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken);
        private delegate IfStatementSyntax IfStatementDelegate60(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax condition, StatementSyntax statement, ElseClauseSyntax? @else);
        private delegate IfStatementSyntax IfStatementDelegate61(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken ifKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement, ElseClauseSyntax? @else);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpressionDelegate62();
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpressionDelegate63(ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer);
        private delegate ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpressionDelegate64(SyntaxToken newKeyword, ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer);
        private delegate InterfaceDeclarationSyntax InterfaceDeclarationDelegate65(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate InterpolatedStringExpressionSyntax InterpolatedStringExpressionDelegate66(SyntaxToken stringStartToken, SyntaxToken stringEndToken);
        private delegate LabeledStatementSyntax LabeledStatementDelegate67(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, StatementSyntax statement);
        private delegate LabeledStatementSyntax LabeledStatementDelegate68(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, SyntaxToken colonToken, StatementSyntax statement);
        private delegate LineDirectivePositionSyntaxWrapper LineDirectivePositionDelegate69(SyntaxToken line, SyntaxToken character);
        private delegate LineDirectivePositionSyntaxWrapper LineDirectivePositionDelegate70(SyntaxToken openParenToken, SyntaxToken line, SyntaxToken commaToken, SyntaxToken character, SyntaxToken closeParenToken);
        private delegate LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTriviaDelegate71(LineDirectivePositionSyntaxWrapper start, LineDirectivePositionSyntaxWrapper end, SyntaxToken file, Boolean isActive);
        private delegate LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTriviaDelegate72(LineDirectivePositionSyntaxWrapper start, LineDirectivePositionSyntaxWrapper end, SyntaxToken characterOffset, SyntaxToken file, Boolean isActive);
        private delegate LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTriviaDelegate73(SyntaxToken hashToken, SyntaxToken lineKeyword, LineDirectivePositionSyntaxWrapper start, SyntaxToken minusToken, LineDirectivePositionSyntaxWrapper end, SyntaxToken characterOffset, SyntaxToken file, SyntaxToken endOfDirectiveToken, Boolean isActive);
        private delegate ListPatternSyntaxWrapper ListPatternDelegate74(SeparatedSyntaxList<PatternSyntax> patterns);
        private delegate ListPatternSyntaxWrapper ListPatternDelegate75(SeparatedSyntaxList<PatternSyntax> patterns, VariableDesignationSyntax? designation);
        private delegate ListPatternSyntaxWrapper ListPatternDelegate76(SyntaxToken openBracketToken, SeparatedSyntaxList<PatternSyntax> patterns, SyntaxToken closeBracketToken, VariableDesignationSyntax? designation);
        private delegate LocalDeclarationStatementSyntax LocalDeclarationStatementDelegate77(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration);
        private delegate LocalDeclarationStatementSyntax LocalDeclarationStatementDelegate78(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken usingKeyword, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration, SyntaxToken semicolonToken);
        private delegate LocalFunctionStatementSyntax LocalFunctionStatementDelegate79(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody);
        private delegate LocalFunctionStatementSyntax LocalFunctionStatementDelegate80(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate LockStatementSyntax LockStatementDelegate81(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression, StatementSyntax statement);
        private delegate LockStatementSyntax LockStatementDelegate82(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken lockKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate NamespaceDeclarationSyntax NamespaceDeclarationDelegate83(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, NameSyntax name, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members);
        private delegate NamespaceDeclarationSyntax NamespaceDeclarationDelegate84(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken openBraceToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate NullableDirectiveTriviaSyntax NullableDirectiveTriviaDelegate85(SyntaxToken settingToken, SyntaxToken targetToken, Boolean isActive);
        private delegate NullableDirectiveTriviaSyntax NullableDirectiveTriviaDelegate86(SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive);
        private delegate OperatorDeclarationSyntax OperatorDeclarationDelegate87(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody);
        private delegate OperatorDeclarationSyntax OperatorDeclarationDelegate88(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate OperatorDeclarationSyntax OperatorDeclarationDelegate89(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken);
        private delegate OperatorMemberCrefSyntax OperatorMemberCrefDelegate90(SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, CrefParameterListSyntax? parameters);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate91();
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate92(ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate93(SyntaxTokenList modifiers, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate94(SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate95(SyntaxToken asyncKeyword, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate96(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate97(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpressionDelegate98(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate ParenthesizedPatternSyntaxWrapper ParenthesizedPatternDelegate99(PatternSyntax pattern);
        private delegate ParenthesizedPatternSyntaxWrapper ParenthesizedPatternDelegate100(SyntaxToken openParenToken, PatternSyntax pattern, SyntaxToken closeParenToken);
        private delegate SyntaxTree ParseSyntaxTreeDelegate101(SourceText text, ParseOptions? options, String path, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, CancellationToken cancellationToken);
        private delegate SyntaxTree ParseSyntaxTreeDelegate102(String text, ParseOptions? options, String path, Encoding? encoding, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, CancellationToken cancellationToken);
        private delegate SyntaxTree ParseSyntaxTreeDelegate103(SourceText text, ParseOptions? options, String path, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, Nullable<Boolean> isGeneratedCode, CancellationToken cancellationToken);
        private delegate SyntaxTree ParseSyntaxTreeDelegate104(String text, ParseOptions? options, String path, Encoding? encoding, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, Nullable<Boolean> isGeneratedCode, CancellationToken cancellationToken);
        private delegate TypeSyntax ParseTypeNameDelegate105(String text, Int32 offset, ParseOptions? options, Boolean consumeFullText);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper PrimaryConstructorBaseTypeDelegate106(TypeSyntax type);
        private delegate PrimaryConstructorBaseTypeSyntaxWrapper PrimaryConstructorBaseTypeDelegate107(TypeSyntax type, ArgumentListSyntax argumentList);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate108(SyntaxToken keyword, SyntaxToken identifier);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate109(SyntaxToken keyword, String identifier);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate110(SyntaxKind kind, SyntaxToken keyword, SyntaxToken identifier);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate111(SyntaxKind kind, SyntaxToken keyword, String identifier);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate112(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate113(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate114(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate RecordDeclarationSyntaxWrapper RecordDeclarationDelegate115(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken classOrStructKeyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate RelationalPatternSyntaxWrapper RelationalPatternDelegate116(SyntaxToken operatorToken, ExpressionSyntax expression);
        private delegate ReturnStatementSyntax ReturnStatementDelegate117(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression);
        private delegate ReturnStatementSyntax ReturnStatementDelegate118(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken returnKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken);
        private delegate ScopedTypeSyntaxWrapper ScopedTypeDelegate119(TypeSyntax type);
        private delegate ScopedTypeSyntaxWrapper ScopedTypeDelegate120(SyntaxToken scopedKeyword, TypeSyntax type);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate121(ParameterSyntax parameter);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate122(ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate123(SyntaxTokenList modifiers, ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate124(SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate125(SyntaxToken asyncKeyword, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate126(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SimpleLambdaExpressionSyntax SimpleLambdaExpressionDelegate127(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody);
        private delegate SlicePatternSyntaxWrapper SlicePatternDelegate128(PatternSyntax? pattern);
        private delegate SlicePatternSyntaxWrapper SlicePatternDelegate129(SyntaxToken dotDotToken, PatternSyntax? pattern);
        private delegate SpreadElementSyntaxWrapper SpreadElementDelegate130(ExpressionSyntax expression);
        private delegate SpreadElementSyntaxWrapper SpreadElementDelegate131(SyntaxToken operatorToken, ExpressionSyntax expression);
        private delegate StructDeclarationSyntax StructDeclarationDelegate132(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members);
        private delegate StructDeclarationSyntax StructDeclarationDelegate133(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken);
        private delegate SubpatternSyntax SubpatternDelegate134(BaseExpressionColonSyntaxWrapper expressionColon, PatternSyntax pattern);
        private delegate SwitchStatementSyntax SwitchStatementDelegate135(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken switchKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, SyntaxToken openBraceToken, SyntaxList<SwitchSectionSyntax> sections, SyntaxToken closeBraceToken);
        private delegate ThrowStatementSyntax ThrowStatementDelegate136(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression);
        private delegate ThrowStatementSyntax ThrowStatementDelegate137(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken throwKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken);
        private delegate TryStatementSyntax TryStatementDelegate138(SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax? @finally);
        private delegate TryStatementSyntax TryStatementDelegate139(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken tryKeyword, BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax? @finally);
        private delegate TypePatternSyntaxWrapper TypePatternDelegate140(TypeSyntax type);
        private delegate UnaryPatternSyntaxWrapper UnaryPatternDelegate141(PatternSyntax pattern);
        private delegate UnaryPatternSyntaxWrapper UnaryPatternDelegate142(SyntaxToken operatorToken, PatternSyntax pattern);
        private delegate UnsafeStatementSyntax UnsafeStatementDelegate143(SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block);
        private delegate UnsafeStatementSyntax UnsafeStatementDelegate144(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken unsafeKeyword, BlockSyntax block);
        private delegate UsingDirectiveSyntax UsingDirectiveDelegate145(TypeSyntax namespaceOrType);
        private delegate UsingDirectiveSyntax UsingDirectiveDelegate146(NameEqualsSyntax? alias, TypeSyntax namespaceOrType);
        private delegate UsingDirectiveSyntax UsingDirectiveDelegate147(SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, NameEqualsSyntax? alias, NameSyntax name, SyntaxToken semicolonToken);
        private delegate UsingDirectiveSyntax UsingDirectiveDelegate148(SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, SyntaxToken unsafeKeyword, NameEqualsSyntax? alias, TypeSyntax namespaceOrType, SyntaxToken semicolonToken);
        private delegate UsingStatementSyntax UsingStatementDelegate149(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax? declaration, ExpressionSyntax? expression, StatementSyntax statement);
        private delegate UsingStatementSyntax UsingStatementDelegate150(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken usingKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, ExpressionSyntax? expression, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate WhileStatementSyntax WhileStatementDelegate151(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax condition, StatementSyntax statement);
        private delegate WhileStatementSyntax WhileStatementDelegate152(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement);
        private delegate WithExpressionSyntaxWrapper WithExpressionDelegate153(ExpressionSyntax expression, InitializerExpressionSyntax initializer);
        private delegate WithExpressionSyntaxWrapper WithExpressionDelegate154(ExpressionSyntax expression, SyntaxToken withKeyword, InitializerExpressionSyntax initializer);
        private delegate YieldStatementSyntax YieldStatementDelegate155(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression);
        private delegate YieldStatementSyntax YieldStatementDelegate156(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken yieldKeyword, SyntaxToken returnOrBreakKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken);

        private static readonly AnonymousMethodExpressionDelegate0 AnonymousMethodExpressionFunc0;
        private static readonly AnonymousMethodExpressionDelegate1 AnonymousMethodExpressionFunc1;
        private static readonly BinaryPatternDelegate2 BinaryPatternFunc2;
        private static readonly BinaryPatternDelegate3 BinaryPatternFunc3;
        private static readonly BlockDelegate4 BlockFunc4;
        private static readonly BlockDelegate5 BlockFunc5;
        private static readonly BreakStatementDelegate6 BreakStatementFunc6;
        private static readonly BreakStatementDelegate7 BreakStatementFunc7;
        private static readonly CheckedStatementDelegate8 CheckedStatementFunc8;
        private static readonly CheckedStatementDelegate9 CheckedStatementFunc9;
        private static readonly ClassDeclarationDelegate10 ClassDeclarationFunc10;
        private static readonly ClassDeclarationDelegate11 ClassDeclarationFunc11;
        private static readonly CollectionExpressionDelegate12 CollectionExpressionFunc12;
        private static readonly CollectionExpressionDelegate13 CollectionExpressionFunc13;
        private static readonly ContinueStatementDelegate14 ContinueStatementFunc14;
        private static readonly ContinueStatementDelegate15 ContinueStatementFunc15;
        private static readonly ConversionOperatorDeclarationDelegate16 ConversionOperatorDeclarationFunc16;
        private static readonly ConversionOperatorDeclarationDelegate17 ConversionOperatorDeclarationFunc17;
        private static readonly ConversionOperatorDeclarationDelegate18 ConversionOperatorDeclarationFunc18;
        private static readonly ConversionOperatorMemberCrefDelegate19 ConversionOperatorMemberCrefFunc19;
        private static readonly CrefParameterDelegate20 CrefParameterFunc20;
        private static readonly DefaultConstraintDelegate21 DefaultConstraintFunc21;
        private static readonly DefaultConstraintDelegate22 DefaultConstraintFunc22;
        private static readonly DoStatementDelegate23 DoStatementFunc23;
        private static readonly DoStatementDelegate24 DoStatementFunc24;
        private static readonly EmptyStatementDelegate25 EmptyStatementFunc25;
        private static readonly EmptyStatementDelegate26 EmptyStatementFunc26;
        private static readonly EnumMemberDeclarationDelegate27 EnumMemberDeclarationFunc27;
        private static readonly EventDeclarationDelegate28 EventDeclarationFunc28;
        private static readonly EventDeclarationDelegate29 EventDeclarationFunc29;
        private static readonly ExpressionColonDelegate30 ExpressionColonFunc30;
        private static readonly ExpressionElementDelegate31 ExpressionElementFunc31;
        private static readonly ExpressionStatementDelegate32 ExpressionStatementFunc32;
        private static readonly ExpressionStatementDelegate33 ExpressionStatementFunc33;
        private static readonly FileScopedNamespaceDeclarationDelegate34 FileScopedNamespaceDeclarationFunc34;
        private static readonly FileScopedNamespaceDeclarationDelegate35 FileScopedNamespaceDeclarationFunc35;
        private static readonly FileScopedNamespaceDeclarationDelegate36 FileScopedNamespaceDeclarationFunc36;
        private static readonly FixedStatementDelegate37 FixedStatementFunc37;
        private static readonly FixedStatementDelegate38 FixedStatementFunc38;
        private static readonly ForEachStatementDelegate39 ForEachStatementFunc39;
        private static readonly ForEachStatementDelegate40 ForEachStatementFunc40;
        private static readonly ForEachVariableStatementDelegate41 ForEachVariableStatementFunc41;
        private static readonly ForEachVariableStatementDelegate42 ForEachVariableStatementFunc42;
        private static readonly ForStatementDelegate43 ForStatementFunc43;
        private static readonly ForStatementDelegate44 ForStatementFunc44;
        private static readonly FunctionPointerCallingConventionDelegate45 FunctionPointerCallingConventionFunc45;
        private static readonly FunctionPointerCallingConventionDelegate46 FunctionPointerCallingConventionFunc46;
        private static readonly FunctionPointerParameterDelegate47 FunctionPointerParameterFunc47;
        private static readonly FunctionPointerParameterDelegate48 FunctionPointerParameterFunc48;
        private static readonly FunctionPointerParameterListDelegate49 FunctionPointerParameterListFunc49;
        private static readonly FunctionPointerParameterListDelegate50 FunctionPointerParameterListFunc50;
        private static readonly FunctionPointerTypeDelegate51 FunctionPointerTypeFunc51;
        private static readonly FunctionPointerTypeDelegate52 FunctionPointerTypeFunc52;
        private static readonly FunctionPointerTypeDelegate53 FunctionPointerTypeFunc53;
        private static readonly FunctionPointerUnmanagedCallingConventionDelegate54 FunctionPointerUnmanagedCallingConventionFunc54;
        private static readonly FunctionPointerUnmanagedCallingConventionListDelegate55 FunctionPointerUnmanagedCallingConventionListFunc55;
        private static readonly FunctionPointerUnmanagedCallingConventionListDelegate56 FunctionPointerUnmanagedCallingConventionListFunc56;
        private static readonly GlobalStatementDelegate57 GlobalStatementFunc57;
        private static readonly GotoStatementDelegate58 GotoStatementFunc58;
        private static readonly GotoStatementDelegate59 GotoStatementFunc59;
        private static readonly IfStatementDelegate60 IfStatementFunc60;
        private static readonly IfStatementDelegate61 IfStatementFunc61;
        private static readonly ImplicitObjectCreationExpressionDelegate62 ImplicitObjectCreationExpressionFunc62;
        private static readonly ImplicitObjectCreationExpressionDelegate63 ImplicitObjectCreationExpressionFunc63;
        private static readonly ImplicitObjectCreationExpressionDelegate64 ImplicitObjectCreationExpressionFunc64;
        private static readonly InterfaceDeclarationDelegate65 InterfaceDeclarationFunc65;
        private static readonly InterpolatedStringExpressionDelegate66 InterpolatedStringExpressionFunc66;
        private static readonly LabeledStatementDelegate67 LabeledStatementFunc67;
        private static readonly LabeledStatementDelegate68 LabeledStatementFunc68;
        private static readonly LineDirectivePositionDelegate69 LineDirectivePositionFunc69;
        private static readonly LineDirectivePositionDelegate70 LineDirectivePositionFunc70;
        private static readonly LineSpanDirectiveTriviaDelegate71 LineSpanDirectiveTriviaFunc71;
        private static readonly LineSpanDirectiveTriviaDelegate72 LineSpanDirectiveTriviaFunc72;
        private static readonly LineSpanDirectiveTriviaDelegate73 LineSpanDirectiveTriviaFunc73;
        private static readonly ListPatternDelegate74 ListPatternFunc74;
        private static readonly ListPatternDelegate75 ListPatternFunc75;
        private static readonly ListPatternDelegate76 ListPatternFunc76;
        private static readonly LocalDeclarationStatementDelegate77 LocalDeclarationStatementFunc77;
        private static readonly LocalDeclarationStatementDelegate78 LocalDeclarationStatementFunc78;
        private static readonly LocalFunctionStatementDelegate79 LocalFunctionStatementFunc79;
        private static readonly LocalFunctionStatementDelegate80 LocalFunctionStatementFunc80;
        private static readonly LockStatementDelegate81 LockStatementFunc81;
        private static readonly LockStatementDelegate82 LockStatementFunc82;
        private static readonly NamespaceDeclarationDelegate83 NamespaceDeclarationFunc83;
        private static readonly NamespaceDeclarationDelegate84 NamespaceDeclarationFunc84;
        private static readonly NullableDirectiveTriviaDelegate85 NullableDirectiveTriviaFunc85;
        private static readonly NullableDirectiveTriviaDelegate86 NullableDirectiveTriviaFunc86;
        private static readonly OperatorDeclarationDelegate87 OperatorDeclarationFunc87;
        private static readonly OperatorDeclarationDelegate88 OperatorDeclarationFunc88;
        private static readonly OperatorDeclarationDelegate89 OperatorDeclarationFunc89;
        private static readonly OperatorMemberCrefDelegate90 OperatorMemberCrefFunc90;
        private static readonly ParenthesizedLambdaExpressionDelegate91 ParenthesizedLambdaExpressionFunc91;
        private static readonly ParenthesizedLambdaExpressionDelegate92 ParenthesizedLambdaExpressionFunc92;
        private static readonly ParenthesizedLambdaExpressionDelegate93 ParenthesizedLambdaExpressionFunc93;
        private static readonly ParenthesizedLambdaExpressionDelegate94 ParenthesizedLambdaExpressionFunc94;
        private static readonly ParenthesizedLambdaExpressionDelegate95 ParenthesizedLambdaExpressionFunc95;
        private static readonly ParenthesizedLambdaExpressionDelegate96 ParenthesizedLambdaExpressionFunc96;
        private static readonly ParenthesizedLambdaExpressionDelegate97 ParenthesizedLambdaExpressionFunc97;
        private static readonly ParenthesizedLambdaExpressionDelegate98 ParenthesizedLambdaExpressionFunc98;
        private static readonly ParenthesizedPatternDelegate99 ParenthesizedPatternFunc99;
        private static readonly ParenthesizedPatternDelegate100 ParenthesizedPatternFunc100;
        private static readonly ParseSyntaxTreeDelegate101 ParseSyntaxTreeFunc101;
        private static readonly ParseSyntaxTreeDelegate102 ParseSyntaxTreeFunc102;
        private static readonly ParseSyntaxTreeDelegate103 ParseSyntaxTreeFunc103;
        private static readonly ParseSyntaxTreeDelegate104 ParseSyntaxTreeFunc104;
        private static readonly ParseTypeNameDelegate105 ParseTypeNameFunc105;
        private static readonly PrimaryConstructorBaseTypeDelegate106 PrimaryConstructorBaseTypeFunc106;
        private static readonly PrimaryConstructorBaseTypeDelegate107 PrimaryConstructorBaseTypeFunc107;
        private static readonly RecordDeclarationDelegate108 RecordDeclarationFunc108;
        private static readonly RecordDeclarationDelegate109 RecordDeclarationFunc109;
        private static readonly RecordDeclarationDelegate110 RecordDeclarationFunc110;
        private static readonly RecordDeclarationDelegate111 RecordDeclarationFunc111;
        private static readonly RecordDeclarationDelegate112 RecordDeclarationFunc112;
        private static readonly RecordDeclarationDelegate113 RecordDeclarationFunc113;
        private static readonly RecordDeclarationDelegate114 RecordDeclarationFunc114;
        private static readonly RecordDeclarationDelegate115 RecordDeclarationFunc115;
        private static readonly RelationalPatternDelegate116 RelationalPatternFunc116;
        private static readonly ReturnStatementDelegate117 ReturnStatementFunc117;
        private static readonly ReturnStatementDelegate118 ReturnStatementFunc118;
        private static readonly ScopedTypeDelegate119 ScopedTypeFunc119;
        private static readonly ScopedTypeDelegate120 ScopedTypeFunc120;
        private static readonly SimpleLambdaExpressionDelegate121 SimpleLambdaExpressionFunc121;
        private static readonly SimpleLambdaExpressionDelegate122 SimpleLambdaExpressionFunc122;
        private static readonly SimpleLambdaExpressionDelegate123 SimpleLambdaExpressionFunc123;
        private static readonly SimpleLambdaExpressionDelegate124 SimpleLambdaExpressionFunc124;
        private static readonly SimpleLambdaExpressionDelegate125 SimpleLambdaExpressionFunc125;
        private static readonly SimpleLambdaExpressionDelegate126 SimpleLambdaExpressionFunc126;
        private static readonly SimpleLambdaExpressionDelegate127 SimpleLambdaExpressionFunc127;
        private static readonly SlicePatternDelegate128 SlicePatternFunc128;
        private static readonly SlicePatternDelegate129 SlicePatternFunc129;
        private static readonly SpreadElementDelegate130 SpreadElementFunc130;
        private static readonly SpreadElementDelegate131 SpreadElementFunc131;
        private static readonly StructDeclarationDelegate132 StructDeclarationFunc132;
        private static readonly StructDeclarationDelegate133 StructDeclarationFunc133;
        private static readonly SubpatternDelegate134 SubpatternFunc134;
        private static readonly SwitchStatementDelegate135 SwitchStatementFunc135;
        private static readonly ThrowStatementDelegate136 ThrowStatementFunc136;
        private static readonly ThrowStatementDelegate137 ThrowStatementFunc137;
        private static readonly TryStatementDelegate138 TryStatementFunc138;
        private static readonly TryStatementDelegate139 TryStatementFunc139;
        private static readonly TypePatternDelegate140 TypePatternFunc140;
        private static readonly UnaryPatternDelegate141 UnaryPatternFunc141;
        private static readonly UnaryPatternDelegate142 UnaryPatternFunc142;
        private static readonly UnsafeStatementDelegate143 UnsafeStatementFunc143;
        private static readonly UnsafeStatementDelegate144 UnsafeStatementFunc144;
        private static readonly UsingDirectiveDelegate145 UsingDirectiveFunc145;
        private static readonly UsingDirectiveDelegate146 UsingDirectiveFunc146;
        private static readonly UsingDirectiveDelegate147 UsingDirectiveFunc147;
        private static readonly UsingDirectiveDelegate148 UsingDirectiveFunc148;
        private static readonly UsingStatementDelegate149 UsingStatementFunc149;
        private static readonly UsingStatementDelegate150 UsingStatementFunc150;
        private static readonly WhileStatementDelegate151 WhileStatementFunc151;
        private static readonly WhileStatementDelegate152 WhileStatementFunc152;
        private static readonly WithExpressionDelegate153 WithExpressionFunc153;
        private static readonly WithExpressionDelegate154 WithExpressionFunc154;
        private static readonly YieldStatementDelegate155 YieldStatementFunc155;
        private static readonly YieldStatementDelegate156 YieldStatementFunc156;

        static SyntaxFactoryEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AnonymousMethodExpressionFunc0 = LightupHelper.CreateStaticMethodAccessor<AnonymousMethodExpressionDelegate0>(wrappedType, nameof(AnonymousMethodExpression));
            AnonymousMethodExpressionFunc1 = LightupHelper.CreateStaticMethodAccessor<AnonymousMethodExpressionDelegate1>(wrappedType, nameof(AnonymousMethodExpression));
            BinaryPatternFunc2 = LightupHelper.CreateStaticMethodAccessor<BinaryPatternDelegate2>(wrappedType, nameof(BinaryPattern));
            BinaryPatternFunc3 = LightupHelper.CreateStaticMethodAccessor<BinaryPatternDelegate3>(wrappedType, nameof(BinaryPattern));
            BlockFunc4 = LightupHelper.CreateStaticMethodAccessor<BlockDelegate4>(wrappedType, nameof(Block));
            BlockFunc5 = LightupHelper.CreateStaticMethodAccessor<BlockDelegate5>(wrappedType, nameof(Block));
            BreakStatementFunc6 = LightupHelper.CreateStaticMethodAccessor<BreakStatementDelegate6>(wrappedType, nameof(BreakStatement));
            BreakStatementFunc7 = LightupHelper.CreateStaticMethodAccessor<BreakStatementDelegate7>(wrappedType, nameof(BreakStatement));
            CheckedStatementFunc8 = LightupHelper.CreateStaticMethodAccessor<CheckedStatementDelegate8>(wrappedType, nameof(CheckedStatement));
            CheckedStatementFunc9 = LightupHelper.CreateStaticMethodAccessor<CheckedStatementDelegate9>(wrappedType, nameof(CheckedStatement));
            ClassDeclarationFunc10 = LightupHelper.CreateStaticMethodAccessor<ClassDeclarationDelegate10>(wrappedType, nameof(ClassDeclaration));
            ClassDeclarationFunc11 = LightupHelper.CreateStaticMethodAccessor<ClassDeclarationDelegate11>(wrappedType, nameof(ClassDeclaration));
            CollectionExpressionFunc12 = LightupHelper.CreateStaticMethodAccessor<CollectionExpressionDelegate12>(wrappedType, nameof(CollectionExpression));
            CollectionExpressionFunc13 = LightupHelper.CreateStaticMethodAccessor<CollectionExpressionDelegate13>(wrappedType, nameof(CollectionExpression));
            ContinueStatementFunc14 = LightupHelper.CreateStaticMethodAccessor<ContinueStatementDelegate14>(wrappedType, nameof(ContinueStatement));
            ContinueStatementFunc15 = LightupHelper.CreateStaticMethodAccessor<ContinueStatementDelegate15>(wrappedType, nameof(ContinueStatement));
            ConversionOperatorDeclarationFunc16 = LightupHelper.CreateStaticMethodAccessor<ConversionOperatorDeclarationDelegate16>(wrappedType, nameof(ConversionOperatorDeclaration));
            ConversionOperatorDeclarationFunc17 = LightupHelper.CreateStaticMethodAccessor<ConversionOperatorDeclarationDelegate17>(wrappedType, nameof(ConversionOperatorDeclaration));
            ConversionOperatorDeclarationFunc18 = LightupHelper.CreateStaticMethodAccessor<ConversionOperatorDeclarationDelegate18>(wrappedType, nameof(ConversionOperatorDeclaration));
            ConversionOperatorMemberCrefFunc19 = LightupHelper.CreateStaticMethodAccessor<ConversionOperatorMemberCrefDelegate19>(wrappedType, nameof(ConversionOperatorMemberCref));
            CrefParameterFunc20 = LightupHelper.CreateStaticMethodAccessor<CrefParameterDelegate20>(wrappedType, nameof(CrefParameter));
            DefaultConstraintFunc21 = LightupHelper.CreateStaticMethodAccessor<DefaultConstraintDelegate21>(wrappedType, nameof(DefaultConstraint));
            DefaultConstraintFunc22 = LightupHelper.CreateStaticMethodAccessor<DefaultConstraintDelegate22>(wrappedType, nameof(DefaultConstraint));
            DoStatementFunc23 = LightupHelper.CreateStaticMethodAccessor<DoStatementDelegate23>(wrappedType, nameof(DoStatement));
            DoStatementFunc24 = LightupHelper.CreateStaticMethodAccessor<DoStatementDelegate24>(wrappedType, nameof(DoStatement));
            EmptyStatementFunc25 = LightupHelper.CreateStaticMethodAccessor<EmptyStatementDelegate25>(wrappedType, nameof(EmptyStatement));
            EmptyStatementFunc26 = LightupHelper.CreateStaticMethodAccessor<EmptyStatementDelegate26>(wrappedType, nameof(EmptyStatement));
            EnumMemberDeclarationFunc27 = LightupHelper.CreateStaticMethodAccessor<EnumMemberDeclarationDelegate27>(wrappedType, nameof(EnumMemberDeclaration));
            EventDeclarationFunc28 = LightupHelper.CreateStaticMethodAccessor<EventDeclarationDelegate28>(wrappedType, nameof(EventDeclaration));
            EventDeclarationFunc29 = LightupHelper.CreateStaticMethodAccessor<EventDeclarationDelegate29>(wrappedType, nameof(EventDeclaration));
            ExpressionColonFunc30 = LightupHelper.CreateStaticMethodAccessor<ExpressionColonDelegate30>(wrappedType, nameof(ExpressionColon));
            ExpressionElementFunc31 = LightupHelper.CreateStaticMethodAccessor<ExpressionElementDelegate31>(wrappedType, nameof(ExpressionElement));
            ExpressionStatementFunc32 = LightupHelper.CreateStaticMethodAccessor<ExpressionStatementDelegate32>(wrappedType, nameof(ExpressionStatement));
            ExpressionStatementFunc33 = LightupHelper.CreateStaticMethodAccessor<ExpressionStatementDelegate33>(wrappedType, nameof(ExpressionStatement));
            FileScopedNamespaceDeclarationFunc34 = LightupHelper.CreateStaticMethodAccessor<FileScopedNamespaceDeclarationDelegate34>(wrappedType, nameof(FileScopedNamespaceDeclaration));
            FileScopedNamespaceDeclarationFunc35 = LightupHelper.CreateStaticMethodAccessor<FileScopedNamespaceDeclarationDelegate35>(wrappedType, nameof(FileScopedNamespaceDeclaration));
            FileScopedNamespaceDeclarationFunc36 = LightupHelper.CreateStaticMethodAccessor<FileScopedNamespaceDeclarationDelegate36>(wrappedType, nameof(FileScopedNamespaceDeclaration));
            FixedStatementFunc37 = LightupHelper.CreateStaticMethodAccessor<FixedStatementDelegate37>(wrappedType, nameof(FixedStatement));
            FixedStatementFunc38 = LightupHelper.CreateStaticMethodAccessor<FixedStatementDelegate38>(wrappedType, nameof(FixedStatement));
            ForEachStatementFunc39 = LightupHelper.CreateStaticMethodAccessor<ForEachStatementDelegate39>(wrappedType, nameof(ForEachStatement));
            ForEachStatementFunc40 = LightupHelper.CreateStaticMethodAccessor<ForEachStatementDelegate40>(wrappedType, nameof(ForEachStatement));
            ForEachVariableStatementFunc41 = LightupHelper.CreateStaticMethodAccessor<ForEachVariableStatementDelegate41>(wrappedType, nameof(ForEachVariableStatement));
            ForEachVariableStatementFunc42 = LightupHelper.CreateStaticMethodAccessor<ForEachVariableStatementDelegate42>(wrappedType, nameof(ForEachVariableStatement));
            ForStatementFunc43 = LightupHelper.CreateStaticMethodAccessor<ForStatementDelegate43>(wrappedType, nameof(ForStatement));
            ForStatementFunc44 = LightupHelper.CreateStaticMethodAccessor<ForStatementDelegate44>(wrappedType, nameof(ForStatement));
            FunctionPointerCallingConventionFunc45 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerCallingConventionDelegate45>(wrappedType, nameof(FunctionPointerCallingConvention));
            FunctionPointerCallingConventionFunc46 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerCallingConventionDelegate46>(wrappedType, nameof(FunctionPointerCallingConvention));
            FunctionPointerParameterFunc47 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerParameterDelegate47>(wrappedType, nameof(FunctionPointerParameter));
            FunctionPointerParameterFunc48 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerParameterDelegate48>(wrappedType, nameof(FunctionPointerParameter));
            FunctionPointerParameterListFunc49 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerParameterListDelegate49>(wrappedType, nameof(FunctionPointerParameterList));
            FunctionPointerParameterListFunc50 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerParameterListDelegate50>(wrappedType, nameof(FunctionPointerParameterList));
            FunctionPointerTypeFunc51 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerTypeDelegate51>(wrappedType, nameof(FunctionPointerType));
            FunctionPointerTypeFunc52 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerTypeDelegate52>(wrappedType, nameof(FunctionPointerType));
            FunctionPointerTypeFunc53 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerTypeDelegate53>(wrappedType, nameof(FunctionPointerType));
            FunctionPointerUnmanagedCallingConventionFunc54 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerUnmanagedCallingConventionDelegate54>(wrappedType, nameof(FunctionPointerUnmanagedCallingConvention));
            FunctionPointerUnmanagedCallingConventionListFunc55 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerUnmanagedCallingConventionListDelegate55>(wrappedType, nameof(FunctionPointerUnmanagedCallingConventionList));
            FunctionPointerUnmanagedCallingConventionListFunc56 = LightupHelper.CreateStaticMethodAccessor<FunctionPointerUnmanagedCallingConventionListDelegate56>(wrappedType, nameof(FunctionPointerUnmanagedCallingConventionList));
            GlobalStatementFunc57 = LightupHelper.CreateStaticMethodAccessor<GlobalStatementDelegate57>(wrappedType, nameof(GlobalStatement));
            GotoStatementFunc58 = LightupHelper.CreateStaticMethodAccessor<GotoStatementDelegate58>(wrappedType, nameof(GotoStatement));
            GotoStatementFunc59 = LightupHelper.CreateStaticMethodAccessor<GotoStatementDelegate59>(wrappedType, nameof(GotoStatement));
            IfStatementFunc60 = LightupHelper.CreateStaticMethodAccessor<IfStatementDelegate60>(wrappedType, nameof(IfStatement));
            IfStatementFunc61 = LightupHelper.CreateStaticMethodAccessor<IfStatementDelegate61>(wrappedType, nameof(IfStatement));
            ImplicitObjectCreationExpressionFunc62 = LightupHelper.CreateStaticMethodAccessor<ImplicitObjectCreationExpressionDelegate62>(wrappedType, nameof(ImplicitObjectCreationExpression));
            ImplicitObjectCreationExpressionFunc63 = LightupHelper.CreateStaticMethodAccessor<ImplicitObjectCreationExpressionDelegate63>(wrappedType, nameof(ImplicitObjectCreationExpression));
            ImplicitObjectCreationExpressionFunc64 = LightupHelper.CreateStaticMethodAccessor<ImplicitObjectCreationExpressionDelegate64>(wrappedType, nameof(ImplicitObjectCreationExpression));
            InterfaceDeclarationFunc65 = LightupHelper.CreateStaticMethodAccessor<InterfaceDeclarationDelegate65>(wrappedType, nameof(InterfaceDeclaration));
            InterpolatedStringExpressionFunc66 = LightupHelper.CreateStaticMethodAccessor<InterpolatedStringExpressionDelegate66>(wrappedType, nameof(InterpolatedStringExpression));
            LabeledStatementFunc67 = LightupHelper.CreateStaticMethodAccessor<LabeledStatementDelegate67>(wrappedType, nameof(LabeledStatement));
            LabeledStatementFunc68 = LightupHelper.CreateStaticMethodAccessor<LabeledStatementDelegate68>(wrappedType, nameof(LabeledStatement));
            LineDirectivePositionFunc69 = LightupHelper.CreateStaticMethodAccessor<LineDirectivePositionDelegate69>(wrappedType, nameof(LineDirectivePosition));
            LineDirectivePositionFunc70 = LightupHelper.CreateStaticMethodAccessor<LineDirectivePositionDelegate70>(wrappedType, nameof(LineDirectivePosition));
            LineSpanDirectiveTriviaFunc71 = LightupHelper.CreateStaticMethodAccessor<LineSpanDirectiveTriviaDelegate71>(wrappedType, nameof(LineSpanDirectiveTrivia));
            LineSpanDirectiveTriviaFunc72 = LightupHelper.CreateStaticMethodAccessor<LineSpanDirectiveTriviaDelegate72>(wrappedType, nameof(LineSpanDirectiveTrivia));
            LineSpanDirectiveTriviaFunc73 = LightupHelper.CreateStaticMethodAccessor<LineSpanDirectiveTriviaDelegate73>(wrappedType, nameof(LineSpanDirectiveTrivia));
            ListPatternFunc74 = LightupHelper.CreateStaticMethodAccessor<ListPatternDelegate74>(wrappedType, nameof(ListPattern));
            ListPatternFunc75 = LightupHelper.CreateStaticMethodAccessor<ListPatternDelegate75>(wrappedType, nameof(ListPattern));
            ListPatternFunc76 = LightupHelper.CreateStaticMethodAccessor<ListPatternDelegate76>(wrappedType, nameof(ListPattern));
            LocalDeclarationStatementFunc77 = LightupHelper.CreateStaticMethodAccessor<LocalDeclarationStatementDelegate77>(wrappedType, nameof(LocalDeclarationStatement));
            LocalDeclarationStatementFunc78 = LightupHelper.CreateStaticMethodAccessor<LocalDeclarationStatementDelegate78>(wrappedType, nameof(LocalDeclarationStatement));
            LocalFunctionStatementFunc79 = LightupHelper.CreateStaticMethodAccessor<LocalFunctionStatementDelegate79>(wrappedType, nameof(LocalFunctionStatement));
            LocalFunctionStatementFunc80 = LightupHelper.CreateStaticMethodAccessor<LocalFunctionStatementDelegate80>(wrappedType, nameof(LocalFunctionStatement));
            LockStatementFunc81 = LightupHelper.CreateStaticMethodAccessor<LockStatementDelegate81>(wrappedType, nameof(LockStatement));
            LockStatementFunc82 = LightupHelper.CreateStaticMethodAccessor<LockStatementDelegate82>(wrappedType, nameof(LockStatement));
            NamespaceDeclarationFunc83 = LightupHelper.CreateStaticMethodAccessor<NamespaceDeclarationDelegate83>(wrappedType, nameof(NamespaceDeclaration));
            NamespaceDeclarationFunc84 = LightupHelper.CreateStaticMethodAccessor<NamespaceDeclarationDelegate84>(wrappedType, nameof(NamespaceDeclaration));
            NullableDirectiveTriviaFunc85 = LightupHelper.CreateStaticMethodAccessor<NullableDirectiveTriviaDelegate85>(wrappedType, nameof(NullableDirectiveTrivia));
            NullableDirectiveTriviaFunc86 = LightupHelper.CreateStaticMethodAccessor<NullableDirectiveTriviaDelegate86>(wrappedType, nameof(NullableDirectiveTrivia));
            OperatorDeclarationFunc87 = LightupHelper.CreateStaticMethodAccessor<OperatorDeclarationDelegate87>(wrappedType, nameof(OperatorDeclaration));
            OperatorDeclarationFunc88 = LightupHelper.CreateStaticMethodAccessor<OperatorDeclarationDelegate88>(wrappedType, nameof(OperatorDeclaration));
            OperatorDeclarationFunc89 = LightupHelper.CreateStaticMethodAccessor<OperatorDeclarationDelegate89>(wrappedType, nameof(OperatorDeclaration));
            OperatorMemberCrefFunc90 = LightupHelper.CreateStaticMethodAccessor<OperatorMemberCrefDelegate90>(wrappedType, nameof(OperatorMemberCref));
            ParenthesizedLambdaExpressionFunc91 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate91>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc92 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate92>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc93 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate93>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc94 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate94>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc95 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate95>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc96 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate96>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc97 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate97>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedLambdaExpressionFunc98 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedLambdaExpressionDelegate98>(wrappedType, nameof(ParenthesizedLambdaExpression));
            ParenthesizedPatternFunc99 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedPatternDelegate99>(wrappedType, nameof(ParenthesizedPattern));
            ParenthesizedPatternFunc100 = LightupHelper.CreateStaticMethodAccessor<ParenthesizedPatternDelegate100>(wrappedType, nameof(ParenthesizedPattern));
            ParseSyntaxTreeFunc101 = LightupHelper.CreateStaticMethodAccessor<ParseSyntaxTreeDelegate101>(wrappedType, nameof(ParseSyntaxTree));
            ParseSyntaxTreeFunc102 = LightupHelper.CreateStaticMethodAccessor<ParseSyntaxTreeDelegate102>(wrappedType, nameof(ParseSyntaxTree));
            ParseSyntaxTreeFunc103 = LightupHelper.CreateStaticMethodAccessor<ParseSyntaxTreeDelegate103>(wrappedType, nameof(ParseSyntaxTree));
            ParseSyntaxTreeFunc104 = LightupHelper.CreateStaticMethodAccessor<ParseSyntaxTreeDelegate104>(wrappedType, nameof(ParseSyntaxTree));
            ParseTypeNameFunc105 = LightupHelper.CreateStaticMethodAccessor<ParseTypeNameDelegate105>(wrappedType, nameof(ParseTypeName));
            PrimaryConstructorBaseTypeFunc106 = LightupHelper.CreateStaticMethodAccessor<PrimaryConstructorBaseTypeDelegate106>(wrappedType, nameof(PrimaryConstructorBaseType));
            PrimaryConstructorBaseTypeFunc107 = LightupHelper.CreateStaticMethodAccessor<PrimaryConstructorBaseTypeDelegate107>(wrappedType, nameof(PrimaryConstructorBaseType));
            RecordDeclarationFunc108 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate108>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc109 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate109>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc110 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate110>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc111 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate111>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc112 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate112>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc113 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate113>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc114 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate114>(wrappedType, nameof(RecordDeclaration));
            RecordDeclarationFunc115 = LightupHelper.CreateStaticMethodAccessor<RecordDeclarationDelegate115>(wrappedType, nameof(RecordDeclaration));
            RelationalPatternFunc116 = LightupHelper.CreateStaticMethodAccessor<RelationalPatternDelegate116>(wrappedType, nameof(RelationalPattern));
            ReturnStatementFunc117 = LightupHelper.CreateStaticMethodAccessor<ReturnStatementDelegate117>(wrappedType, nameof(ReturnStatement));
            ReturnStatementFunc118 = LightupHelper.CreateStaticMethodAccessor<ReturnStatementDelegate118>(wrappedType, nameof(ReturnStatement));
            ScopedTypeFunc119 = LightupHelper.CreateStaticMethodAccessor<ScopedTypeDelegate119>(wrappedType, nameof(ScopedType));
            ScopedTypeFunc120 = LightupHelper.CreateStaticMethodAccessor<ScopedTypeDelegate120>(wrappedType, nameof(ScopedType));
            SimpleLambdaExpressionFunc121 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate121>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc122 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate122>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc123 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate123>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc124 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate124>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc125 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate125>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc126 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate126>(wrappedType, nameof(SimpleLambdaExpression));
            SimpleLambdaExpressionFunc127 = LightupHelper.CreateStaticMethodAccessor<SimpleLambdaExpressionDelegate127>(wrappedType, nameof(SimpleLambdaExpression));
            SlicePatternFunc128 = LightupHelper.CreateStaticMethodAccessor<SlicePatternDelegate128>(wrappedType, nameof(SlicePattern));
            SlicePatternFunc129 = LightupHelper.CreateStaticMethodAccessor<SlicePatternDelegate129>(wrappedType, nameof(SlicePattern));
            SpreadElementFunc130 = LightupHelper.CreateStaticMethodAccessor<SpreadElementDelegate130>(wrappedType, nameof(SpreadElement));
            SpreadElementFunc131 = LightupHelper.CreateStaticMethodAccessor<SpreadElementDelegate131>(wrappedType, nameof(SpreadElement));
            StructDeclarationFunc132 = LightupHelper.CreateStaticMethodAccessor<StructDeclarationDelegate132>(wrappedType, nameof(StructDeclaration));
            StructDeclarationFunc133 = LightupHelper.CreateStaticMethodAccessor<StructDeclarationDelegate133>(wrappedType, nameof(StructDeclaration));
            SubpatternFunc134 = LightupHelper.CreateStaticMethodAccessor<SubpatternDelegate134>(wrappedType, nameof(Subpattern));
            SwitchStatementFunc135 = LightupHelper.CreateStaticMethodAccessor<SwitchStatementDelegate135>(wrappedType, nameof(SwitchStatement));
            ThrowStatementFunc136 = LightupHelper.CreateStaticMethodAccessor<ThrowStatementDelegate136>(wrappedType, nameof(ThrowStatement));
            ThrowStatementFunc137 = LightupHelper.CreateStaticMethodAccessor<ThrowStatementDelegate137>(wrappedType, nameof(ThrowStatement));
            TryStatementFunc138 = LightupHelper.CreateStaticMethodAccessor<TryStatementDelegate138>(wrappedType, nameof(TryStatement));
            TryStatementFunc139 = LightupHelper.CreateStaticMethodAccessor<TryStatementDelegate139>(wrappedType, nameof(TryStatement));
            TypePatternFunc140 = LightupHelper.CreateStaticMethodAccessor<TypePatternDelegate140>(wrappedType, nameof(TypePattern));
            UnaryPatternFunc141 = LightupHelper.CreateStaticMethodAccessor<UnaryPatternDelegate141>(wrappedType, nameof(UnaryPattern));
            UnaryPatternFunc142 = LightupHelper.CreateStaticMethodAccessor<UnaryPatternDelegate142>(wrappedType, nameof(UnaryPattern));
            UnsafeStatementFunc143 = LightupHelper.CreateStaticMethodAccessor<UnsafeStatementDelegate143>(wrappedType, nameof(UnsafeStatement));
            UnsafeStatementFunc144 = LightupHelper.CreateStaticMethodAccessor<UnsafeStatementDelegate144>(wrappedType, nameof(UnsafeStatement));
            UsingDirectiveFunc145 = LightupHelper.CreateStaticMethodAccessor<UsingDirectiveDelegate145>(wrappedType, nameof(UsingDirective));
            UsingDirectiveFunc146 = LightupHelper.CreateStaticMethodAccessor<UsingDirectiveDelegate146>(wrappedType, nameof(UsingDirective));
            UsingDirectiveFunc147 = LightupHelper.CreateStaticMethodAccessor<UsingDirectiveDelegate147>(wrappedType, nameof(UsingDirective));
            UsingDirectiveFunc148 = LightupHelper.CreateStaticMethodAccessor<UsingDirectiveDelegate148>(wrappedType, nameof(UsingDirective));
            UsingStatementFunc149 = LightupHelper.CreateStaticMethodAccessor<UsingStatementDelegate149>(wrappedType, nameof(UsingStatement));
            UsingStatementFunc150 = LightupHelper.CreateStaticMethodAccessor<UsingStatementDelegate150>(wrappedType, nameof(UsingStatement));
            WhileStatementFunc151 = LightupHelper.CreateStaticMethodAccessor<WhileStatementDelegate151>(wrappedType, nameof(WhileStatement));
            WhileStatementFunc152 = LightupHelper.CreateStaticMethodAccessor<WhileStatementDelegate152>(wrappedType, nameof(WhileStatement));
            WithExpressionFunc153 = LightupHelper.CreateStaticMethodAccessor<WithExpressionDelegate153>(wrappedType, nameof(WithExpression));
            WithExpressionFunc154 = LightupHelper.CreateStaticMethodAccessor<WithExpressionDelegate154>(wrappedType, nameof(WithExpression));
            YieldStatementFunc155 = LightupHelper.CreateStaticMethodAccessor<YieldStatementDelegate155>(wrappedType, nameof(YieldStatement));
            YieldStatementFunc156 = LightupHelper.CreateStaticMethodAccessor<YieldStatementDelegate156>(wrappedType, nameof(YieldStatement));
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax AnonymousMethodExpression(SyntaxTokenList modifiers, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax block, ExpressionSyntax? expressionBody)
            => AnonymousMethodExpressionFunc0(modifiers, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnonymousMethodExpressionSyntax? AnonymousMethodExpression(SyntaxToken asyncKeyword, SyntaxToken delegateKeyword, ParameterListSyntax? parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => AnonymousMethodExpressionFunc1(asyncKeyword, delegateKeyword, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BinaryPatternSyntaxWrapper BinaryPattern(SyntaxKind kind, PatternSyntax left, PatternSyntax right)
            => BinaryPatternFunc2(kind, left, right);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BinaryPatternSyntaxWrapper BinaryPattern(SyntaxKind kind, PatternSyntax left, SyntaxToken operatorToken, PatternSyntax right)
            => BinaryPatternFunc3(kind, left, operatorToken, right);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BlockSyntax Block(SyntaxList<AttributeListSyntax> attributeLists, SyntaxList<StatementSyntax> statements)
            => BlockFunc4(attributeLists, statements);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BlockSyntax Block(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken openBraceToken, SyntaxList<StatementSyntax> statements, SyntaxToken closeBraceToken)
            => BlockFunc5(attributeLists, openBraceToken, statements, closeBraceToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BreakStatementSyntax BreakStatement(SyntaxList<AttributeListSyntax> attributeLists)
            => BreakStatementFunc6(attributeLists);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static BreakStatementSyntax BreakStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken breakKeyword, SyntaxToken semicolonToken)
            => BreakStatementFunc7(attributeLists, breakKeyword, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static CheckedStatementSyntax CheckedStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block)
            => CheckedStatementFunc8(kind, attributeLists, block);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static CheckedStatementSyntax CheckedStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken keyword, BlockSyntax block)
            => CheckedStatementFunc9(kind, attributeLists, keyword, block);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static ClassDeclarationSyntax ClassDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
            => ClassDeclarationFunc10(attributeLists, modifiers, identifier, typeParameterList, parameterList, baseList, constraintClauses, members);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static ClassDeclarationSyntax ClassDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => ClassDeclarationFunc11(attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static CollectionExpressionSyntaxWrapper CollectionExpression(SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements)
            => CollectionExpressionFunc12(elements);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static CollectionExpressionSyntaxWrapper CollectionExpression(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<CollectionElementSyntaxWrapper> elements, SyntaxToken closeBracketToken)
            => CollectionExpressionFunc13(openBracketToken, elements, closeBracketToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ContinueStatementSyntax ContinueStatement(SyntaxList<AttributeListSyntax> attributeLists)
            => ContinueStatementFunc14(attributeLists);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ContinueStatementSyntax ContinueStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken continueKeyword, SyntaxToken semicolonToken)
            => ContinueStatementFunc15(attributeLists, continueKeyword, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody)
            => ConversionOperatorDeclarationFunc16(attributeLists, modifiers, implicitOrExplicitKeyword, explicitInterfaceSpecifier, type, parameterList, body, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => ConversionOperatorDeclarationFunc17(attributeLists, modifiers, implicitOrExplicitKeyword, explicitInterfaceSpecifier, operatorKeyword, type, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken implicitOrExplicitKeyword, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => ConversionOperatorDeclarationFunc18(attributeLists, modifiers, implicitOrExplicitKeyword, explicitInterfaceSpecifier, operatorKeyword, checkedKeyword, type, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, TypeSyntax type, CrefParameterListSyntax? parameters)
            => ConversionOperatorMemberCrefFunc19(implicitOrExplicitKeyword, operatorKeyword, checkedKeyword, type, parameters);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static CrefParameterSyntax CrefParameter(SyntaxToken refKindKeyword, SyntaxToken readOnlyKeyword, TypeSyntax type)
            => CrefParameterFunc20(refKindKeyword, readOnlyKeyword, type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static DefaultConstraintSyntaxWrapper DefaultConstraint()
            => DefaultConstraintFunc21();

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static DefaultConstraintSyntaxWrapper DefaultConstraint(SyntaxToken defaultKeyword)
            => DefaultConstraintFunc22(defaultKeyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static DoStatementSyntax DoStatement(SyntaxList<AttributeListSyntax> attributeLists, StatementSyntax statement, ExpressionSyntax condition)
            => DoStatementFunc23(attributeLists, statement, condition);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static DoStatementSyntax DoStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken doKeyword, StatementSyntax statement, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, SyntaxToken semicolonToken)
            => DoStatementFunc24(attributeLists, doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static EmptyStatementSyntax EmptyStatement(SyntaxList<AttributeListSyntax> attributeLists)
            => EmptyStatementFunc25(attributeLists);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static EmptyStatementSyntax EmptyStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken semicolonToken)
            => EmptyStatementFunc26(attributeLists, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static EnumMemberDeclarationSyntax EnumMemberDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, EqualsValueClauseSyntax? equalsValue)
            => EnumMemberDeclarationFunc27(attributeLists, modifiers, identifier, equalsValue);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static EventDeclarationSyntax EventDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, SyntaxToken identifier, SyntaxToken semicolonToken)
            => EventDeclarationFunc28(attributeLists, modifiers, eventKeyword, type, explicitInterfaceSpecifier, identifier, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static EventDeclarationSyntax EventDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken eventKeyword, TypeSyntax type, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken identifier, AccessorListSyntax? accessorList, SyntaxToken semicolonToken)
            => EventDeclarationFunc29(attributeLists, modifiers, eventKeyword, type, explicitInterfaceSpecifier, identifier, accessorList, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ExpressionColonSyntaxWrapper ExpressionColon(ExpressionSyntax expression, SyntaxToken colonToken)
            => ExpressionColonFunc30(expression, colonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static ExpressionElementSyntaxWrapper ExpressionElement(ExpressionSyntax expression)
            => ExpressionElementFunc31(expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ExpressionStatementSyntax ExpressionStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression)
            => ExpressionStatementFunc32(attributeLists, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ExpressionStatementSyntax ExpressionStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression, SyntaxToken semicolonToken)
            => ExpressionStatementFunc33(attributeLists, expression, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclaration(NameSyntax name)
            => FileScopedNamespaceDeclarationFunc34(name);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, NameSyntax name, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
            => FileScopedNamespaceDeclarationFunc35(attributeLists, modifiers, name, externs, usings, members);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static FileScopedNamespaceDeclarationSyntaxWrapper FileScopedNamespaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken semicolonToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
            => FileScopedNamespaceDeclarationFunc36(attributeLists, modifiers, namespaceKeyword, name, semicolonToken, externs, usings, members);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FixedStatementSyntax FixedStatement(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax declaration, StatementSyntax statement)
            => FixedStatementFunc37(attributeLists, declaration, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FixedStatementSyntax FixedStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken fixedKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax declaration, SyntaxToken closeParenToken, StatementSyntax statement)
            => FixedStatementFunc38(attributeLists, fixedKeyword, openParenToken, declaration, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForEachStatementSyntax ForEachStatement(SyntaxList<AttributeListSyntax> attributeLists, TypeSyntax type, SyntaxToken identifier, ExpressionSyntax expression, StatementSyntax statement)
            => ForEachStatementFunc39(attributeLists, type, identifier, expression, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForEachStatementSyntax ForEachStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, TypeSyntax type, SyntaxToken identifier, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
            => ForEachStatementFunc40(attributeLists, awaitKeyword, forEachKeyword, openParenToken, type, identifier, inKeyword, expression, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForEachVariableStatementSyntax ForEachVariableStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax variable, ExpressionSyntax expression, StatementSyntax statement)
            => ForEachVariableStatementFunc41(attributeLists, variable, expression, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForEachVariableStatementSyntax ForEachVariableStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken forEachKeyword, SyntaxToken openParenToken, ExpressionSyntax variable, SyntaxToken inKeyword, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
            => ForEachVariableStatementFunc42(attributeLists, awaitKeyword, forEachKeyword, openParenToken, variable, inKeyword, expression, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForStatementSyntax ForStatement(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, ExpressionSyntax? condition, SeparatedSyntaxList<ExpressionSyntax> incrementors, StatementSyntax statement)
            => ForStatementFunc43(attributeLists, declaration, initializers, condition, incrementors, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ForStatementSyntax ForStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, SeparatedSyntaxList<ExpressionSyntax> initializers, SyntaxToken firstSemicolonToken, ExpressionSyntax? condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExpressionSyntax> incrementors, SyntaxToken closeParenToken, StatementSyntax statement)
            => ForStatementFunc44(attributeLists, forKeyword, openParenToken, declaration, initializers, firstSemicolonToken, condition, secondSemicolonToken, incrementors, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerCallingConventionSyntaxWrapper FunctionPointerCallingConvention(SyntaxToken managedOrUnmanagedKeyword)
            => FunctionPointerCallingConventionFunc45(managedOrUnmanagedKeyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerCallingConventionSyntaxWrapper FunctionPointerCallingConvention(SyntaxToken managedOrUnmanagedKeyword, FunctionPointerUnmanagedCallingConventionListSyntaxWrapper unmanagedCallingConventionList)
            => FunctionPointerCallingConventionFunc46(managedOrUnmanagedKeyword, unmanagedCallingConventionList);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerParameterSyntaxWrapper FunctionPointerParameter(TypeSyntax type)
            => FunctionPointerParameterFunc47(type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerParameterSyntaxWrapper FunctionPointerParameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax type)
            => FunctionPointerParameterFunc48(attributeLists, modifiers, type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerParameterListSyntaxWrapper FunctionPointerParameterList(SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters)
            => FunctionPointerParameterListFunc49(parameters);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerParameterListSyntaxWrapper FunctionPointerParameterList(SyntaxToken lessThanToken, SeparatedSyntaxListWrapper<FunctionPointerParameterSyntaxWrapper> parameters, SyntaxToken greaterThanToken)
            => FunctionPointerParameterListFunc50(lessThanToken, parameters, greaterThanToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerTypeSyntaxWrapper FunctionPointerType()
            => FunctionPointerTypeFunc51();

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerTypeSyntaxWrapper FunctionPointerType(FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList)
            => FunctionPointerTypeFunc52(callingConvention, parameterList);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerTypeSyntaxWrapper FunctionPointerType(SyntaxToken delegateKeyword, SyntaxToken asteriskToken, FunctionPointerCallingConventionSyntaxWrapper callingConvention, FunctionPointerParameterListSyntaxWrapper parameterList)
            => FunctionPointerTypeFunc53(delegateKeyword, asteriskToken, callingConvention, parameterList);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerUnmanagedCallingConventionSyntaxWrapper FunctionPointerUnmanagedCallingConvention(SyntaxToken name)
            => FunctionPointerUnmanagedCallingConventionFunc54(name);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper FunctionPointerUnmanagedCallingConventionList(SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions)
            => FunctionPointerUnmanagedCallingConventionListFunc55(callingConventions);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static FunctionPointerUnmanagedCallingConventionListSyntaxWrapper FunctionPointerUnmanagedCallingConventionList(SyntaxToken openBracketToken, SeparatedSyntaxListWrapper<FunctionPointerUnmanagedCallingConventionSyntaxWrapper> callingConventions, SyntaxToken closeBracketToken)
            => FunctionPointerUnmanagedCallingConventionListFunc56(openBracketToken, callingConventions, closeBracketToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static GlobalStatementSyntax GlobalStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, StatementSyntax statement)
            => GlobalStatementFunc57(attributeLists, modifiers, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static GotoStatementSyntax GotoStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax? expression)
            => GotoStatementFunc58(kind, attributeLists, caseOrDefaultKeyword, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static GotoStatementSyntax GotoStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken gotoKeyword, SyntaxToken caseOrDefaultKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken)
            => GotoStatementFunc59(kind, attributeLists, gotoKeyword, caseOrDefaultKeyword, expression, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static IfStatementSyntax IfStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax condition, StatementSyntax statement, ElseClauseSyntax? @else)
            => IfStatementFunc60(attributeLists, condition, statement, @else);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static IfStatementSyntax IfStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken ifKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement, ElseClauseSyntax? @else)
            => IfStatementFunc61(attributeLists, ifKeyword, openParenToken, condition, closeParenToken, statement, @else);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpression()
            => ImplicitObjectCreationExpressionFunc62();

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpression(ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer)
            => ImplicitObjectCreationExpressionFunc63(argumentList, initializer);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ImplicitObjectCreationExpressionSyntaxWrapper ImplicitObjectCreationExpression(SyntaxToken newKeyword, ArgumentListSyntax argumentList, InitializerExpressionSyntax? initializer)
            => ImplicitObjectCreationExpressionFunc64(newKeyword, argumentList, initializer);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static InterfaceDeclarationSyntax InterfaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => InterfaceDeclarationFunc65(attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static InterpolatedStringExpressionSyntax InterpolatedStringExpression(SyntaxToken stringStartToken, SyntaxToken stringEndToken)
            => InterpolatedStringExpressionFunc66(stringStartToken, stringEndToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LabeledStatementSyntax LabeledStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, StatementSyntax statement)
            => LabeledStatementFunc67(attributeLists, identifier, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LabeledStatementSyntax LabeledStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken identifier, SyntaxToken colonToken, StatementSyntax statement)
            => LabeledStatementFunc68(attributeLists, identifier, colonToken, statement);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static LineDirectivePositionSyntaxWrapper LineDirectivePosition(SyntaxToken line, SyntaxToken character)
            => LineDirectivePositionFunc69(line, character);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static LineDirectivePositionSyntaxWrapper LineDirectivePosition(SyntaxToken openParenToken, SyntaxToken line, SyntaxToken commaToken, SyntaxToken character, SyntaxToken closeParenToken)
            => LineDirectivePositionFunc70(openParenToken, line, commaToken, character, closeParenToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTrivia(LineDirectivePositionSyntaxWrapper start, LineDirectivePositionSyntaxWrapper end, SyntaxToken file, Boolean isActive)
            => LineSpanDirectiveTriviaFunc71(start, end, file, isActive);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTrivia(LineDirectivePositionSyntaxWrapper start, LineDirectivePositionSyntaxWrapper end, SyntaxToken characterOffset, SyntaxToken file, Boolean isActive)
            => LineSpanDirectiveTriviaFunc72(start, end, characterOffset, file, isActive);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static LineSpanDirectiveTriviaSyntaxWrapper LineSpanDirectiveTrivia(SyntaxToken hashToken, SyntaxToken lineKeyword, LineDirectivePositionSyntaxWrapper start, SyntaxToken minusToken, LineDirectivePositionSyntaxWrapper end, SyntaxToken characterOffset, SyntaxToken file, SyntaxToken endOfDirectiveToken, Boolean isActive)
            => LineSpanDirectiveTriviaFunc73(hashToken, lineKeyword, start, minusToken, end, characterOffset, file, endOfDirectiveToken, isActive);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ListPatternSyntaxWrapper ListPattern(SeparatedSyntaxList<PatternSyntax> patterns)
            => ListPatternFunc74(patterns);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ListPatternSyntaxWrapper ListPattern(SeparatedSyntaxList<PatternSyntax> patterns, VariableDesignationSyntax? designation)
            => ListPatternFunc75(patterns, designation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ListPatternSyntaxWrapper ListPattern(SyntaxToken openBracketToken, SeparatedSyntaxList<PatternSyntax> patterns, SyntaxToken closeBracketToken, VariableDesignationSyntax? designation)
            => ListPatternFunc76(openBracketToken, patterns, closeBracketToken, designation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LocalDeclarationStatementSyntax LocalDeclarationStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration)
            => LocalDeclarationStatementFunc77(attributeLists, modifiers, declaration);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LocalDeclarationStatementSyntax LocalDeclarationStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken usingKeyword, SyntaxTokenList modifiers, VariableDeclarationSyntax declaration, SyntaxToken semicolonToken)
            => LocalDeclarationStatementFunc78(attributeLists, awaitKeyword, usingKeyword, modifiers, declaration, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LocalFunctionStatementSyntax LocalFunctionStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody)
            => LocalFunctionStatementFunc79(attributeLists, modifiers, returnType, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LocalFunctionStatementSyntax LocalFunctionStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => LocalFunctionStatementFunc80(attributeLists, modifiers, returnType, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LockStatementSyntax LockStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax expression, StatementSyntax statement)
            => LockStatementFunc81(attributeLists, expression, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static LockStatementSyntax LockStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken lockKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, StatementSyntax statement)
            => LockStatementFunc82(attributeLists, lockKeyword, openParenToken, expression, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static NamespaceDeclarationSyntax NamespaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, NameSyntax name, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members)
            => NamespaceDeclarationFunc83(attributeLists, modifiers, name, externs, usings, members);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static NamespaceDeclarationSyntax NamespaceDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken namespaceKeyword, NameSyntax name, SyntaxToken openBraceToken, SyntaxList<ExternAliasDirectiveSyntax> externs, SyntaxList<UsingDirectiveSyntax> usings, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => NamespaceDeclarationFunc84(attributeLists, modifiers, namespaceKeyword, name, openBraceToken, externs, usings, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static NullableDirectiveTriviaSyntax NullableDirectiveTrivia(SyntaxToken settingToken, SyntaxToken targetToken, Boolean isActive)
            => NullableDirectiveTriviaFunc85(settingToken, targetToken, isActive);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static NullableDirectiveTriviaSyntax NullableDirectiveTrivia(SyntaxToken hashToken, SyntaxToken nullableKeyword, SyntaxToken settingToken, SyntaxToken targetToken, SyntaxToken endOfDirectiveToken, Boolean isActive)
            => NullableDirectiveTriviaFunc86(hashToken, nullableKeyword, settingToken, targetToken, endOfDirectiveToken, isActive);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody)
            => OperatorDeclarationFunc87(attributeLists, modifiers, returnType, explicitInterfaceSpecifier, operatorToken, parameterList, body, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => OperatorDeclarationFunc88(attributeLists, modifiers, returnType, explicitInterfaceSpecifier, operatorKeyword, operatorToken, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static OperatorDeclarationSyntax OperatorDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax returnType, ExplicitInterfaceSpecifierSyntax? explicitInterfaceSpecifier, SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, ParameterListSyntax parameterList, BlockSyntax? body, ArrowExpressionClauseSyntax? expressionBody, SyntaxToken semicolonToken)
            => OperatorDeclarationFunc89(attributeLists, modifiers, returnType, explicitInterfaceSpecifier, operatorKeyword, checkedKeyword, operatorToken, parameterList, body, expressionBody, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorKeyword, SyntaxToken checkedKeyword, SyntaxToken operatorToken, CrefParameterListSyntax? parameters)
            => OperatorMemberCrefFunc90(operatorKeyword, checkedKeyword, operatorToken, parameters);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression()
            => ParenthesizedLambdaExpressionFunc91();

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc92(parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxTokenList modifiers, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc93(modifiers, parameterList, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxTokenList modifiers, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc94(modifiers, parameterList, arrowToken, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxToken asyncKeyword, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc95(asyncKeyword, parameterList, arrowToken, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc96(attributeLists, modifiers, parameterList, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc97(attributeLists, modifiers, returnType, parameterList, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeSyntax? returnType, ParameterListSyntax parameterList, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => ParenthesizedLambdaExpressionFunc98(attributeLists, modifiers, returnType, parameterList, arrowToken, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedPatternSyntaxWrapper ParenthesizedPattern(PatternSyntax pattern)
            => ParenthesizedPatternFunc99(pattern);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ParenthesizedPatternSyntaxWrapper ParenthesizedPattern(SyntaxToken openParenToken, PatternSyntax pattern, SyntaxToken closeParenToken)
            => ParenthesizedPatternFunc100(openParenToken, pattern, closeParenToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SyntaxTree ParseSyntaxTree(SourceText text, ParseOptions? options, String path, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, CancellationToken cancellationToken)
            => ParseSyntaxTreeFunc101(text, options, path, diagnosticOptions, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SyntaxTree ParseSyntaxTree(String text, ParseOptions? options, String path, Encoding? encoding, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, CancellationToken cancellationToken)
            => ParseSyntaxTreeFunc102(text, options, path, encoding, diagnosticOptions, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SyntaxTree ParseSyntaxTree(SourceText text, ParseOptions? options, String path, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, Nullable<Boolean> isGeneratedCode, CancellationToken cancellationToken)
            => ParseSyntaxTreeFunc103(text, options, path, diagnosticOptions, isGeneratedCode, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SyntaxTree ParseSyntaxTree(String text, ParseOptions? options, String path, Encoding? encoding, ImmutableDictionary<String, ReportDiagnostic>? diagnosticOptions, Nullable<Boolean> isGeneratedCode, CancellationToken cancellationToken)
            => ParseSyntaxTreeFunc104(text, options, path, encoding, diagnosticOptions, isGeneratedCode, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static TypeSyntax ParseTypeName(String text, Int32 offset, ParseOptions? options, Boolean consumeFullText)
            => ParseTypeNameFunc105(text, offset, options, consumeFullText);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static PrimaryConstructorBaseTypeSyntaxWrapper PrimaryConstructorBaseType(TypeSyntax type)
            => PrimaryConstructorBaseTypeFunc106(type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static PrimaryConstructorBaseTypeSyntaxWrapper PrimaryConstructorBaseType(TypeSyntax type, ArgumentListSyntax argumentList)
            => PrimaryConstructorBaseTypeFunc107(type, argumentList);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxToken keyword, SyntaxToken identifier)
            => RecordDeclarationFunc108(keyword, identifier);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxToken keyword, String identifier)
            => RecordDeclarationFunc109(keyword, identifier);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxKind kind, SyntaxToken keyword, SyntaxToken identifier)
            => RecordDeclarationFunc110(kind, keyword, identifier);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxKind kind, SyntaxToken keyword, String identifier)
            => RecordDeclarationFunc111(kind, keyword, identifier);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
            => RecordDeclarationFunc112(attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, members);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
            => RecordDeclarationFunc113(kind, attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, members);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => RecordDeclarationFunc114(attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static RecordDeclarationSyntaxWrapper RecordDeclaration(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken classOrStructKeyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => RecordDeclarationFunc115(kind, attributeLists, modifiers, keyword, classOrStructKeyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static RelationalPatternSyntaxWrapper RelationalPattern(SyntaxToken operatorToken, ExpressionSyntax expression)
            => RelationalPatternFunc116(operatorToken, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ReturnStatementSyntax ReturnStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression)
            => ReturnStatementFunc117(attributeLists, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ReturnStatementSyntax ReturnStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken returnKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken)
            => ReturnStatementFunc118(attributeLists, returnKeyword, expression, semicolonToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ScopedTypeSyntaxWrapper ScopedType(TypeSyntax type)
            => ScopedTypeFunc119(type);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static ScopedTypeSyntaxWrapper ScopedType(SyntaxToken scopedKeyword, TypeSyntax type)
            => ScopedTypeFunc120(scopedKeyword, type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(ParameterSyntax parameter)
            => SimpleLambdaExpressionFunc121(parameter);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc122(parameter, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxTokenList modifiers, ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc123(modifiers, parameter, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc124(modifiers, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxToken asyncKeyword, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc125(asyncKeyword, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc126(attributeLists, modifiers, parameter, block, expressionBody);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SimpleLambdaExpressionSyntax SimpleLambdaExpression(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, ParameterSyntax parameter, SyntaxToken arrowToken, BlockSyntax? block, ExpressionSyntax? expressionBody)
            => SimpleLambdaExpressionFunc127(attributeLists, modifiers, parameter, arrowToken, block, expressionBody);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static SlicePatternSyntaxWrapper SlicePattern(PatternSyntax? pattern)
            => SlicePatternFunc128(pattern);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static SlicePatternSyntaxWrapper SlicePattern(SyntaxToken dotDotToken, PatternSyntax? pattern)
            => SlicePatternFunc129(dotDotToken, pattern);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static SpreadElementSyntaxWrapper SpreadElement(ExpressionSyntax expression)
            => SpreadElementFunc130(expression);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static SpreadElementSyntaxWrapper SpreadElement(SyntaxToken operatorToken, ExpressionSyntax expression)
            => SpreadElementFunc131(operatorToken, expression);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static StructDeclarationSyntax StructDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxList<MemberDeclarationSyntax> members)
            => StructDeclarationFunc132(attributeLists, modifiers, identifier, typeParameterList, parameterList, baseList, constraintClauses, members);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static StructDeclarationSyntax StructDeclaration(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, SyntaxToken keyword, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax? parameterList, BaseListSyntax? baseList, SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses, SyntaxToken openBraceToken, SyntaxList<MemberDeclarationSyntax> members, SyntaxToken closeBraceToken, SyntaxToken semicolonToken)
            => StructDeclarationFunc133(attributeLists, modifiers, keyword, identifier, typeParameterList, parameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static SubpatternSyntax Subpattern(BaseExpressionColonSyntaxWrapper expressionColon, PatternSyntax pattern)
            => SubpatternFunc134(expressionColon, pattern);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static SwitchStatementSyntax SwitchStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken switchKeyword, SyntaxToken openParenToken, ExpressionSyntax expression, SyntaxToken closeParenToken, SyntaxToken openBraceToken, SyntaxList<SwitchSectionSyntax> sections, SyntaxToken closeBraceToken)
            => SwitchStatementFunc135(attributeLists, switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, sections, closeBraceToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ThrowStatementSyntax ThrowStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression)
            => ThrowStatementFunc136(attributeLists, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ThrowStatementSyntax ThrowStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken throwKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken)
            => ThrowStatementFunc137(attributeLists, throwKeyword, expression, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static TryStatementSyntax TryStatement(SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax? @finally)
            => TryStatementFunc138(attributeLists, block, catches, @finally);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static TryStatementSyntax TryStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken tryKeyword, BlockSyntax block, SyntaxList<CatchClauseSyntax> catches, FinallyClauseSyntax? @finally)
            => TryStatementFunc139(attributeLists, tryKeyword, block, catches, @finally);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static TypePatternSyntaxWrapper TypePattern(TypeSyntax type)
            => TypePatternFunc140(type);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UnaryPatternSyntaxWrapper UnaryPattern(PatternSyntax pattern)
            => UnaryPatternFunc141(pattern);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UnaryPatternSyntaxWrapper UnaryPattern(SyntaxToken operatorToken, PatternSyntax pattern)
            => UnaryPatternFunc142(operatorToken, pattern);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UnsafeStatementSyntax UnsafeStatement(SyntaxList<AttributeListSyntax> attributeLists, BlockSyntax block)
            => UnsafeStatementFunc143(attributeLists, block);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UnsafeStatementSyntax UnsafeStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken unsafeKeyword, BlockSyntax block)
            => UnsafeStatementFunc144(attributeLists, unsafeKeyword, block);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static UsingDirectiveSyntax UsingDirective(TypeSyntax namespaceOrType)
            => UsingDirectiveFunc145(namespaceOrType);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static UsingDirectiveSyntax UsingDirective(NameEqualsSyntax? alias, TypeSyntax namespaceOrType)
            => UsingDirectiveFunc146(alias, namespaceOrType);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static UsingDirectiveSyntax UsingDirective(SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, NameEqualsSyntax? alias, NameSyntax name, SyntaxToken semicolonToken)
            => UsingDirectiveFunc147(globalKeyword, usingKeyword, staticKeyword, alias, name, semicolonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static UsingDirectiveSyntax UsingDirective(SyntaxToken globalKeyword, SyntaxToken usingKeyword, SyntaxToken staticKeyword, SyntaxToken unsafeKeyword, NameEqualsSyntax? alias, TypeSyntax namespaceOrType, SyntaxToken semicolonToken)
            => UsingDirectiveFunc148(globalKeyword, usingKeyword, staticKeyword, unsafeKeyword, alias, namespaceOrType, semicolonToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UsingStatementSyntax UsingStatement(SyntaxList<AttributeListSyntax> attributeLists, VariableDeclarationSyntax? declaration, ExpressionSyntax? expression, StatementSyntax statement)
            => UsingStatementFunc149(attributeLists, declaration, expression, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static UsingStatementSyntax UsingStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken awaitKeyword, SyntaxToken usingKeyword, SyntaxToken openParenToken, VariableDeclarationSyntax? declaration, ExpressionSyntax? expression, SyntaxToken closeParenToken, StatementSyntax statement)
            => UsingStatementFunc150(attributeLists, awaitKeyword, usingKeyword, openParenToken, declaration, expression, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static WhileStatementSyntax WhileStatement(SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax condition, StatementSyntax statement)
            => WhileStatementFunc151(attributeLists, condition, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static WhileStatementSyntax WhileStatement(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExpressionSyntax condition, SyntaxToken closeParenToken, StatementSyntax statement)
            => WhileStatementFunc152(attributeLists, whileKeyword, openParenToken, condition, closeParenToken, statement);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static WithExpressionSyntaxWrapper WithExpression(ExpressionSyntax expression, InitializerExpressionSyntax initializer)
            => WithExpressionFunc153(expression, initializer);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static WithExpressionSyntaxWrapper WithExpression(ExpressionSyntax expression, SyntaxToken withKeyword, InitializerExpressionSyntax initializer)
            => WithExpressionFunc154(expression, withKeyword, initializer);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static YieldStatementSyntax YieldStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, ExpressionSyntax? expression)
            => YieldStatementFunc155(kind, attributeLists, expression);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static YieldStatementSyntax YieldStatement(SyntaxKind kind, SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken yieldKeyword, SyntaxToken returnOrBreakKeyword, ExpressionSyntax? expression, SyntaxToken semicolonToken)
            => YieldStatementFunc156(kind, attributeLists, yieldKeyword, returnOrBreakKeyword, expression, semicolonToken);
    }
}
