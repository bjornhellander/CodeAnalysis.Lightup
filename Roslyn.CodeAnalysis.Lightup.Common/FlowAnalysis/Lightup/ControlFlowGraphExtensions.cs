// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.FlowAnalysis.Lightup
{
    public static class ControlFlowGraphExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ControlFlowGraph CreateDelegate0(IAttributeOperationWrapper attribute, CancellationToken cancellationToken);

        private static readonly CreateDelegate0 CreateFunc0;

        static ControlFlowGraphExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(WrappedType, nameof(Create));
        }

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static ControlFlowGraph Create(IAttributeOperationWrapper attribute, CancellationToken cancellationToken)
            => CreateFunc0(attribute, cancellationToken);
    }
}
