// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct AdditionalFileAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext";

        public static readonly Type? WrappedType;

        private delegate AdditionalText AdditionalFileGetterDelegate(object? _obj);
        private delegate CancellationToken CancellationTokenGetterDelegate(object? _obj);
        private delegate Compilation CompilationGetterDelegate(object? _obj);
        private delegate Nullable<TextSpan> FilterSpanGetterDelegate(object? _obj);
        private delegate AnalyzerOptions OptionsGetterDelegate(object? _obj);

        private delegate void ReportDiagnosticDelegate0(object? _obj, Diagnostic diagnostic);

        private static readonly AdditionalFileGetterDelegate AdditionalFileGetterFunc;
        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly FilterSpanGetterDelegate FilterSpanGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;

        private static readonly ReportDiagnosticDelegate0 ReportDiagnosticFunc0;

        private readonly object? wrappedObject;

        static AdditionalFileAnalysisContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalFileGetterFunc = LightupHelper.CreateGetAccessor<AdditionalFileGetterDelegate>(WrappedType, nameof(AdditionalFile));
            CancellationTokenGetterFunc = LightupHelper.CreateGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CompilationGetterFunc = LightupHelper.CreateGetAccessor<CompilationGetterDelegate>(WrappedType, nameof(Compilation));
            FilterSpanGetterFunc = LightupHelper.CreateGetAccessor<FilterSpanGetterDelegate>(WrappedType, nameof(FilterSpan));
            OptionsGetterFunc = LightupHelper.CreateGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));

            ReportDiagnosticFunc0 = LightupHelper.CreateMethodAccessor<ReportDiagnosticDelegate0>(WrappedType, nameof(ReportDiagnostic));
        }

        private AdditionalFileAnalysisContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly AdditionalText AdditionalFile
            => AdditionalFileGetterFunc(wrappedObject);

        public readonly CancellationToken CancellationToken
            => CancellationTokenGetterFunc(wrappedObject);

        public readonly Compilation Compilation
            => CompilationGetterFunc(wrappedObject);

        public readonly Nullable<TextSpan> FilterSpan
            => FilterSpanGetterFunc(wrappedObject);

        public readonly AnalyzerOptions Options
            => OptionsGetterFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AdditionalFileAnalysisContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AdditionalFileAnalysisContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void ReportDiagnostic(Diagnostic diagnostic)
            => ReportDiagnosticFunc0(wrappedObject, diagnostic);
    }
}
