// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct AdditionalFileAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, AdditionalText> AdditionalFileFunc;
        private static readonly Func<object?, CancellationToken> CancellationTokenFunc;
        private static readonly Func<object?, Compilation> CompilationFunc;
        private static readonly Func<object?, Nullable<TextSpan>> FilterSpanFunc;
        private static readonly Func<object?, AnalyzerOptions> OptionsFunc;

        private static readonly Action<object?, Diagnostic> ReportDiagnosticFunc0;

        private readonly object? wrappedObject;

        static AdditionalFileAnalysisContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalFileFunc = LightupHelper.CreateGetAccessor<object?, AdditionalText>(WrappedType, nameof(AdditionalFile));
            CancellationTokenFunc = LightupHelper.CreateGetAccessor<object?, CancellationToken>(WrappedType, nameof(CancellationToken));
            CompilationFunc = LightupHelper.CreateGetAccessor<object?, Compilation>(WrappedType, nameof(Compilation));
            FilterSpanFunc = LightupHelper.CreateGetAccessor<object?, Nullable<TextSpan>>(WrappedType, nameof(FilterSpan));
            OptionsFunc = LightupHelper.CreateGetAccessor<object?, AnalyzerOptions>(WrappedType, nameof(Options));

            ReportDiagnosticFunc0 = LightupHelper.CreateVoidMethodAccessor<object?, Diagnostic>(WrappedType, nameof(ReportDiagnostic));
        }

        private AdditionalFileAnalysisContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly AdditionalText AdditionalFile
            => AdditionalFileFunc(wrappedObject);

        public readonly CancellationToken CancellationToken
            => CancellationTokenFunc(wrappedObject);

        public readonly Compilation Compilation
            => CompilationFunc(wrappedObject);

        public readonly Nullable<TextSpan> FilterSpan
            => FilterSpanFunc(wrappedObject);

        public readonly AnalyzerOptions Options
            => OptionsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AdditionalFileAnalysisContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AdditionalFileAnalysisContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void ReportDiagnostic(Diagnostic diagnostic)
            => ReportDiagnosticFunc0(wrappedObject, diagnostic);
    }
}
