// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext. Added in version 3.8.0.0.</summary>
    public readonly struct AdditionalFileAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate AdditionalText AdditionalFileGetterDelegate(object? _obj);
        private delegate CancellationToken CancellationTokenGetterDelegate(object? _obj);
        private delegate Compilation CompilationGetterDelegate(object? _obj);
        private delegate Nullable<TextSpan> FilterSpanGetterDelegate(object? _obj);
        private delegate AnalyzerOptions OptionsGetterDelegate(object? _obj);

        private delegate void ReportDiagnosticDelegate0(object? _obj, Diagnostic diagnostic);

        private static readonly AdditionalFileGetterDelegate AdditionalFileGetterFunc;
        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly FilterSpanGetterDelegate FilterSpanGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;

        private static readonly ReportDiagnosticDelegate0 ReportDiagnosticFunc0;

        private readonly object? wrappedObject;

        static AdditionalFileAnalysisContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalFileGetterFunc = LightupHelper.CreateInstanceGetAccessor<AdditionalFileGetterDelegate>(WrappedType, nameof(AdditionalFile));
            CancellationTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CompilationGetterFunc = LightupHelper.CreateInstanceGetAccessor<CompilationGetterDelegate>(WrappedType, nameof(Compilation));
            FilterSpanGetterFunc = LightupHelper.CreateInstanceGetAccessor<FilterSpanGetterDelegate>(WrappedType, nameof(FilterSpan));
            OptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));

            ReportDiagnosticFunc0 = LightupHelper.CreateInstanceMethodAccessor<ReportDiagnosticDelegate0>(WrappedType, "ReportDiagnostic", "Diagnostic");
        }

        private AdditionalFileAnalysisContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly AdditionalText AdditionalFile
        {
            get => AdditionalFileGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly CancellationToken CancellationToken
        {
            get => CancellationTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Compilation Compilation
        {
            get => CompilationGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly Nullable<TextSpan> FilterSpan
        {
            get => FilterSpanGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly AnalyzerOptions Options
        {
            get => OptionsGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AdditionalFileAnalysisContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AdditionalFileAnalysisContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void ReportDiagnostic(Diagnostic diagnostic)
            => ReportDiagnosticFunc0(wrappedObject, diagnostic);
    }
}
