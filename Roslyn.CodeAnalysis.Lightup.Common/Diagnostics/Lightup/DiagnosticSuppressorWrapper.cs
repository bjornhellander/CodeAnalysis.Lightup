// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct DiagnosticSuppressorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.DiagnosticSuppressor";

        public static readonly Type? WrappedType;

        private static readonly Func<DiagnosticAnalyzer?, ImmutableArray<DiagnosticDescriptor>> SupportedDiagnosticsFunc;
        private static readonly Func<DiagnosticAnalyzer?, ImmutableArray<SuppressionDescriptorWrapper>> SupportedSuppressionsFunc;

        private static readonly Action<DiagnosticAnalyzer?, AnalysisContext> InitializeFunc0;
        private static readonly Action<DiagnosticAnalyzer?, SuppressionAnalysisContextWrapper> ReportSuppressionsFunc1;

        private readonly DiagnosticAnalyzer? wrappedObject;

        static DiagnosticSuppressorWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            SupportedDiagnosticsFunc = LightupHelper.CreateGetAccessor<DiagnosticAnalyzer?, ImmutableArray<DiagnosticDescriptor>>(WrappedType, nameof(SupportedDiagnostics));
            SupportedSuppressionsFunc = LightupHelper.CreateGetAccessor<DiagnosticAnalyzer?, ImmutableArray<SuppressionDescriptorWrapper>>(WrappedType, nameof(SupportedSuppressions));

            InitializeFunc0 = LightupHelper.CreateVoidMethodAccessor<DiagnosticAnalyzer?, AnalysisContext>(WrappedType, nameof(Initialize));
            ReportSuppressionsFunc1 = LightupHelper.CreateVoidMethodAccessor<DiagnosticAnalyzer?, SuppressionAnalysisContextWrapper>(WrappedType, nameof(ReportSuppressions));
        }

        private DiagnosticSuppressorWrapper(DiagnosticAnalyzer? obj)
        {
            wrappedObject = obj;
        }

        public readonly ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics
            => SupportedDiagnosticsFunc(wrappedObject);

        public readonly ImmutableArray<SuppressionDescriptorWrapper> SupportedSuppressions
            => SupportedSuppressionsFunc(wrappedObject);

        public static implicit operator DiagnosticAnalyzer?(DiagnosticSuppressorWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DiagnosticSuppressorWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<DiagnosticAnalyzer>(obj, WrappedType);
            return new DiagnosticSuppressorWrapper(obj2);
        }

        public DiagnosticAnalyzer? Unwrap()
            => wrappedObject;

        public readonly void Initialize(AnalysisContext context)
            => InitializeFunc0(wrappedObject, context);

        public readonly void ReportSuppressions(SuppressionAnalysisContextWrapper context)
            => ReportSuppressionsFunc1(wrappedObject, context);
    }
}
