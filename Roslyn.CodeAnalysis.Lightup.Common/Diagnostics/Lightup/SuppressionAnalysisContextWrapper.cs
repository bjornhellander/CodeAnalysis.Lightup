// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct SuppressionAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.SuppressionAnalysisContext";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, CancellationToken> CancellationTokenFunc;
        private static readonly Func<object?, Compilation> CompilationFunc;
        private static readonly Func<object?, AnalyzerOptions> OptionsFunc;
        private static readonly Func<object?, ImmutableArray<Diagnostic>> ReportedDiagnosticsFunc;

        private static readonly Func<object?, SyntaxTree, SemanticModel> GetSemanticModelFunc0;
        private static readonly Action<object?, SuppressionWrapper> ReportSuppressionFunc1;

        private readonly object? wrappedObject;

        static SuppressionAnalysisContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CancellationTokenFunc = LightupHelper.CreateGetAccessor<object?, CancellationToken>(WrappedType, nameof(CancellationToken));
            CompilationFunc = LightupHelper.CreateGetAccessor<object?, Compilation>(WrappedType, nameof(Compilation));
            OptionsFunc = LightupHelper.CreateGetAccessor<object?, AnalyzerOptions>(WrappedType, nameof(Options));
            ReportedDiagnosticsFunc = LightupHelper.CreateGetAccessor<object?, ImmutableArray<Diagnostic>>(WrappedType, nameof(ReportedDiagnostics));

            GetSemanticModelFunc0 = LightupHelper.CreateMethodAccessor<object?, SyntaxTree, SemanticModel>(WrappedType, nameof(GetSemanticModel));
            ReportSuppressionFunc1 = LightupHelper.CreateVoidMethodAccessor<object?, SuppressionWrapper>(WrappedType, nameof(ReportSuppression));
        }

        private SuppressionAnalysisContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly CancellationToken CancellationToken
            => CancellationTokenFunc(wrappedObject);

        public readonly Compilation Compilation
            => CompilationFunc(wrappedObject);

        public readonly AnalyzerOptions Options
            => OptionsFunc(wrappedObject);

        public readonly ImmutableArray<Diagnostic> ReportedDiagnostics
            => ReportedDiagnosticsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SuppressionAnalysisContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SuppressionAnalysisContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly SemanticModel GetSemanticModel(SyntaxTree syntaxTree)
            => GetSemanticModelFunc0(wrappedObject, syntaxTree);

        public readonly void ReportSuppression(SuppressionWrapper suppression)
            => ReportSuppressionFunc1(wrappedObject, suppression);
    }
}
