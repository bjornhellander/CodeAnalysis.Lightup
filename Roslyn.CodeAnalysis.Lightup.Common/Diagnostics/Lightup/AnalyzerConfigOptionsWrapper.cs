// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct AnalyzerConfigOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions";

        public static readonly Type? WrappedType;

        private delegate IEnumerable<String> KeysDelegate(object? _obj);

        private delegate Boolean TryGetValueDelegate0(object? _obj, String key, out String? value);

        private static readonly KeysDelegate KeysFunc;

        private static readonly TryGetValueDelegate0 TryGetValueFunc0;

        private readonly object? wrappedObject;

        static AnalyzerConfigOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            KeysFunc = LightupHelper.CreateGetAccessor<KeysDelegate>(WrappedType, nameof(Keys));

            TryGetValueFunc0 = LightupHelper.CreateMethodAccessor<TryGetValueDelegate0>(WrappedType, nameof(TryGetValue));
        }

        private AnalyzerConfigOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly IEnumerable<String> Keys
            => KeysFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly Boolean TryGetValue(String key, out String? value)
            => TryGetValueFunc0(wrappedObject, key, out value);
    }
}
