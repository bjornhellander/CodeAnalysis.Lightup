// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.</summary>
    public static class DiagnosticAnalyzerExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions";

        private delegate Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers WithAnalyzersDelegate0(Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options);

        private static readonly WithAnalyzersDelegate0 WithAnalyzersFunc0;

        static DiagnosticAnalyzerExtensionsEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            WithAnalyzersFunc0 = LightupHelper.CreateStaticMethodAccessor<WithAnalyzersDelegate0>(wrappedType, "WithAnalyzers", "compilationCompilation", "analyzersImmutableArray`1", "optionsAnalyzerOptions");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers WithAnalyzers(this Microsoft.CodeAnalysis.Compilation compilation, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options)
            => WithAnalyzersFunc0(compilation, analyzers, options);
    }
}
