// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct AnalyzerConfigOptionsProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider";

        public static readonly Type? WrappedType;

        private delegate AnalyzerConfigOptionsWrapper GlobalOptionsGetterDelegate(object? _obj);

        private delegate AnalyzerConfigOptionsWrapper GetOptionsDelegate0(object? _obj, SyntaxTree tree);
        private delegate AnalyzerConfigOptionsWrapper GetOptionsDelegate1(object? _obj, AdditionalText textFile);

        private static readonly GlobalOptionsGetterDelegate GlobalOptionsGetterFunc;

        private static readonly GetOptionsDelegate0 GetOptionsFunc0;
        private static readonly GetOptionsDelegate1 GetOptionsFunc1;

        private readonly object? wrappedObject;

        static AnalyzerConfigOptionsProviderWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GlobalOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<GlobalOptionsGetterDelegate>(WrappedType, nameof(GlobalOptions));

            GetOptionsFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetOptionsDelegate0>(WrappedType, nameof(GetOptions));
            GetOptionsFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetOptionsDelegate1>(WrappedType, nameof(GetOptions));
        }

        private AnalyzerConfigOptionsProviderWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly AnalyzerConfigOptionsWrapper GlobalOptions
        {
            get => GlobalOptionsGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigOptionsProviderWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigOptionsProviderWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly AnalyzerConfigOptionsWrapper GetOptions(SyntaxTree tree)
            => GetOptionsFunc0(wrappedObject, tree);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly AnalyzerConfigOptionsWrapper GetOptions(AdditionalText textFile)
            => GetOptionsFunc1(wrappedObject, textFile);
    }
}
