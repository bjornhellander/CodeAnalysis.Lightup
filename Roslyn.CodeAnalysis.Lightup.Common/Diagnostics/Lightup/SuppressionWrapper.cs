// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct SuppressionWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.Suppression";

        public static readonly Type? WrappedType;

        private delegate SuppressionDescriptorWrapper DescriptorDelegate(object? _obj);
        private delegate Diagnostic SuppressedDiagnosticDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, SuppressionWrapper other);

        private static readonly DescriptorDelegate DescriptorFunc;
        private static readonly SuppressedDiagnosticDelegate SuppressedDiagnosticFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly object? wrappedObject;

        static SuppressionWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DescriptorFunc = LightupHelper.CreateGetAccessor<DescriptorDelegate>(WrappedType, nameof(Descriptor));
            SuppressedDiagnosticFunc = LightupHelper.CreateGetAccessor<SuppressedDiagnosticDelegate>(WrappedType, nameof(SuppressedDiagnostic));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
        }

        private SuppressionWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly SuppressionDescriptorWrapper Descriptor
            => DescriptorFunc(wrappedObject);

        public readonly Diagnostic SuppressedDiagnostic
            => SuppressedDiagnosticFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SuppressionWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SuppressionWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly Boolean Equals(SuppressionWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
