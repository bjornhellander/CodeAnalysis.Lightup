// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.</summary>
    public static class CompilationWithAnalyzersExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers";

        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate0(CompilationWithAnalyzers? _obj, SyntaxTree tree, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate1(CompilationWithAnalyzers? _obj, AdditionalText file, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate2(CompilationWithAnalyzers? _obj, SyntaxTree tree, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate3(CompilationWithAnalyzers? _obj, AdditionalText file, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate4(CompilationWithAnalyzers? _obj, SemanticModel model, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate5(CompilationWithAnalyzers? _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate6(CompilationWithAnalyzers? _obj, AdditionalText file, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate7(CompilationWithAnalyzers? _obj, SemanticModel model, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate8(CompilationWithAnalyzers? _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);
        private delegate Task<AnalysisResult> GetAnalysisResultAsyncDelegate9(CompilationWithAnalyzers? _obj, AdditionalText file, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);
        private delegate Task<ImmutableArray<Diagnostic>> GetAnalyzerSyntaxDiagnosticsAsyncDelegate10(CompilationWithAnalyzers? _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken);
        private delegate Task<ImmutableArray<Diagnostic>> GetAnalyzerSyntaxDiagnosticsAsyncDelegate11(CompilationWithAnalyzers? _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken);

        private static readonly GetAnalysisResultAsyncDelegate0 GetAnalysisResultAsyncFunc0;
        private static readonly GetAnalysisResultAsyncDelegate1 GetAnalysisResultAsyncFunc1;
        private static readonly GetAnalysisResultAsyncDelegate2 GetAnalysisResultAsyncFunc2;
        private static readonly GetAnalysisResultAsyncDelegate3 GetAnalysisResultAsyncFunc3;
        private static readonly GetAnalysisResultAsyncDelegate4 GetAnalysisResultAsyncFunc4;
        private static readonly GetAnalysisResultAsyncDelegate5 GetAnalysisResultAsyncFunc5;
        private static readonly GetAnalysisResultAsyncDelegate6 GetAnalysisResultAsyncFunc6;
        private static readonly GetAnalysisResultAsyncDelegate7 GetAnalysisResultAsyncFunc7;
        private static readonly GetAnalysisResultAsyncDelegate8 GetAnalysisResultAsyncFunc8;
        private static readonly GetAnalysisResultAsyncDelegate9 GetAnalysisResultAsyncFunc9;
        private static readonly GetAnalyzerSyntaxDiagnosticsAsyncDelegate10 GetAnalyzerSyntaxDiagnosticsAsyncFunc10;
        private static readonly GetAnalyzerSyntaxDiagnosticsAsyncDelegate11 GetAnalyzerSyntaxDiagnosticsAsyncFunc11;

        static CompilationWithAnalyzersExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            GetAnalysisResultAsyncFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate0>(wrappedType, "GetAnalysisResultAsync", "treeSyntaxTree", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate1>(wrappedType, "GetAnalysisResultAsync", "fileAdditionalText", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc2 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate2>(wrappedType, "GetAnalysisResultAsync", "treeSyntaxTree", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc3 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate3>(wrappedType, "GetAnalysisResultAsync", "fileAdditionalText", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc4 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate4>(wrappedType, "GetAnalysisResultAsync", "modelSemanticModel", "filterSpanNullable`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc5 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate5>(wrappedType, "GetAnalysisResultAsync", "treeSyntaxTree", "filterSpanNullable`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc6 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate6>(wrappedType, "GetAnalysisResultAsync", "fileAdditionalText", "filterSpanNullable`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc7 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate7>(wrappedType, "GetAnalysisResultAsync", "modelSemanticModel", "filterSpanNullable`1", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc8 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate8>(wrappedType, "GetAnalysisResultAsync", "treeSyntaxTree", "filterSpanNullable`1", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
            GetAnalysisResultAsyncFunc9 = LightupHelper.CreateInstanceMethodAccessor<GetAnalysisResultAsyncDelegate9>(wrappedType, "GetAnalysisResultAsync", "fileAdditionalText", "filterSpanNullable`1", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
            GetAnalyzerSyntaxDiagnosticsAsyncFunc10 = LightupHelper.CreateInstanceMethodAccessor<GetAnalyzerSyntaxDiagnosticsAsyncDelegate10>(wrappedType, "GetAnalyzerSyntaxDiagnosticsAsync", "treeSyntaxTree", "filterSpanNullable`1", "cancellationTokenCancellationToken");
            GetAnalyzerSyntaxDiagnosticsAsyncFunc11 = LightupHelper.CreateInstanceMethodAccessor<GetAnalyzerSyntaxDiagnosticsAsyncDelegate11>(wrappedType, "GetAnalyzerSyntaxDiagnosticsAsync", "treeSyntaxTree", "filterSpanNullable`1", "analyzersImmutableArray`1", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc0(_obj, tree, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, AdditionalText file, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc1(_obj, file, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc2(_obj, tree, analyzers, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, AdditionalText file, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc3(_obj, file, analyzers, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SemanticModel model, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc4(_obj, model, filterSpan, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc5(_obj, tree, filterSpan, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, AdditionalText file, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc6(_obj, file, filterSpan, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SemanticModel model, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc7(_obj, model, filterSpan, analyzers, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc8(_obj, tree, filterSpan, analyzers, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<AnalysisResult> GetAnalysisResultAsync(this CompilationWithAnalyzers _obj, AdditionalText file, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalysisResultAsyncFunc9(_obj, file, filterSpan, analyzers, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<ImmutableArray<Diagnostic>> GetAnalyzerSyntaxDiagnosticsAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, CancellationToken cancellationToken)
            => GetAnalyzerSyntaxDiagnosticsAsyncFunc10(_obj, tree, filterSpan, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Task<ImmutableArray<Diagnostic>> GetAnalyzerSyntaxDiagnosticsAsync(this CompilationWithAnalyzers _obj, SyntaxTree tree, Nullable<TextSpan> filterSpan, ImmutableArray<DiagnosticAnalyzer> analyzers, CancellationToken cancellationToken)
            => GetAnalyzerSyntaxDiagnosticsAsyncFunc11(_obj, tree, filterSpan, analyzers, cancellationToken);
    }
}
