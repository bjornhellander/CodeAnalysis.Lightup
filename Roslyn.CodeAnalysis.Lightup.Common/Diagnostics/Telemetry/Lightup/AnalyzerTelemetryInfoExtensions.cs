// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Diagnostics.Telemetry.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class AnalyzerTelemetryInfoExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo";

        public static readonly Type? WrappedType;

        private delegate Int32 AdditionalFileActionsCountGetterDelegate(AnalyzerTelemetryInfo? _obj);
        private delegate void AdditionalFileActionsCountSetterDelegate(AnalyzerTelemetryInfo? _obj, Int32 _value);
        private delegate Int32 SuppressionActionsCountGetterDelegate(AnalyzerTelemetryInfo? _obj);
        private delegate void SuppressionActionsCountSetterDelegate(AnalyzerTelemetryInfo? _obj, Int32 _value);

        private static readonly AdditionalFileActionsCountGetterDelegate AdditionalFileActionsCountGetterFunc;
        private static readonly AdditionalFileActionsCountSetterDelegate AdditionalFileActionsCountSetterFunc;
        private static readonly SuppressionActionsCountGetterDelegate SuppressionActionsCountGetterFunc;
        private static readonly SuppressionActionsCountSetterDelegate SuppressionActionsCountSetterFunc;

        static AnalyzerTelemetryInfoExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalFileActionsCountGetterFunc = LightupHelper.CreateInstanceGetAccessor<AdditionalFileActionsCountGetterDelegate>(WrappedType, nameof(AdditionalFileActionsCount));
            AdditionalFileActionsCountSetterFunc = LightupHelper.CreateInstanceSetAccessor<AdditionalFileActionsCountSetterDelegate>(WrappedType, nameof(AdditionalFileActionsCount));
            SuppressionActionsCountGetterFunc = LightupHelper.CreateInstanceGetAccessor<SuppressionActionsCountGetterDelegate>(WrappedType, nameof(SuppressionActionsCount));
            SuppressionActionsCountSetterFunc = LightupHelper.CreateInstanceSetAccessor<SuppressionActionsCountSetterDelegate>(WrappedType, nameof(SuppressionActionsCount));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Int32 AdditionalFileActionsCount(this AnalyzerTelemetryInfo _obj)
            => AdditionalFileActionsCountGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static void SetAdditionalFileActionsCount(this AnalyzerTelemetryInfo _obj, Int32 _value)
            => AdditionalFileActionsCountSetterFunc(_obj, _value);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Int32 SuppressionActionsCount(this AnalyzerTelemetryInfo _obj)
            => SuppressionActionsCountGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static void SetSuppressionActionsCount(this AnalyzerTelemetryInfo _obj, Int32 _value)
            => SuppressionActionsCountSetterFunc(_obj, _value);
    }
}
