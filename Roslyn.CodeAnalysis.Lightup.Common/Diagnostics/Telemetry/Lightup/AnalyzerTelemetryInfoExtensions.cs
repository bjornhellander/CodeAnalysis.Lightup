// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Diagnostics.Telemetry.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo.</summary>
    public static class AnalyzerTelemetryInfoExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo";

        private delegate System.Int32 AdditionalFileActionsCountGetterDelegate(Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo? _obj);
        private delegate void AdditionalFileActionsCountSetterDelegate(Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo? _obj, System.Int32 _value);
        private delegate System.Int32 SuppressionActionsCountGetterDelegate(Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo? _obj);
        private delegate void SuppressionActionsCountSetterDelegate(Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo? _obj, System.Int32 _value);

        private static readonly AdditionalFileActionsCountGetterDelegate AdditionalFileActionsCountGetterFunc;
        private static readonly AdditionalFileActionsCountSetterDelegate AdditionalFileActionsCountSetterFunc;
        private static readonly SuppressionActionsCountGetterDelegate SuppressionActionsCountGetterFunc;
        private static readonly SuppressionActionsCountSetterDelegate SuppressionActionsCountSetterFunc;

        static AnalyzerTelemetryInfoExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalFileActionsCountGetterFunc = LightupHelper.CreateInstanceGetAccessor<AdditionalFileActionsCountGetterDelegate>(wrappedType, nameof(AdditionalFileActionsCount));
            AdditionalFileActionsCountSetterFunc = LightupHelper.CreateInstanceSetAccessor<AdditionalFileActionsCountSetterDelegate>(wrappedType, nameof(AdditionalFileActionsCount));
            SuppressionActionsCountGetterFunc = LightupHelper.CreateInstanceGetAccessor<SuppressionActionsCountGetterDelegate>(wrappedType, nameof(SuppressionActionsCount));
            SuppressionActionsCountSetterFunc = LightupHelper.CreateInstanceSetAccessor<SuppressionActionsCountSetterDelegate>(wrappedType, nameof(SuppressionActionsCount));
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Int32 AdditionalFileActionsCount(this Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo _obj)
            => AdditionalFileActionsCountGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static void SetAdditionalFileActionsCount(this Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo _obj, System.Int32 _value)
            => AdditionalFileActionsCountSetterFunc(_obj, _value);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Int32 SuppressionActionsCount(this Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo _obj)
            => SuppressionActionsCountGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static void SetSuppressionActionsCount(this Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo _obj, System.Int32 _value)
            => SuppressionActionsCountSetterFunc(_obj, _value);
    }
}
