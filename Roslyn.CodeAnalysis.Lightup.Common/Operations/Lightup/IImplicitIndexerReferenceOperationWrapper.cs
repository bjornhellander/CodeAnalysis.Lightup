// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in version 4.4.0.0 of Roslyn.</summary>
    public readonly struct IImplicitIndexerReferenceOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IImplicitIndexerReferenceOperation";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate IOperation ArgumentGetterDelegate(IOperation? _obj);
        private delegate ISymbol IndexerSymbolGetterDelegate(IOperation? _obj);
        private delegate IOperation InstanceGetterDelegate(IOperation? _obj);
        private delegate ISymbol LengthSymbolGetterDelegate(IOperation? _obj);

        private static readonly ArgumentGetterDelegate ArgumentGetterFunc;
        private static readonly IndexerSymbolGetterDelegate IndexerSymbolGetterFunc;
        private static readonly InstanceGetterDelegate InstanceGetterFunc;
        private static readonly LengthSymbolGetterDelegate LengthSymbolGetterFunc;

        private readonly IOperation? wrappedObject;

        static IImplicitIndexerReferenceOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentGetterFunc = LightupHelper.CreateInstanceGetAccessor<ArgumentGetterDelegate>(WrappedType, nameof(Argument));
            IndexerSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<IndexerSymbolGetterDelegate>(WrappedType, nameof(IndexerSymbol));
            InstanceGetterFunc = LightupHelper.CreateInstanceGetAccessor<InstanceGetterDelegate>(WrappedType, nameof(Instance));
            LengthSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<LengthSymbolGetterDelegate>(WrappedType, nameof(LengthSymbol));
        }

        private IImplicitIndexerReferenceOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0 of Roslyn.</summary>
        public readonly IOperation Argument
        {
            get => ArgumentGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0 of Roslyn.</summary>
        public readonly ISymbol IndexerSymbol
        {
            get => IndexerSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0 of Roslyn.</summary>
        public readonly IOperation Instance
        {
            get => InstanceGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0 of Roslyn.</summary>
        public readonly ISymbol LengthSymbol
        {
            get => LengthSymbolGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IImplicitIndexerReferenceOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IImplicitIndexerReferenceOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
