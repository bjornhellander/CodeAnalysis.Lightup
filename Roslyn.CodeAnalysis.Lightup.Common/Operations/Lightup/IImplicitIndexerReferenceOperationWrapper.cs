// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IImplicitIndexerReferenceOperation. Added in version 4.4.0.0.</summary>
    public readonly struct IImplicitIndexerReferenceOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IImplicitIndexerReferenceOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.IOperation ArgumentGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol IndexerSymbolGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate Microsoft.CodeAnalysis.IOperation InstanceGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol LengthSymbolGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);

        private static readonly ArgumentGetterDelegate ArgumentGetterFunc;
        private static readonly IndexerSymbolGetterDelegate IndexerSymbolGetterFunc;
        private static readonly InstanceGetterDelegate InstanceGetterFunc;
        private static readonly LengthSymbolGetterDelegate LengthSymbolGetterFunc;

        private readonly Microsoft.CodeAnalysis.IOperation? wrappedObject;

        static IImplicitIndexerReferenceOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentGetterFunc = LightupHelper.CreateInstanceGetAccessor<ArgumentGetterDelegate>(WrappedType, nameof(Argument));
            IndexerSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<IndexerSymbolGetterDelegate>(WrappedType, nameof(IndexerSymbol));
            InstanceGetterFunc = LightupHelper.CreateInstanceGetAccessor<InstanceGetterDelegate>(WrappedType, nameof(Instance));
            LengthSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<LengthSymbolGetterDelegate>(WrappedType, nameof(LengthSymbol));
        }

        private IImplicitIndexerReferenceOperationWrapper(Microsoft.CodeAnalysis.IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Argument
        {
            get => ArgumentGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol IndexerSymbol
        {
            get => IndexerSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Instance
        {
            get => InstanceGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol LengthSymbol
        {
            get => LengthSymbolGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IImplicitIndexerReferenceOperationWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.IOperation>(obj, WrappedType);
            return new IImplicitIndexerReferenceOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.IOperation? Unwrap()
            => wrappedObject;
    }
}
