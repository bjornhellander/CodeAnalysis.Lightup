// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    public static class OperationExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationExtensions";

        public static readonly Type? WrappedType;

        private delegate IMethodSymbol GetFunctionPointerSignatureDelegate0(IFunctionPointerInvocationOperationWrapper functionPointer);

        private static readonly GetFunctionPointerSignatureDelegate0 GetFunctionPointerSignatureFunc0;

        static OperationExtensionsEx()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetFunctionPointerSignatureFunc0 = LightupHelper.CreateStaticMethodAccessor<GetFunctionPointerSignatureDelegate0>(WrappedType, nameof(GetFunctionPointerSignature), true);
        }

        /// <summary>Method added in version 4.4.0.0 of Roslyn.</summary>
        public static IMethodSymbol GetFunctionPointerSignature(this IFunctionPointerInvocationOperationWrapper functionPointer)
            => GetFunctionPointerSignatureFunc0(functionPointer);
    }
}
