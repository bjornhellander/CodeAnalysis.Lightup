// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Added in Roslyn version 4.4.0.0</summary>
    public readonly struct ISlicePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISlicePatternOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IPatternOperation?, IPatternOperation?> PatternFunc;
        private static readonly Func<IPatternOperation?, ISymbol?> SliceSymbolFunc;

        private readonly IPatternOperation? wrappedObject;

        static ISlicePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PatternFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, IPatternOperation?>(WrappedType, nameof(Pattern));
            SliceSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(SliceSymbol));
        }

        private ISlicePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IPatternOperation? Pattern
            => PatternFunc(wrappedObject);

        public readonly ISymbol? SliceSymbol
            => SliceSymbolFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ISlicePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new ISlicePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
