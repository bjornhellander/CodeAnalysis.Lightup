// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct ISlicePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISlicePatternOperation";

        public static readonly Type? WrappedType;

        private delegate IPatternOperation? PatternDelegate(IPatternOperation? _obj);
        private delegate ISymbol? SliceSymbolDelegate(IPatternOperation? _obj);

        private static readonly PatternDelegate PatternFunc;
        private static readonly SliceSymbolDelegate SliceSymbolFunc;

        private readonly IPatternOperation? wrappedObject;

        static ISlicePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PatternFunc = LightupHelper.CreateGetAccessor<PatternDelegate>(WrappedType, nameof(Pattern));
            SliceSymbolFunc = LightupHelper.CreateGetAccessor<SliceSymbolDelegate>(WrappedType, nameof(SliceSymbol));
        }

        private ISlicePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IPatternOperation? Pattern
            => PatternFunc(wrappedObject);

        public readonly ISymbol? SliceSymbol
            => SliceSymbolFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ISlicePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new ISlicePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
