// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ISlicePatternOperation. Added in version 4.4.0.0.</summary>
    public readonly partial struct ISlicePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISlicePatternOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Operations.IPatternOperation? PatternGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol? SliceSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly PatternGetterDelegate PatternGetterFunc;
        private static readonly SliceSymbolGetterDelegate SliceSymbolGetterFunc;

        private readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static ISlicePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PatternGetterFunc = LightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));
            SliceSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<SliceSymbolGetterDelegate>(WrappedType, nameof(SliceSymbol));
        }

        private ISlicePatternOperationWrapper(Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? Pattern
        {
            get => PatternGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? SliceSymbol
        {
            get => SliceSymbolGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ISlicePatternOperationWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new ISlicePatternOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
