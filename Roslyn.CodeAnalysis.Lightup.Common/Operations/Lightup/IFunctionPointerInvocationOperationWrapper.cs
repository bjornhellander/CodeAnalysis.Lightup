// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IFunctionPointerInvocationOperation. Added in version 4.4.0.0.</summary>
    public readonly struct IFunctionPointerInvocationOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IFunctionPointerInvocationOperation";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ImmutableArray<IArgumentOperation> ArgumentsGetterDelegate(IOperation? _obj);
        private delegate IOperation TargetGetterDelegate(IOperation? _obj);

        private static readonly ArgumentsGetterDelegate ArgumentsGetterFunc;
        private static readonly TargetGetterDelegate TargetGetterFunc;

        private readonly IOperation? wrappedObject;

        static IFunctionPointerInvocationOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentsGetterFunc = LightupHelper.CreateInstanceGetAccessor<ArgumentsGetterDelegate>(WrappedType, nameof(Arguments));
            TargetGetterFunc = LightupHelper.CreateInstanceGetAccessor<TargetGetterDelegate>(WrappedType, nameof(Target));
        }

        private IFunctionPointerInvocationOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly ImmutableArray<IArgumentOperation> Arguments
        {
            get => ArgumentsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly IOperation Target
        {
            get => TargetGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IFunctionPointerInvocationOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IFunctionPointerInvocationOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
