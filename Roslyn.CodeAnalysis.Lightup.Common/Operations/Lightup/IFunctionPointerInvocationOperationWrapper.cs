// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IFunctionPointerInvocationOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IFunctionPointerInvocationOperation";

        public static readonly Type? WrappedType;

        private delegate ImmutableArray<IArgumentOperation> ArgumentsDelegate(IOperation? _obj);
        private delegate IOperation TargetDelegate(IOperation? _obj);

        private static readonly ArgumentsDelegate ArgumentsFunc;
        private static readonly TargetDelegate TargetFunc;

        private readonly IOperation? wrappedObject;

        static IFunctionPointerInvocationOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentsFunc = LightupHelper.CreateGetAccessor<ArgumentsDelegate>(WrappedType, nameof(Arguments));
            TargetFunc = LightupHelper.CreateGetAccessor<TargetDelegate>(WrappedType, nameof(Target));
        }

        private IFunctionPointerInvocationOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ImmutableArray<IArgumentOperation> Arguments
            => ArgumentsFunc(wrappedObject);

        public readonly IOperation Target
            => TargetFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IFunctionPointerInvocationOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IFunctionPointerInvocationOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
