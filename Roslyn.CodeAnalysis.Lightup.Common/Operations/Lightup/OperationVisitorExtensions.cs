// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Operations.OperationVisitor.</summary>
    public static partial class OperationVisitorExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationVisitor";

        private delegate void VisitAttributeDelegate0(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IAttributeOperationWrapper operation);
        private delegate void VisitBinaryPatternDelegate1(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IBinaryPatternOperationWrapper operation);
        private delegate void VisitFunctionPointerInvocationDelegate2(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper operation);
        private delegate void VisitImplicitIndexerReferenceDelegate3(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IImplicitIndexerReferenceOperationWrapper operation);
        private delegate void VisitInlineArrayAccessDelegate4(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInlineArrayAccessOperationWrapper operation);
        private delegate void VisitInterpolatedStringAdditionDelegate5(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAdditionOperationWrapper operation);
        private delegate void VisitInterpolatedStringAppendDelegate6(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAppendOperationWrapper operation);
        private delegate void VisitInterpolatedStringHandlerArgumentPlaceholderDelegate7(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper operation);
        private delegate void VisitInterpolatedStringHandlerCreationDelegate8(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerCreationOperationWrapper operation);
        private delegate void VisitListPatternDelegate9(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IListPatternOperationWrapper operation);
        private delegate void VisitNegatedPatternDelegate10(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.INegatedPatternOperationWrapper operation);
        private delegate void VisitPropertySubpatternDelegate11(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper operation);
        private delegate void VisitRecursivePatternDelegate12(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IRecursivePatternOperationWrapper operation);
        private delegate void VisitRelationalPatternDelegate13(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IRelationalPatternOperationWrapper operation);
        private delegate void VisitSlicePatternDelegate14(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.ISlicePatternOperationWrapper operation);
        private delegate void VisitTypePatternDelegate15(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.ITypePatternOperationWrapper operation);
        private delegate void VisitUsingDeclarationDelegate16(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IUsingDeclarationOperationWrapper operation);
        private delegate void VisitUtf8StringDelegate17(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IUtf8StringOperationWrapper operation);
        private delegate void VisitWithDelegate18(Microsoft.CodeAnalysis.Operations.OperationVisitor? _obj, Microsoft.CodeAnalysis.Operations.Lightup.IWithOperationWrapper operation);

        private static readonly VisitAttributeDelegate0 VisitAttributeFunc0;
        private static readonly VisitBinaryPatternDelegate1 VisitBinaryPatternFunc1;
        private static readonly VisitFunctionPointerInvocationDelegate2 VisitFunctionPointerInvocationFunc2;
        private static readonly VisitImplicitIndexerReferenceDelegate3 VisitImplicitIndexerReferenceFunc3;
        private static readonly VisitInlineArrayAccessDelegate4 VisitInlineArrayAccessFunc4;
        private static readonly VisitInterpolatedStringAdditionDelegate5 VisitInterpolatedStringAdditionFunc5;
        private static readonly VisitInterpolatedStringAppendDelegate6 VisitInterpolatedStringAppendFunc6;
        private static readonly VisitInterpolatedStringHandlerArgumentPlaceholderDelegate7 VisitInterpolatedStringHandlerArgumentPlaceholderFunc7;
        private static readonly VisitInterpolatedStringHandlerCreationDelegate8 VisitInterpolatedStringHandlerCreationFunc8;
        private static readonly VisitListPatternDelegate9 VisitListPatternFunc9;
        private static readonly VisitNegatedPatternDelegate10 VisitNegatedPatternFunc10;
        private static readonly VisitPropertySubpatternDelegate11 VisitPropertySubpatternFunc11;
        private static readonly VisitRecursivePatternDelegate12 VisitRecursivePatternFunc12;
        private static readonly VisitRelationalPatternDelegate13 VisitRelationalPatternFunc13;
        private static readonly VisitSlicePatternDelegate14 VisitSlicePatternFunc14;
        private static readonly VisitTypePatternDelegate15 VisitTypePatternFunc15;
        private static readonly VisitUsingDeclarationDelegate16 VisitUsingDeclarationFunc16;
        private static readonly VisitUtf8StringDelegate17 VisitUtf8StringFunc17;
        private static readonly VisitWithDelegate18 VisitWithFunc18;

        static OperationVisitorExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            VisitAttributeFunc0 = LightupHelper.CreateInstanceMethodAccessor<VisitAttributeDelegate0>(wrappedType, "VisitAttribute", "operationIAttributeOperation");
            VisitBinaryPatternFunc1 = LightupHelper.CreateInstanceMethodAccessor<VisitBinaryPatternDelegate1>(wrappedType, "VisitBinaryPattern", "operationIBinaryPatternOperation");
            VisitFunctionPointerInvocationFunc2 = LightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerInvocationDelegate2>(wrappedType, "VisitFunctionPointerInvocation", "operationIFunctionPointerInvocationOperation");
            VisitImplicitIndexerReferenceFunc3 = LightupHelper.CreateInstanceMethodAccessor<VisitImplicitIndexerReferenceDelegate3>(wrappedType, "VisitImplicitIndexerReference", "operationIImplicitIndexerReferenceOperation");
            VisitInlineArrayAccessFunc4 = LightupHelper.CreateInstanceMethodAccessor<VisitInlineArrayAccessDelegate4>(wrappedType, "VisitInlineArrayAccess", "operationIInlineArrayAccessOperation");
            VisitInterpolatedStringAdditionFunc5 = LightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringAdditionDelegate5>(wrappedType, "VisitInterpolatedStringAddition", "operationIInterpolatedStringAdditionOperation");
            VisitInterpolatedStringAppendFunc6 = LightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringAppendDelegate6>(wrappedType, "VisitInterpolatedStringAppend", "operationIInterpolatedStringAppendOperation");
            VisitInterpolatedStringHandlerArgumentPlaceholderFunc7 = LightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringHandlerArgumentPlaceholderDelegate7>(wrappedType, "VisitInterpolatedStringHandlerArgumentPlaceholder", "operationIInterpolatedStringHandlerArgumentPlaceholderOperation");
            VisitInterpolatedStringHandlerCreationFunc8 = LightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringHandlerCreationDelegate8>(wrappedType, "VisitInterpolatedStringHandlerCreation", "operationIInterpolatedStringHandlerCreationOperation");
            VisitListPatternFunc9 = LightupHelper.CreateInstanceMethodAccessor<VisitListPatternDelegate9>(wrappedType, "VisitListPattern", "operationIListPatternOperation");
            VisitNegatedPatternFunc10 = LightupHelper.CreateInstanceMethodAccessor<VisitNegatedPatternDelegate10>(wrappedType, "VisitNegatedPattern", "operationINegatedPatternOperation");
            VisitPropertySubpatternFunc11 = LightupHelper.CreateInstanceMethodAccessor<VisitPropertySubpatternDelegate11>(wrappedType, "VisitPropertySubpattern", "operationIPropertySubpatternOperation");
            VisitRecursivePatternFunc12 = LightupHelper.CreateInstanceMethodAccessor<VisitRecursivePatternDelegate12>(wrappedType, "VisitRecursivePattern", "operationIRecursivePatternOperation");
            VisitRelationalPatternFunc13 = LightupHelper.CreateInstanceMethodAccessor<VisitRelationalPatternDelegate13>(wrappedType, "VisitRelationalPattern", "operationIRelationalPatternOperation");
            VisitSlicePatternFunc14 = LightupHelper.CreateInstanceMethodAccessor<VisitSlicePatternDelegate14>(wrappedType, "VisitSlicePattern", "operationISlicePatternOperation");
            VisitTypePatternFunc15 = LightupHelper.CreateInstanceMethodAccessor<VisitTypePatternDelegate15>(wrappedType, "VisitTypePattern", "operationITypePatternOperation");
            VisitUsingDeclarationFunc16 = LightupHelper.CreateInstanceMethodAccessor<VisitUsingDeclarationDelegate16>(wrappedType, "VisitUsingDeclaration", "operationIUsingDeclarationOperation");
            VisitUtf8StringFunc17 = LightupHelper.CreateInstanceMethodAccessor<VisitUtf8StringDelegate17>(wrappedType, "VisitUtf8String", "operationIUtf8StringOperation");
            VisitWithFunc18 = LightupHelper.CreateInstanceMethodAccessor<VisitWithDelegate18>(wrappedType, "VisitWith", "operationIWithOperation");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static void VisitAttribute(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IAttributeOperationWrapper operation)
            => VisitAttributeFunc0(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitBinaryPattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IBinaryPatternOperationWrapper operation)
            => VisitBinaryPatternFunc1(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitFunctionPointerInvocation(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper operation)
            => VisitFunctionPointerInvocationFunc2(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitImplicitIndexerReference(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IImplicitIndexerReferenceOperationWrapper operation)
            => VisitImplicitIndexerReferenceFunc3(_obj, operation);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static void VisitInlineArrayAccess(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInlineArrayAccessOperationWrapper operation)
            => VisitInlineArrayAccessFunc4(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitInterpolatedStringAddition(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAdditionOperationWrapper operation)
            => VisitInterpolatedStringAdditionFunc5(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitInterpolatedStringAppend(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAppendOperationWrapper operation)
            => VisitInterpolatedStringAppendFunc6(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitInterpolatedStringHandlerArgumentPlaceholder(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper operation)
            => VisitInterpolatedStringHandlerArgumentPlaceholderFunc7(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitInterpolatedStringHandlerCreation(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerCreationOperationWrapper operation)
            => VisitInterpolatedStringHandlerCreationFunc8(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitListPattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IListPatternOperationWrapper operation)
            => VisitListPatternFunc9(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitNegatedPattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.INegatedPatternOperationWrapper operation)
            => VisitNegatedPatternFunc10(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitPropertySubpattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper operation)
            => VisitPropertySubpatternFunc11(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitRecursivePattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IRecursivePatternOperationWrapper operation)
            => VisitRecursivePatternFunc12(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitRelationalPattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IRelationalPatternOperationWrapper operation)
            => VisitRelationalPatternFunc13(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitSlicePattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.ISlicePatternOperationWrapper operation)
            => VisitSlicePatternFunc14(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitTypePattern(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.ITypePatternOperationWrapper operation)
            => VisitTypePatternFunc15(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitUsingDeclaration(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IUsingDeclarationOperationWrapper operation)
            => VisitUsingDeclarationFunc16(_obj, operation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitUtf8String(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IUtf8StringOperationWrapper operation)
            => VisitUtf8StringFunc17(_obj, operation);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitWith(this Microsoft.CodeAnalysis.Operations.OperationVisitor _obj, Microsoft.CodeAnalysis.Operations.Lightup.IWithOperationWrapper operation)
            => VisitWithFunc18(_obj, operation);
    }
}
