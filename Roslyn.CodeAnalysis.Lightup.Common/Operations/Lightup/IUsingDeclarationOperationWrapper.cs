// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IUsingDeclarationOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IUsingDeclarationOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, IVariableDeclarationGroupOperation> DeclarationGroupFunc;
        private static readonly Func<IOperation?, Boolean> IsAsynchronousFunc;

        private readonly IOperation? wrappedObject;

        static IUsingDeclarationOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclarationGroupFunc = LightupHelper.CreateGetAccessor<IOperation?, IVariableDeclarationGroupOperation>(WrappedType, nameof(DeclarationGroup));
            IsAsynchronousFunc = LightupHelper.CreateGetAccessor<IOperation?, Boolean>(WrappedType, nameof(IsAsynchronous));
        }

        private IUsingDeclarationOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IVariableDeclarationGroupOperation DeclarationGroup
            => DeclarationGroupFunc(wrappedObject);

        public readonly Boolean IsAsynchronous
            => IsAsynchronousFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IUsingDeclarationOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IUsingDeclarationOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
