// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IListPatternOperation. Added in version 4.4.0.0.</summary>
    public readonly partial struct IListPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IListPatternOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.ISymbol? DeclaredSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol? IndexerSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol? LengthSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IPatternOperation> PatternsGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly DeclaredSymbolGetterDelegate DeclaredSymbolGetterFunc;
        private static readonly IndexerSymbolGetterDelegate IndexerSymbolGetterFunc;
        private static readonly LengthSymbolGetterDelegate LengthSymbolGetterFunc;
        private static readonly PatternsGetterDelegate PatternsGetterFunc;

        private readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static IListPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeclaredSymbolGetterDelegate>(WrappedType, nameof(DeclaredSymbol));
            IndexerSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<IndexerSymbolGetterDelegate>(WrappedType, nameof(IndexerSymbol));
            LengthSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<LengthSymbolGetterDelegate>(WrappedType, nameof(LengthSymbol));
            PatternsGetterFunc = LightupHelper.CreateInstanceGetAccessor<PatternsGetterDelegate>(WrappedType, nameof(Patterns));
        }

        private IListPatternOperationWrapper(Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? DeclaredSymbol
        {
            get => DeclaredSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? IndexerSymbol
        {
            get => IndexerSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? LengthSymbol
        {
            get => LengthSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IPatternOperation> Patterns
        {
            get => PatternsGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IListPatternOperationWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new IListPatternOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
