// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Added in Roslyn version 4.4.0.0</summary>
    public readonly struct IListPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IListPatternOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IPatternOperation?, ISymbol?> DeclaredSymbolFunc;
        private static readonly Func<IPatternOperation?, ISymbol?> IndexerSymbolFunc;
        private static readonly Func<IPatternOperation?, ISymbol?> LengthSymbolFunc;
        private static readonly Func<IPatternOperation?, ImmutableArray<IPatternOperation>> PatternsFunc;

        private readonly IPatternOperation? wrappedObject;

        static IListPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(DeclaredSymbol));
            IndexerSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(IndexerSymbol));
            LengthSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(LengthSymbol));
            PatternsFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ImmutableArray<IPatternOperation>>(WrappedType, nameof(Patterns));
        }

        private IListPatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ISymbol? DeclaredSymbol
            => DeclaredSymbolFunc(wrappedObject);

        public readonly ISymbol? IndexerSymbol
            => IndexerSymbolFunc(wrappedObject);

        public readonly ISymbol? LengthSymbol
            => LengthSymbolFunc(wrappedObject);

        public readonly ImmutableArray<IPatternOperation> Patterns
            => PatternsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IListPatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IListPatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
