// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IListPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IListPatternOperation";

        public static readonly Type? WrappedType;

        private delegate ISymbol? DeclaredSymbolGetterDelegate(IPatternOperation? _obj);
        private delegate ISymbol? IndexerSymbolGetterDelegate(IPatternOperation? _obj);
        private delegate ISymbol? LengthSymbolGetterDelegate(IPatternOperation? _obj);
        private delegate ImmutableArray<IPatternOperation> PatternsGetterDelegate(IPatternOperation? _obj);

        private static readonly DeclaredSymbolGetterDelegate DeclaredSymbolGetterFunc;
        private static readonly IndexerSymbolGetterDelegate IndexerSymbolGetterFunc;
        private static readonly LengthSymbolGetterDelegate LengthSymbolGetterFunc;
        private static readonly PatternsGetterDelegate PatternsGetterFunc;

        private readonly IPatternOperation? wrappedObject;

        static IListPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolGetterFunc = LightupHelper.CreateGetAccessor<DeclaredSymbolGetterDelegate>(WrappedType, nameof(DeclaredSymbol));
            IndexerSymbolGetterFunc = LightupHelper.CreateGetAccessor<IndexerSymbolGetterDelegate>(WrappedType, nameof(IndexerSymbol));
            LengthSymbolGetterFunc = LightupHelper.CreateGetAccessor<LengthSymbolGetterDelegate>(WrappedType, nameof(LengthSymbol));
            PatternsGetterFunc = LightupHelper.CreateGetAccessor<PatternsGetterDelegate>(WrappedType, nameof(Patterns));
        }

        private IListPatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ISymbol? DeclaredSymbol
            => DeclaredSymbolGetterFunc(wrappedObject);

        public readonly ISymbol? IndexerSymbol
            => IndexerSymbolGetterFunc(wrappedObject);

        public readonly ISymbol? LengthSymbol
            => LengthSymbolGetterFunc(wrappedObject);

        public readonly ImmutableArray<IPatternOperation> Patterns
            => PatternsGetterFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IListPatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IListPatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
