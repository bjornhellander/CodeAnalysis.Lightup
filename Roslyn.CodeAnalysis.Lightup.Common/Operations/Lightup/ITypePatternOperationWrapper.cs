// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct ITypePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ITypePatternOperation";

        public static readonly Type? WrappedType;

        private delegate ITypeSymbol MatchedTypeDelegate(IPatternOperation? _obj);

        private static readonly MatchedTypeDelegate MatchedTypeFunc;

        private readonly IPatternOperation? wrappedObject;

        static ITypePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            MatchedTypeFunc = LightupHelper.CreateGetAccessor<MatchedTypeDelegate>(WrappedType, nameof(MatchedType));
        }

        private ITypePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ITypeSymbol MatchedType
            => MatchedTypeFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ITypePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new ITypePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
