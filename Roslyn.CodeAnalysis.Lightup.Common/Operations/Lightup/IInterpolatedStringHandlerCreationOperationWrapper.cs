// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringHandlerCreationOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringHandlerCreationOperation";

        public static readonly Type? WrappedType;

        private delegate IOperation ContentGetterDelegate(IOperation? _obj);
        private delegate Boolean HandlerAppendCallsReturnBoolGetterDelegate(IOperation? _obj);
        private delegate IOperation HandlerCreationGetterDelegate(IOperation? _obj);
        private delegate Boolean HandlerCreationHasSuccessParameterGetterDelegate(IOperation? _obj);

        private static readonly ContentGetterDelegate ContentGetterFunc;
        private static readonly HandlerAppendCallsReturnBoolGetterDelegate HandlerAppendCallsReturnBoolGetterFunc;
        private static readonly HandlerCreationGetterDelegate HandlerCreationGetterFunc;
        private static readonly HandlerCreationHasSuccessParameterGetterDelegate HandlerCreationHasSuccessParameterGetterFunc;

        private readonly IOperation? wrappedObject;

        static IInterpolatedStringHandlerCreationOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ContentGetterFunc = LightupHelper.CreateGetAccessor<ContentGetterDelegate>(WrappedType, nameof(Content));
            HandlerAppendCallsReturnBoolGetterFunc = LightupHelper.CreateGetAccessor<HandlerAppendCallsReturnBoolGetterDelegate>(WrappedType, nameof(HandlerAppendCallsReturnBool));
            HandlerCreationGetterFunc = LightupHelper.CreateGetAccessor<HandlerCreationGetterDelegate>(WrappedType, nameof(HandlerCreation));
            HandlerCreationHasSuccessParameterGetterFunc = LightupHelper.CreateGetAccessor<HandlerCreationHasSuccessParameterGetterDelegate>(WrappedType, nameof(HandlerCreationHasSuccessParameter));
        }

        private IInterpolatedStringHandlerCreationOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly IOperation Content
        {
            get => ContentGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly Boolean HandlerAppendCallsReturnBool
        {
            get => HandlerAppendCallsReturnBoolGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly IOperation HandlerCreation
        {
            get => HandlerCreationGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly Boolean HandlerCreationHasSuccessParameter
        {
            get => HandlerCreationHasSuccessParameterGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringHandlerCreationOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInterpolatedStringHandlerCreationOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
