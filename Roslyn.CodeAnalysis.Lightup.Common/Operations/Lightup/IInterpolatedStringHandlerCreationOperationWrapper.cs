// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringHandlerCreationOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringHandlerCreationOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, IOperation> ContentFunc;
        private static readonly Func<IOperation?, Boolean> HandlerAppendCallsReturnBoolFunc;
        private static readonly Func<IOperation?, IOperation> HandlerCreationFunc;
        private static readonly Func<IOperation?, Boolean> HandlerCreationHasSuccessParameterFunc;

        private readonly IOperation? wrappedObject;

        static IInterpolatedStringHandlerCreationOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ContentFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Content));
            HandlerAppendCallsReturnBoolFunc = LightupHelper.CreateGetAccessor<IOperation?, Boolean>(WrappedType, nameof(HandlerAppendCallsReturnBool));
            HandlerCreationFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(HandlerCreation));
            HandlerCreationHasSuccessParameterFunc = LightupHelper.CreateGetAccessor<IOperation?, Boolean>(WrappedType, nameof(HandlerCreationHasSuccessParameter));
        }

        private IInterpolatedStringHandlerCreationOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IOperation Content
            => ContentFunc(wrappedObject);

        public readonly Boolean HandlerAppendCallsReturnBool
            => HandlerAppendCallsReturnBoolFunc(wrappedObject);

        public readonly IOperation HandlerCreation
            => HandlerCreationFunc(wrappedObject);

        public readonly Boolean HandlerCreationHasSuccessParameter
            => HandlerCreationHasSuccessParameterFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringHandlerCreationOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInterpolatedStringHandlerCreationOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
