// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IRelationalPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IRelationalPatternOperation";

        public static readonly Type? WrappedType;

        private delegate BinaryOperatorKind OperatorKindGetterDelegate(IPatternOperation? _obj);
        private delegate IOperation ValueGetterDelegate(IPatternOperation? _obj);

        private static readonly OperatorKindGetterDelegate OperatorKindGetterFunc;
        private static readonly ValueGetterDelegate ValueGetterFunc;

        private readonly IPatternOperation? wrappedObject;

        static IRelationalPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            OperatorKindGetterFunc = LightupHelper.CreateGetAccessor<OperatorKindGetterDelegate>(WrappedType, nameof(OperatorKind));
            ValueGetterFunc = LightupHelper.CreateGetAccessor<ValueGetterDelegate>(WrappedType, nameof(Value));
        }

        private IRelationalPatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly BinaryOperatorKind OperatorKind
        {
            get => OperatorKindGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly IOperation Value
        {
            get => ValueGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IRelationalPatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IRelationalPatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
