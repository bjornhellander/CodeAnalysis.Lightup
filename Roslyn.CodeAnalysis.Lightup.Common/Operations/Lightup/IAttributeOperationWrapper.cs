// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.8.0.0</summary>
    public readonly struct IAttributeOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IAttributeOperation";

        public static readonly Type? WrappedType;

        private delegate IOperation OperationGetterDelegate(IOperation? _obj);

        private static readonly OperationGetterDelegate OperationGetterFunc;

        private readonly IOperation? wrappedObject;

        static IAttributeOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            OperationGetterFunc = LightupHelper.CreateGetAccessor<OperationGetterDelegate>(WrappedType, nameof(Operation));
        }

        private IAttributeOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public readonly IOperation Operation
        {
            get => OperationGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IAttributeOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IAttributeOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
