// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    public static class IVariableDeclarationOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation";

        public static readonly Type? WrappedType;

        private delegate ImmutableArray<IOperation> IgnoredDimensionsGetterDelegate(IVariableDeclarationOperation? _obj);

        private static readonly IgnoredDimensionsGetterDelegate IgnoredDimensionsGetterFunc;

        static IVariableDeclarationOperationExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IgnoredDimensionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<IgnoredDimensionsGetterDelegate>(WrappedType, nameof(IgnoredDimensions));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static ImmutableArray<IOperation> IgnoredDimensions(this IVariableDeclarationOperation _obj)
            => IgnoredDimensionsGetterFunc(_obj);
    }
}
