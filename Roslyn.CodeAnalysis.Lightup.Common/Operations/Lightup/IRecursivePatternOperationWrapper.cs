// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IRecursivePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IRecursivePatternOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IPatternOperation?, ISymbol?> DeclaredSymbolFunc;
        private static readonly Func<IPatternOperation?, ImmutableArray<IPatternOperation>> DeconstructionSubpatternsFunc;
        private static readonly Func<IPatternOperation?, ISymbol?> DeconstructSymbolFunc;
        private static readonly Func<IPatternOperation?, ITypeSymbol> MatchedTypeFunc;
        private static readonly Func<IPatternOperation?, ImmutableArray<IPropertySubpatternOperationWrapper>> PropertySubpatternsFunc;

        private readonly IPatternOperation? wrappedObject;

        static IRecursivePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(DeclaredSymbol));
            DeconstructionSubpatternsFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ImmutableArray<IPatternOperation>>(WrappedType, nameof(DeconstructionSubpatterns));
            DeconstructSymbolFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ISymbol?>(WrappedType, nameof(DeconstructSymbol));
            MatchedTypeFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ITypeSymbol>(WrappedType, nameof(MatchedType));
            PropertySubpatternsFunc = LightupHelper.CreateGetAccessor<IPatternOperation?, ImmutableArray<IPropertySubpatternOperationWrapper>>(WrappedType, nameof(PropertySubpatterns));
        }

        private IRecursivePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ISymbol? DeclaredSymbol
            => DeclaredSymbolFunc(wrappedObject);

        public readonly ImmutableArray<IPatternOperation> DeconstructionSubpatterns
            => DeconstructionSubpatternsFunc(wrappedObject);

        public readonly ISymbol? DeconstructSymbol
            => DeconstructSymbolFunc(wrappedObject);

        public readonly ITypeSymbol MatchedType
            => MatchedTypeFunc(wrappedObject);

        public readonly ImmutableArray<IPropertySubpatternOperationWrapper> PropertySubpatterns
            => PropertySubpatternsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IRecursivePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IRecursivePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
