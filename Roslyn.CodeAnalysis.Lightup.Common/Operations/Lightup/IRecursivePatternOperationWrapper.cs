// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IRecursivePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IRecursivePatternOperation";

        public static readonly Type? WrappedType;

        private delegate ISymbol? DeclaredSymbolGetterDelegate(IPatternOperation? _obj);
        private delegate ImmutableArray<IPatternOperation> DeconstructionSubpatternsGetterDelegate(IPatternOperation? _obj);
        private delegate ISymbol? DeconstructSymbolGetterDelegate(IPatternOperation? _obj);
        private delegate ITypeSymbol MatchedTypeGetterDelegate(IPatternOperation? _obj);
        private delegate ImmutableArray<IPropertySubpatternOperationWrapper> PropertySubpatternsGetterDelegate(IPatternOperation? _obj);

        private static readonly DeclaredSymbolGetterDelegate DeclaredSymbolGetterFunc;
        private static readonly DeconstructionSubpatternsGetterDelegate DeconstructionSubpatternsGetterFunc;
        private static readonly DeconstructSymbolGetterDelegate DeconstructSymbolGetterFunc;
        private static readonly MatchedTypeGetterDelegate MatchedTypeGetterFunc;
        private static readonly PropertySubpatternsGetterDelegate PropertySubpatternsGetterFunc;

        private readonly IPatternOperation? wrappedObject;

        static IRecursivePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeclaredSymbolGetterDelegate>(WrappedType, nameof(DeclaredSymbol));
            DeconstructionSubpatternsGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeconstructionSubpatternsGetterDelegate>(WrappedType, nameof(DeconstructionSubpatterns));
            DeconstructSymbolGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeconstructSymbolGetterDelegate>(WrappedType, nameof(DeconstructSymbol));
            MatchedTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<MatchedTypeGetterDelegate>(WrappedType, nameof(MatchedType));
            PropertySubpatternsGetterFunc = LightupHelper.CreateInstanceGetAccessor<PropertySubpatternsGetterDelegate>(WrappedType, nameof(PropertySubpatterns));
        }

        private IRecursivePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ISymbol? DeclaredSymbol
        {
            get => DeclaredSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImmutableArray<IPatternOperation> DeconstructionSubpatterns
        {
            get => DeconstructionSubpatternsGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ISymbol? DeconstructSymbol
        {
            get => DeconstructSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ITypeSymbol MatchedType
        {
            get => MatchedTypeGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly ImmutableArray<IPropertySubpatternOperationWrapper> PropertySubpatterns
        {
            get => PropertySubpatternsGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IRecursivePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IRecursivePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
