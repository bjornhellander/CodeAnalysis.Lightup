// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IRecursivePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IRecursivePatternOperation";

        public static readonly Type? WrappedType;

        private delegate ISymbol? DeclaredSymbolDelegate(IPatternOperation? _obj);
        private delegate ImmutableArray<IPatternOperation> DeconstructionSubpatternsDelegate(IPatternOperation? _obj);
        private delegate ISymbol? DeconstructSymbolDelegate(IPatternOperation? _obj);
        private delegate ITypeSymbol MatchedTypeDelegate(IPatternOperation? _obj);
        private delegate ImmutableArray<IPropertySubpatternOperationWrapper> PropertySubpatternsDelegate(IPatternOperation? _obj);

        private static readonly DeclaredSymbolDelegate DeclaredSymbolFunc;
        private static readonly DeconstructionSubpatternsDelegate DeconstructionSubpatternsFunc;
        private static readonly DeconstructSymbolDelegate DeconstructSymbolFunc;
        private static readonly MatchedTypeDelegate MatchedTypeFunc;
        private static readonly PropertySubpatternsDelegate PropertySubpatternsFunc;

        private readonly IPatternOperation? wrappedObject;

        static IRecursivePatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolFunc = LightupHelper.CreateGetAccessor<DeclaredSymbolDelegate>(WrappedType, nameof(DeclaredSymbol));
            DeconstructionSubpatternsFunc = LightupHelper.CreateGetAccessor<DeconstructionSubpatternsDelegate>(WrappedType, nameof(DeconstructionSubpatterns));
            DeconstructSymbolFunc = LightupHelper.CreateGetAccessor<DeconstructSymbolDelegate>(WrappedType, nameof(DeconstructSymbol));
            MatchedTypeFunc = LightupHelper.CreateGetAccessor<MatchedTypeDelegate>(WrappedType, nameof(MatchedType));
            PropertySubpatternsFunc = LightupHelper.CreateGetAccessor<PropertySubpatternsDelegate>(WrappedType, nameof(PropertySubpatterns));
        }

        private IRecursivePatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly ISymbol? DeclaredSymbol
            => DeclaredSymbolFunc(wrappedObject);

        public readonly ImmutableArray<IPatternOperation> DeconstructionSubpatterns
            => DeconstructionSubpatternsFunc(wrappedObject);

        public readonly ISymbol? DeconstructSymbol
            => DeconstructSymbolFunc(wrappedObject);

        public readonly ITypeSymbol MatchedType
            => MatchedTypeFunc(wrappedObject);

        public readonly ImmutableArray<IPropertySubpatternOperationWrapper> PropertySubpatterns
            => PropertySubpatternsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IRecursivePatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IRecursivePatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
