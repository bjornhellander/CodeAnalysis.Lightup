// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IPropertySubpatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IPropertySubpatternOperation";

        public static readonly Type? WrappedType;

        private delegate IOperation MemberGetterDelegate(IOperation? _obj);
        private delegate IPatternOperation PatternGetterDelegate(IOperation? _obj);

        private static readonly MemberGetterDelegate MemberGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;

        private readonly IOperation? wrappedObject;

        static IPropertySubpatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            MemberGetterFunc = LightupHelper.CreateGetAccessor<MemberGetterDelegate>(WrappedType, nameof(Member));
            PatternGetterFunc = LightupHelper.CreateGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));
        }

        private IPropertySubpatternOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IOperation Member
            => MemberGetterFunc(wrappedObject);

        public readonly IPatternOperation Pattern
            => PatternGetterFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IPropertySubpatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IPropertySubpatternOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
