// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringHandlerArgumentPlaceholderOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, Int32> ArgumentIndexFunc;
        private static readonly Func<IOperation?, InterpolatedStringArgumentPlaceholderKindEx> PlaceholderKindFunc;

        private readonly IOperation? wrappedObject;

        static IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentIndexFunc = LightupHelper.CreateGetAccessor<IOperation?, Int32>(WrappedType, nameof(ArgumentIndex));
            PlaceholderKindFunc = LightupHelper.CreateGetAccessor<IOperation?, InterpolatedStringArgumentPlaceholderKindEx>(WrappedType, nameof(PlaceholderKind));
        }

        private IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly Int32 ArgumentIndex
            => ArgumentIndexFunc(wrappedObject);

        public readonly InterpolatedStringArgumentPlaceholderKindEx PlaceholderKind
            => PlaceholderKindFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
