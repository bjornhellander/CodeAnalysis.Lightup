// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class IMemberReferenceOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IMemberReferenceOperation";

        public static readonly Type? WrappedType;

        private delegate ITypeSymbol? ConstrainedToTypeGetterDelegate(IMemberReferenceOperation? _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;

        static IMemberReferenceOperationExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = LightupHelper.CreateGetAccessor<ConstrainedToTypeGetterDelegate>(WrappedType, nameof(ConstrainedToType));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ITypeSymbol? ConstrainedToType(this IMemberReferenceOperation _obj)
            => ConstrainedToTypeGetterFunc(_obj);
    }
}
