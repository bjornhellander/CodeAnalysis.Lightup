// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringAdditionOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAdditionOperation";

        public static readonly Type? WrappedType;

        private delegate IOperation LeftGetterDelegate(IOperation? _obj);
        private delegate IOperation RightGetterDelegate(IOperation? _obj);

        private static readonly LeftGetterDelegate LeftGetterFunc;
        private static readonly RightGetterDelegate RightGetterFunc;

        private readonly IOperation? wrappedObject;

        static IInterpolatedStringAdditionOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftGetterFunc = LightupHelper.CreateInstanceGetAccessor<LeftGetterDelegate>(WrappedType, nameof(Left));
            RightGetterFunc = LightupHelper.CreateInstanceGetAccessor<RightGetterDelegate>(WrappedType, nameof(Right));
        }

        private IInterpolatedStringAdditionOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly IOperation Left
        {
            get => LeftGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly IOperation Right
        {
            get => RightGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringAdditionOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInterpolatedStringAdditionOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
