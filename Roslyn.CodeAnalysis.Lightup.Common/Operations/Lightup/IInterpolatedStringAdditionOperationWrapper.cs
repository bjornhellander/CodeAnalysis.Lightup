// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IInterpolatedStringAdditionOperation. Added in version 4.4.0.0.</summary>
    public readonly partial struct IInterpolatedStringAdditionOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAdditionOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.IOperation LeftGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate Microsoft.CodeAnalysis.IOperation RightGetterDelegate(Microsoft.CodeAnalysis.IOperation? _obj);

        private static readonly LeftGetterDelegate LeftGetterFunc;
        private static readonly RightGetterDelegate RightGetterFunc;

        private readonly Microsoft.CodeAnalysis.IOperation? wrappedObject;

        static IInterpolatedStringAdditionOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftGetterFunc = LightupHelper.CreateInstanceGetAccessor<LeftGetterDelegate>(WrappedType, nameof(Left));
            RightGetterFunc = LightupHelper.CreateInstanceGetAccessor<RightGetterDelegate>(WrappedType, nameof(Right));
        }

        private IInterpolatedStringAdditionOperationWrapper(Microsoft.CodeAnalysis.IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Left
        {
            get => LeftGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Right
        {
            get => RightGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringAdditionOperationWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.IOperation>(obj, WrappedType);
            return new IInterpolatedStringAdditionOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.IOperation? Unwrap()
            => wrappedObject;
    }
}
