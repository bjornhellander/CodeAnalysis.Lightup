// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringAdditionOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAdditionOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, IOperation> LeftFunc;
        private static readonly Func<IOperation?, IOperation> RightFunc;

        private readonly IOperation? wrappedObject;

        static IInterpolatedStringAdditionOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Left));
            RightFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Right));
        }

        private IInterpolatedStringAdditionOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IOperation Left
            => LeftFunc(wrappedObject);

        public readonly IOperation Right
            => RightFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringAdditionOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInterpolatedStringAdditionOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
