// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.8.0.0</summary>
    public readonly struct IInlineArrayAccessOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInlineArrayAccessOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, IOperation> ArgumentFunc;
        private static readonly Func<IOperation?, IOperation> InstanceFunc;

        private readonly IOperation? wrappedObject;

        static IInlineArrayAccessOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ArgumentFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Argument));
            InstanceFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Instance));
        }

        private IInlineArrayAccessOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IOperation Argument
            => ArgumentFunc(wrappedObject);

        public readonly IOperation Instance
            => InstanceFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInlineArrayAccessOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IInlineArrayAccessOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
