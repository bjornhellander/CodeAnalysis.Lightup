// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IBinaryPatternOperation. Added in version 3.8.0.0.</summary>
    public readonly struct IBinaryPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IBinaryPatternOperation";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate IPatternOperation LeftPatternGetterDelegate(IPatternOperation? _obj);
        private delegate BinaryOperatorKind OperatorKindGetterDelegate(IPatternOperation? _obj);
        private delegate IPatternOperation RightPatternGetterDelegate(IPatternOperation? _obj);

        private static readonly LeftPatternGetterDelegate LeftPatternGetterFunc;
        private static readonly OperatorKindGetterDelegate OperatorKindGetterFunc;
        private static readonly RightPatternGetterDelegate RightPatternGetterFunc;

        private readonly IPatternOperation? wrappedObject;

        static IBinaryPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftPatternGetterFunc = LightupHelper.CreateInstanceGetAccessor<LeftPatternGetterDelegate>(WrappedType, nameof(LeftPattern));
            OperatorKindGetterFunc = LightupHelper.CreateInstanceGetAccessor<OperatorKindGetterDelegate>(WrappedType, nameof(OperatorKind));
            RightPatternGetterFunc = LightupHelper.CreateInstanceGetAccessor<RightPatternGetterDelegate>(WrappedType, nameof(RightPattern));
        }

        private IBinaryPatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly IPatternOperation LeftPattern
        {
            get => LeftPatternGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly BinaryOperatorKind OperatorKind
        {
            get => OperatorKindGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly IPatternOperation RightPattern
        {
            get => RightPatternGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IBinaryPatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IBinaryPatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
