// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IBinaryPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IBinaryPatternOperation";

        public static readonly Type? WrappedType;

        private delegate IPatternOperation LeftPatternDelegate(IPatternOperation? _obj);
        private delegate BinaryOperatorKind OperatorKindDelegate(IPatternOperation? _obj);
        private delegate IPatternOperation RightPatternDelegate(IPatternOperation? _obj);

        private static readonly LeftPatternDelegate LeftPatternFunc;
        private static readonly OperatorKindDelegate OperatorKindFunc;
        private static readonly RightPatternDelegate RightPatternFunc;

        private readonly IPatternOperation? wrappedObject;

        static IBinaryPatternOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LeftPatternFunc = LightupHelper.CreateGetAccessor<LeftPatternDelegate>(WrappedType, nameof(LeftPattern));
            OperatorKindFunc = LightupHelper.CreateGetAccessor<OperatorKindDelegate>(WrappedType, nameof(OperatorKind));
            RightPatternFunc = LightupHelper.CreateGetAccessor<RightPatternDelegate>(WrappedType, nameof(RightPattern));
        }

        private IBinaryPatternOperationWrapper(IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IPatternOperation LeftPattern
            => LeftPatternFunc(wrappedObject);

        public readonly BinaryOperatorKind OperatorKind
            => OperatorKindFunc(wrappedObject);

        public readonly IPatternOperation RightPattern
            => RightPatternFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IBinaryPatternOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IPatternOperation>(obj, WrappedType);
            return new IBinaryPatternOperationWrapper(obj2);
        }

        public IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
