// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.</summary>
    public static class IForEachLoopOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IForEachLoopOperation";

        private delegate System.Boolean IsAsynchronousGetterDelegate(Microsoft.CodeAnalysis.Operations.IForEachLoopOperation? _obj);

        private static readonly IsAsynchronousGetterDelegate IsAsynchronousGetterFunc;

        static IForEachLoopOperationExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            IsAsynchronousGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsAsynchronousGetterDelegate>(wrappedType, nameof(IsAsynchronous));
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsAsynchronous(this Microsoft.CodeAnalysis.Operations.IForEachLoopOperation _obj)
            => IsAsynchronousGetterFunc(_obj);
    }
}
