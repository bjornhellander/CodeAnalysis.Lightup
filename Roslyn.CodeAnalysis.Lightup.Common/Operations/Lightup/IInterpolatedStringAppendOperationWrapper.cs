// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IInterpolatedStringAppendOperation. Added in version 4.4.0.0.</summary>
    public readonly struct IInterpolatedStringAppendOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAppendOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.IOperation AppendCallGetterDelegate(Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation? _obj);

        private static readonly AppendCallGetterDelegate AppendCallGetterFunc;

        private readonly Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation? wrappedObject;

        static IInterpolatedStringAppendOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AppendCallGetterFunc = LightupHelper.CreateInstanceGetAccessor<AppendCallGetterDelegate>(WrappedType, nameof(AppendCall));
        }

        private IInterpolatedStringAppendOperationWrapper(Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation AppendCall
        {
            get => AppendCallGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringAppendOperationWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation>(obj, WrappedType);
            return new IInterpolatedStringAppendOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation? Unwrap()
            => wrappedObject;
    }
}
