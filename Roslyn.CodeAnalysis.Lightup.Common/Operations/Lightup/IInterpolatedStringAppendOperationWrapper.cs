// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IInterpolatedStringAppendOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAppendOperation";

        public static readonly Type? WrappedType;

        private delegate IOperation AppendCallGetterDelegate(IInterpolatedStringContentOperation? _obj);

        private static readonly AppendCallGetterDelegate AppendCallGetterFunc;

        private readonly IInterpolatedStringContentOperation? wrappedObject;

        static IInterpolatedStringAppendOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AppendCallGetterFunc = LightupHelper.CreateGetAccessor<AppendCallGetterDelegate>(WrappedType, nameof(AppendCall));
        }

        private IInterpolatedStringAppendOperationWrapper(IInterpolatedStringContentOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly IOperation AppendCall
        {
            get => AppendCallGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IInterpolatedStringAppendOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IInterpolatedStringContentOperation>(obj, WrappedType);
            return new IInterpolatedStringAppendOperationWrapper(obj2);
        }

        public IInterpolatedStringContentOperation? Unwrap()
            => wrappedObject;
    }
}
