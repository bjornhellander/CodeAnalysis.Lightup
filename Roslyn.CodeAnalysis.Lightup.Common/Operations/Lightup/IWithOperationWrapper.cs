// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IWithOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IWithOperation";

        public static readonly Type? WrappedType;

        private delegate IMethodSymbol? CloneMethodGetterDelegate(IOperation? _obj);
        private delegate IObjectOrCollectionInitializerOperation InitializerGetterDelegate(IOperation? _obj);
        private delegate IOperation OperandGetterDelegate(IOperation? _obj);

        private static readonly CloneMethodGetterDelegate CloneMethodGetterFunc;
        private static readonly InitializerGetterDelegate InitializerGetterFunc;
        private static readonly OperandGetterDelegate OperandGetterFunc;

        private readonly IOperation? wrappedObject;

        static IWithOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloneMethodGetterFunc = LightupHelper.CreateGetAccessor<CloneMethodGetterDelegate>(WrappedType, nameof(CloneMethod));
            InitializerGetterFunc = LightupHelper.CreateGetAccessor<InitializerGetterDelegate>(WrappedType, nameof(Initializer));
            OperandGetterFunc = LightupHelper.CreateGetAccessor<OperandGetterDelegate>(WrappedType, nameof(Operand));
        }

        private IWithOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly IMethodSymbol? CloneMethod
        {
            get => CloneMethodGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly IObjectOrCollectionInitializerOperation Initializer
        {
            get => InitializerGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly IOperation Operand
        {
            get => OperandGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IWithOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IWithOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
