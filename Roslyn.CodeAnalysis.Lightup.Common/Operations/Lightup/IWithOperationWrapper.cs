// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IWithOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IWithOperation";

        public static readonly Type? WrappedType;

        private static readonly Func<IOperation?, IMethodSymbol?> CloneMethodFunc;
        private static readonly Func<IOperation?, IObjectOrCollectionInitializerOperation> InitializerFunc;
        private static readonly Func<IOperation?, IOperation> OperandFunc;

        private readonly IOperation? wrappedObject;

        static IWithOperationWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CloneMethodFunc = LightupHelper.CreateGetAccessor<IOperation?, IMethodSymbol?>(WrappedType, nameof(CloneMethod));
            InitializerFunc = LightupHelper.CreateGetAccessor<IOperation?, IObjectOrCollectionInitializerOperation>(WrappedType, nameof(Initializer));
            OperandFunc = LightupHelper.CreateGetAccessor<IOperation?, IOperation>(WrappedType, nameof(Operand));
        }

        private IWithOperationWrapper(IOperation? obj)
        {
            wrappedObject = obj;
        }

        public readonly IMethodSymbol? CloneMethod
            => CloneMethodFunc(wrappedObject);

        public readonly IObjectOrCollectionInitializerOperation Initializer
            => InitializerFunc(wrappedObject);

        public readonly IOperation Operand
            => OperandFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IWithOperationWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IOperation>(obj, WrappedType);
            return new IWithOperationWrapper(obj2);
        }

        public IOperation? Unwrap()
            => wrappedObject;
    }
}
