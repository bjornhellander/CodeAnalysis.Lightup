// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Operations.CommonConversion.</summary>
    public static class CommonConversionExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.CommonConversion";

        private delegate ITypeSymbol? ConstrainedToTypeGetterDelegate(CommonConversion? _obj);
        private delegate Boolean IsNullableGetterDelegate(CommonConversion? _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly IsNullableGetterDelegate IsNullableGetterFunc;

        static CommonConversionExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(wrappedType, nameof(ConstrainedToType));
            IsNullableGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsNullableGetterDelegate>(wrappedType, nameof(IsNullable));
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static ITypeSymbol? ConstrainedToType(this CommonConversion _obj)
            => ConstrainedToTypeGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Boolean IsNullable(this CommonConversion _obj)
            => IsNullableGetterFunc(_obj);
    }
}
