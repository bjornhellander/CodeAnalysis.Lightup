// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.NullableContextExtensions. Added in version 3.8.0.0.</summary>
    public static class NullableContextExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.NullableContextExtensions";

        private delegate Boolean AnnotationsEnabledDelegate0(NullableContextEx context);
        private delegate Boolean AnnotationsInheritedDelegate1(NullableContextEx context);
        private delegate Boolean WarningsEnabledDelegate2(NullableContextEx context);
        private delegate Boolean WarningsInheritedDelegate3(NullableContextEx context);

        private static readonly AnnotationsEnabledDelegate0 AnnotationsEnabledFunc0;
        private static readonly AnnotationsInheritedDelegate1 AnnotationsInheritedFunc1;
        private static readonly WarningsEnabledDelegate2 WarningsEnabledFunc2;
        private static readonly WarningsInheritedDelegate3 WarningsInheritedFunc3;

        static NullableContextExtensionsEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AnnotationsEnabledFunc0 = LightupHelper.CreateStaticMethodAccessor<AnnotationsEnabledDelegate0>(wrappedType, nameof(AnnotationsEnabled));
            AnnotationsInheritedFunc1 = LightupHelper.CreateStaticMethodAccessor<AnnotationsInheritedDelegate1>(wrappedType, nameof(AnnotationsInherited));
            WarningsEnabledFunc2 = LightupHelper.CreateStaticMethodAccessor<WarningsEnabledDelegate2>(wrappedType, nameof(WarningsEnabled));
            WarningsInheritedFunc3 = LightupHelper.CreateStaticMethodAccessor<WarningsInheritedDelegate3>(wrappedType, nameof(WarningsInherited));
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Boolean AnnotationsEnabled(this NullableContextEx context)
            => AnnotationsEnabledFunc0(context);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Boolean AnnotationsInherited(this NullableContextEx context)
            => AnnotationsInheritedFunc1(context);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Boolean WarningsEnabled(this NullableContextEx context)
            => WarningsEnabledFunc2(context);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Boolean WarningsInherited(this NullableContextEx context)
            => WarningsInheritedFunc3(context);
    }
}
