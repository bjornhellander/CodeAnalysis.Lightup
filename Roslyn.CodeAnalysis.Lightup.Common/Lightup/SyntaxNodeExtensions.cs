// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxNode.</summary>
    public static partial class SyntaxNodeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxNode";

        private delegate System.Boolean ContainsDirectiveDelegate0(Microsoft.CodeAnalysis.SyntaxNode? _obj, System.Int32 rawKind);
        private delegate System.Boolean IsIncrementallyIdenticalToDelegate1(Microsoft.CodeAnalysis.SyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxNode? other);

        private static readonly ContainsDirectiveDelegate0 ContainsDirectiveFunc0;
        private static readonly IsIncrementallyIdenticalToDelegate1 IsIncrementallyIdenticalToFunc1;

        static SyntaxNodeExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            ContainsDirectiveFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<ContainsDirectiveDelegate0>(wrappedType, "ContainsDirective", "rawKindInt32");
            IsIncrementallyIdenticalToFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate1>(wrappedType, "IsIncrementallyIdenticalTo", "otherSyntaxNode");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static System.Boolean ContainsDirective(this Microsoft.CodeAnalysis.SyntaxNode _obj, System.Int32 rawKind)
            => ContainsDirectiveFunc0(_obj, rawKind);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Boolean IsIncrementallyIdenticalTo(this Microsoft.CodeAnalysis.SyntaxNode _obj, Microsoft.CodeAnalysis.SyntaxNode? other)
            => IsIncrementallyIdenticalToFunc1(_obj, other);
    }
}
