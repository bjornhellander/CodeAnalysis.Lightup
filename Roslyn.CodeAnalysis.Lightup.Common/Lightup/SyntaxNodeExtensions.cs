// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class SyntaxNodeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxNode";

        public static readonly Type? WrappedType;

        private delegate Boolean ContainsDirectiveDelegate0(SyntaxNode? _obj, Int32 rawKind);
        private delegate Boolean IsIncrementallyIdenticalToDelegate1(SyntaxNode? _obj, SyntaxNode? other);

        private static readonly ContainsDirectiveDelegate0 ContainsDirectiveFunc0;
        private static readonly IsIncrementallyIdenticalToDelegate1 IsIncrementallyIdenticalToFunc1;

        static SyntaxNodeExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ContainsDirectiveFunc0 = LightupHelper.CreateInstanceMethodAccessor<ContainsDirectiveDelegate0>(WrappedType, nameof(ContainsDirective));
            IsIncrementallyIdenticalToFunc1 = LightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate1>(WrappedType, nameof(IsIncrementallyIdenticalTo));
        }

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static Boolean ContainsDirective(this SyntaxNode _obj, Int32 rawKind)
            => ContainsDirectiveFunc0(_obj, rawKind);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public static Boolean IsIncrementallyIdenticalTo(this SyntaxNode _obj, SyntaxNode? other)
            => IsIncrementallyIdenticalToFunc1(_obj, other);
    }
}
