// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct AnalyzerConfigSetWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigSet";

        public static readonly Type? WrappedType;

        private delegate AnalyzerConfigOptionsResultWrapper GlobalConfigOptionsGetterDelegate(object? _obj);

        private delegate AnalyzerConfigOptionsResultWrapper GetOptionsForSourcePathDelegate0(object? _obj, String sourcePath);

        private static readonly GlobalConfigOptionsGetterDelegate GlobalConfigOptionsGetterFunc;

        private static readonly GetOptionsForSourcePathDelegate0 GetOptionsForSourcePathFunc0;

        private readonly object? wrappedObject;

        static AnalyzerConfigSetWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GlobalConfigOptionsGetterFunc = LightupHelper.CreateGetAccessor<GlobalConfigOptionsGetterDelegate>(WrappedType, nameof(GlobalConfigOptions));

            GetOptionsForSourcePathFunc0 = LightupHelper.CreateMethodAccessor<GetOptionsForSourcePathDelegate0>(WrappedType, nameof(GetOptionsForSourcePath));
        }

        private AnalyzerConfigSetWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly AnalyzerConfigOptionsResultWrapper GlobalConfigOptions
            => GlobalConfigOptionsGetterFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigSetWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigSetWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly AnalyzerConfigOptionsResultWrapper GetOptionsForSourcePath(String sourcePath)
            => GetOptionsForSourcePathFunc0(wrappedObject, sourcePath);
    }
}
