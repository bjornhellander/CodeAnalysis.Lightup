// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.SyntaxToken.</summary>
    public static partial class SyntaxTokenExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxToken";

        private delegate System.Boolean IsIncrementallyIdenticalToDelegate0(Microsoft.CodeAnalysis.SyntaxToken? _obj, Microsoft.CodeAnalysis.SyntaxToken token);

        private static readonly IsIncrementallyIdenticalToDelegate0 IsIncrementallyIdenticalToFunc0;

        static SyntaxTokenExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            IsIncrementallyIdenticalToFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate0>(wrappedType, "IsIncrementallyIdenticalTo", "tokenSyntaxToken");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Boolean IsIncrementallyIdenticalTo(this Microsoft.CodeAnalysis.SyntaxToken _obj, Microsoft.CodeAnalysis.SyntaxToken token)
            => IsIncrementallyIdenticalToFunc0(_obj, token);
    }
}
