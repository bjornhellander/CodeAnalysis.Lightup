// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList+Reversed+Enumerator. Added in version 4.4.0.0.</summary>
    public readonly partial struct EnumeratorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList+Reversed+Enumerator";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.IOperation CurrentGetterDelegate(System.Object? _obj);

        private delegate System.Boolean MoveNextDelegate0(System.Object? _obj);
        private delegate void ResetDelegate1(System.Object? _obj);

        private static readonly CurrentGetterDelegate CurrentGetterFunc;

        private static readonly MoveNextDelegate0 MoveNextFunc0;
        private static readonly ResetDelegate1 ResetFunc1;

        private readonly System.Object? wrappedObject;

        static EnumeratorWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            CurrentGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CurrentGetterDelegate>(WrappedType, nameof(Current));

            MoveNextFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<MoveNextDelegate0>(WrappedType, "MoveNext");
            ResetFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<ResetDelegate1>(WrappedType, "Reset");
        }

        private EnumeratorWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Current
        {
            get => CurrentGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static EnumeratorWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new EnumeratorWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean MoveNext()
            => MoveNextFunc0(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Reset()
            => ResetFunc1(wrappedObject);
    }
}
