// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.0.0.0</summary>
    public readonly struct LineMappingWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.LineMapping";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, Nullable<Int32>> CharacterOffsetFunc;
        private static readonly Func<object?, Boolean> IsHiddenFunc;
        private static readonly Func<object?, FileLinePositionSpan> MappedSpanFunc;
        private static readonly Func<object?, LinePositionSpan> SpanFunc;

        private static readonly Func<object?, LineMappingWrapper, Boolean> EqualsFunc0;

        private readonly object? wrappedObject;

        static LineMappingWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CharacterOffsetFunc = LightupHelper.CreateGetAccessor<object?, Nullable<Int32>>(WrappedType, nameof(CharacterOffset));
            IsHiddenFunc = LightupHelper.CreateGetAccessor<object?, Boolean>(WrappedType, nameof(IsHidden));
            MappedSpanFunc = LightupHelper.CreateGetAccessor<object?, FileLinePositionSpan>(WrappedType, nameof(MappedSpan));
            SpanFunc = LightupHelper.CreateGetAccessor<object?, LinePositionSpan>(WrappedType, nameof(Span));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<object?, LineMappingWrapper, Boolean>(WrappedType, nameof(Equals));
        }

        private LineMappingWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly Nullable<Int32> CharacterOffset
            => CharacterOffsetFunc(wrappedObject);

        public readonly Boolean IsHidden
            => IsHiddenFunc(wrappedObject);

        public readonly FileLinePositionSpan MappedSpan
            => MappedSpanFunc(wrappedObject);

        public readonly LinePositionSpan Span
            => SpanFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LineMappingWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new LineMappingWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly Boolean Equals(LineMappingWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
