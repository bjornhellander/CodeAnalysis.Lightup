// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.0.0.0</summary>
    public readonly struct LineMappingWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.LineMapping";

        public static readonly Type? WrappedType;

        private delegate Nullable<Int32> CharacterOffsetGetterDelegate(object? _obj);
        private delegate Boolean IsHiddenGetterDelegate(object? _obj);
        private delegate FileLinePositionSpan MappedSpanGetterDelegate(object? _obj);
        private delegate LinePositionSpan SpanGetterDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, LineMappingWrapper other);

        private static readonly CharacterOffsetGetterDelegate CharacterOffsetGetterFunc;
        private static readonly IsHiddenGetterDelegate IsHiddenGetterFunc;
        private static readonly MappedSpanGetterDelegate MappedSpanGetterFunc;
        private static readonly SpanGetterDelegate SpanGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly object? wrappedObject;

        static LineMappingWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CharacterOffsetGetterFunc = LightupHelper.CreateGetAccessor<CharacterOffsetGetterDelegate>(WrappedType, nameof(CharacterOffset));
            IsHiddenGetterFunc = LightupHelper.CreateGetAccessor<IsHiddenGetterDelegate>(WrappedType, nameof(IsHidden));
            MappedSpanGetterFunc = LightupHelper.CreateGetAccessor<MappedSpanGetterDelegate>(WrappedType, nameof(MappedSpan));
            SpanGetterFunc = LightupHelper.CreateGetAccessor<SpanGetterDelegate>(WrappedType, nameof(Span));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
        }

        private LineMappingWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly Nullable<Int32> CharacterOffset
        {
            get => CharacterOffsetGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly Boolean IsHidden
        {
            get => IsHiddenGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly FileLinePositionSpan MappedSpan
        {
            get => MappedSpanGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly LinePositionSpan Span
        {
            get => SpanGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LineMappingWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new LineMappingWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public readonly Boolean Equals(LineMappingWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
