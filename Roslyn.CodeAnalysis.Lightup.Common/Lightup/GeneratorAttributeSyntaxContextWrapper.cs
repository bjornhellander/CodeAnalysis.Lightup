// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.4.0.0</summary>
    public readonly struct GeneratorAttributeSyntaxContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext";

        public static readonly Type? WrappedType;

        private delegate ImmutableArray<AttributeData> AttributesDelegate(object? _obj);
        private delegate SemanticModel SemanticModelDelegate(object? _obj);
        private delegate SyntaxNode TargetNodeDelegate(object? _obj);
        private delegate ISymbol TargetSymbolDelegate(object? _obj);

        private static readonly AttributesDelegate AttributesFunc;
        private static readonly SemanticModelDelegate SemanticModelFunc;
        private static readonly TargetNodeDelegate TargetNodeFunc;
        private static readonly TargetSymbolDelegate TargetSymbolFunc;

        private readonly object? wrappedObject;

        static GeneratorAttributeSyntaxContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AttributesFunc = LightupHelper.CreateGetAccessor<AttributesDelegate>(WrappedType, nameof(Attributes));
            SemanticModelFunc = LightupHelper.CreateGetAccessor<SemanticModelDelegate>(WrappedType, nameof(SemanticModel));
            TargetNodeFunc = LightupHelper.CreateGetAccessor<TargetNodeDelegate>(WrappedType, nameof(TargetNode));
            TargetSymbolFunc = LightupHelper.CreateGetAccessor<TargetSymbolDelegate>(WrappedType, nameof(TargetSymbol));
        }

        private GeneratorAttributeSyntaxContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly ImmutableArray<AttributeData> Attributes
            => AttributesFunc(wrappedObject);

        public readonly SemanticModel SemanticModel
            => SemanticModelFunc(wrappedObject);

        public readonly SyntaxNode TargetNode
            => TargetNodeFunc(wrappedObject);

        public readonly ISymbol TargetSymbol
            => TargetSymbolFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static GeneratorAttributeSyntaxContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new GeneratorAttributeSyntaxContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
