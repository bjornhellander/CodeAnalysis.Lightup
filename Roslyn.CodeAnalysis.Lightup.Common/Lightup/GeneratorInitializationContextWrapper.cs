// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct GeneratorInitializationContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.GeneratorInitializationContext";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, CancellationToken> CancellationTokenFunc;

        private static readonly Action<object?, Action<GeneratorPostInitializationContextWrapper>> RegisterForPostInitializationFunc0;
        private static readonly Action<object?, SyntaxReceiverCreatorWrapper> RegisterForSyntaxNotificationsFunc1;
        private static readonly Action<object?, SyntaxContextReceiverCreatorWrapper> RegisterForSyntaxNotificationsFunc2;

        private readonly object? wrappedObject;

        static GeneratorInitializationContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CancellationTokenFunc = LightupHelper.CreateGetAccessor<object?, CancellationToken>(WrappedType, nameof(CancellationToken));

            RegisterForPostInitializationFunc0 = LightupHelper.CreateVoidMethodAccessor<object?, Action<GeneratorPostInitializationContextWrapper>>(WrappedType, nameof(RegisterForPostInitialization));
            RegisterForSyntaxNotificationsFunc1 = LightupHelper.CreateVoidMethodAccessor<object?, SyntaxReceiverCreatorWrapper>(WrappedType, nameof(RegisterForSyntaxNotifications));
            RegisterForSyntaxNotificationsFunc2 = LightupHelper.CreateVoidMethodAccessor<object?, SyntaxContextReceiverCreatorWrapper>(WrappedType, nameof(RegisterForSyntaxNotifications));
        }

        private GeneratorInitializationContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly CancellationToken CancellationToken
            => CancellationTokenFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static GeneratorInitializationContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new GeneratorInitializationContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void RegisterForPostInitialization(Action<GeneratorPostInitializationContextWrapper> callback)
            => RegisterForPostInitializationFunc0(wrappedObject, callback);

        public readonly void RegisterForSyntaxNotifications(SyntaxReceiverCreatorWrapper receiverCreator)
            => RegisterForSyntaxNotificationsFunc1(wrappedObject, receiverCreator);

        public readonly void RegisterForSyntaxNotifications(SyntaxContextReceiverCreatorWrapper receiverCreator)
            => RegisterForSyntaxNotificationsFunc2(wrappedObject, receiverCreator);
    }
}
