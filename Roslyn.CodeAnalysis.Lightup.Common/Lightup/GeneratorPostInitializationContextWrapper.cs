// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.0.0.0</summary>
    public readonly struct GeneratorPostInitializationContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.GeneratorPostInitializationContext";

        public static readonly Type? WrappedType;

        private delegate CancellationToken CancellationTokenDelegate(object? _obj);

        private delegate void AddSourceDelegate0(object? _obj, String hintName, String source);
        private delegate void AddSourceDelegate1(object? _obj, String hintName, SourceText sourceText);

        private static readonly CancellationTokenDelegate CancellationTokenFunc;

        private static readonly AddSourceDelegate0 AddSourceFunc0;
        private static readonly AddSourceDelegate1 AddSourceFunc1;

        private readonly object? wrappedObject;

        static GeneratorPostInitializationContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CancellationTokenFunc = LightupHelper.CreateGetAccessor<CancellationTokenDelegate>(WrappedType, nameof(CancellationToken));

            AddSourceFunc0 = LightupHelper.CreateMethodAccessor<AddSourceDelegate0>(WrappedType, nameof(AddSource));
            AddSourceFunc1 = LightupHelper.CreateMethodAccessor<AddSourceDelegate1>(WrappedType, nameof(AddSource));
        }

        private GeneratorPostInitializationContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly CancellationToken CancellationToken
            => CancellationTokenFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static GeneratorPostInitializationContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new GeneratorPostInitializationContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void AddSource(String hintName, String source)
            => AddSourceFunc0(wrappedObject, hintName, source);

        public readonly void AddSource(String hintName, SourceText sourceText)
            => AddSourceFunc1(wrappedObject, hintName, sourceText);
    }
}
