// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Added in Roslyn version 4.0.0.0</summary>
    public readonly struct SourceProductionContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SourceProductionContext";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, CancellationToken> CancellationTokenFunc;

        private static readonly Action<object?, String, String> AddSourceFunc0;
        private static readonly Action<object?, String, SourceText> AddSourceFunc1;
        private static readonly Action<object?, Diagnostic> ReportDiagnosticFunc2;

        private readonly object? wrappedObject;

        static SourceProductionContextWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CancellationTokenFunc = LightupHelper.CreateGetAccessor<object?, CancellationToken>(WrappedType, nameof(CancellationToken));

            AddSourceFunc0 = LightupHelper.CreateVoidMethodAccessor<object?, String, String>(WrappedType, nameof(AddSource));
            AddSourceFunc1 = LightupHelper.CreateVoidMethodAccessor<object?, String, SourceText>(WrappedType, nameof(AddSource));
            ReportDiagnosticFunc2 = LightupHelper.CreateVoidMethodAccessor<object?, Diagnostic>(WrappedType, nameof(ReportDiagnostic));
        }

        private SourceProductionContextWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly CancellationToken CancellationToken
            => CancellationTokenFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SourceProductionContextWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SourceProductionContextWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void AddSource(String hintName, String source)
            => AddSourceFunc0(wrappedObject, hintName, source);

        public readonly void AddSource(String hintName, SourceText sourceText)
            => AddSourceFunc1(wrappedObject, hintName, sourceText);

        public readonly void ReportDiagnostic(Diagnostic diagnostic)
            => ReportDiagnosticFunc2(wrappedObject, diagnostic);
    }
}
