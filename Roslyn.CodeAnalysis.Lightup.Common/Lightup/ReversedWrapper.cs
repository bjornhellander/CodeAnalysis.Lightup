// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList+Reversed. Added in version 4.4.0.0.</summary>
    public readonly partial struct ReversedWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList+Reversed";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Int32 CountGetterDelegate(System.Object? _obj);

        private delegate Microsoft.CodeAnalysis.Lightup.EnumeratorWrapper GetEnumeratorDelegate0(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> ToImmutableArrayDelegate1(System.Object? _obj);

        private static readonly CountGetterDelegate CountGetterFunc;

        private static readonly GetEnumeratorDelegate0 GetEnumeratorFunc0;
        private static readonly ToImmutableArrayDelegate1 ToImmutableArrayFunc1;

        private readonly System.Object? wrappedObject;

        static ReversedWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            CountGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CountGetterDelegate>(WrappedType, nameof(Count));

            GetEnumeratorFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<GetEnumeratorDelegate0>(WrappedType, "GetEnumerator");
            ToImmutableArrayFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<ToImmutableArrayDelegate1>(WrappedType, "ToImmutableArray");
        }

        private ReversedWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Int32 Count
        {
            get => CountGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static ReversedWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new ReversedWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.EnumeratorWrapper GetEnumerator()
            => GetEnumeratorFunc0(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> ToImmutableArray()
            => ToImmutableArrayFunc1(wrappedObject);
    }
}
