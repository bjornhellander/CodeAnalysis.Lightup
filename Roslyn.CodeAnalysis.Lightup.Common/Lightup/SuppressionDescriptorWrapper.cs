// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct SuppressionDescriptorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SuppressionDescriptor";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, String> IdFunc;
        private static readonly Func<object?, LocalizableString> JustificationFunc;
        private static readonly Func<object?, String> SuppressedDiagnosticIdFunc;

        private static readonly Func<object?, SuppressionDescriptorWrapper, Boolean> EqualsFunc0;

        private readonly object? wrappedObject;

        static SuppressionDescriptorWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IdFunc = LightupHelper.CreateGetAccessor<object?, String>(WrappedType, nameof(Id));
            JustificationFunc = LightupHelper.CreateGetAccessor<object?, LocalizableString>(WrappedType, nameof(Justification));
            SuppressedDiagnosticIdFunc = LightupHelper.CreateGetAccessor<object?, String>(WrappedType, nameof(SuppressedDiagnosticId));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<object?, SuppressionDescriptorWrapper, Boolean>(WrappedType, nameof(Equals));
        }

        private SuppressionDescriptorWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly String Id
            => IdFunc(wrappedObject);

        public readonly LocalizableString Justification
            => JustificationFunc(wrappedObject);

        public readonly String SuppressedDiagnosticId
            => SuppressedDiagnosticIdFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SuppressionDescriptorWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SuppressionDescriptorWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly Boolean Equals(SuppressionDescriptorWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
