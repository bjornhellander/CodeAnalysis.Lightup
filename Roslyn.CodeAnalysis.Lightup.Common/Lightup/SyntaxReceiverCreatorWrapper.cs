// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct SyntaxReceiverCreatorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxReceiverCreator";

        public static readonly Type? WrappedType;

        private delegate IAsyncResult BeginInvokeDelegate0(MulticastDelegate? _obj, AsyncCallback? callback, Object? @object);
        private delegate ISyntaxReceiverWrapper EndInvokeDelegate1(MulticastDelegate? _obj, IAsyncResult? result);
        private delegate ISyntaxReceiverWrapper InvokeDelegate2(MulticastDelegate? _obj);

        private static readonly BeginInvokeDelegate0 BeginInvokeFunc0;
        private static readonly EndInvokeDelegate1 EndInvokeFunc1;
        private static readonly InvokeDelegate2 InvokeFunc2;

        private readonly MulticastDelegate? wrappedObject;

        static SyntaxReceiverCreatorWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            BeginInvokeFunc0 = LightupHelper.CreateMethodAccessor<BeginInvokeDelegate0>(WrappedType, nameof(BeginInvoke));
            EndInvokeFunc1 = LightupHelper.CreateMethodAccessor<EndInvokeDelegate1>(WrappedType, nameof(EndInvoke));
            InvokeFunc2 = LightupHelper.CreateMethodAccessor<InvokeDelegate2>(WrappedType, nameof(Invoke));
        }

        private SyntaxReceiverCreatorWrapper(MulticastDelegate? obj)
        {
            wrappedObject = obj;
        }

        public static implicit operator MulticastDelegate?(SyntaxReceiverCreatorWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SyntaxReceiverCreatorWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<MulticastDelegate>(obj, WrappedType);
            return new SyntaxReceiverCreatorWrapper(obj2);
        }

        public MulticastDelegate? Unwrap()
            => wrappedObject;

        public readonly IAsyncResult BeginInvoke(AsyncCallback? callback, Object? @object)
            => BeginInvokeFunc0(wrappedObject, callback, @object);

        public readonly ISyntaxReceiverWrapper EndInvoke(IAsyncResult? result)
            => EndInvokeFunc1(wrappedObject, result);

        public readonly ISyntaxReceiverWrapper Invoke()
            => InvokeFunc2(wrappedObject);
    }
}
