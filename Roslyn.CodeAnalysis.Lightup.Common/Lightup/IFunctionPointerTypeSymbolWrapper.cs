// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version 3.8.0.0</summary>
    public readonly struct IFunctionPointerTypeSymbolWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IFunctionPointerTypeSymbol";

        public static readonly Type? WrappedType;

        private static readonly Func<ITypeSymbol?, IMethodSymbol> SignatureFunc;

        private readonly ITypeSymbol? wrappedObject;

        static IFunctionPointerTypeSymbolWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            SignatureFunc = LightupHelper.CreateGetAccessor<ITypeSymbol?, IMethodSymbol>(WrappedType, nameof(Signature));
        }

        private IFunctionPointerTypeSymbolWrapper(ITypeSymbol? obj)
        {
            wrappedObject = obj;
        }

        public readonly IMethodSymbol Signature
            => SignatureFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IFunctionPointerTypeSymbolWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<ITypeSymbol>(obj, WrappedType);
            return new IFunctionPointerTypeSymbolWrapper(obj2);
        }

        public ITypeSymbol? Unwrap()
            => wrappedObject;
    }
}
