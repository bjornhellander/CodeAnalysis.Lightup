// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Added in Roslyn version 3.8.0.0</summary>
    public readonly struct AnalyzerConfigOptionsResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, ImmutableDictionary<String, String>> AnalyzerOptionsFunc;
        private static readonly Func<object?, ImmutableArray<Diagnostic>> DiagnosticsFunc;
        private static readonly Func<object?, ImmutableDictionary<String, ReportDiagnostic>> TreeOptionsFunc;

        private readonly object? wrappedObject;

        static AnalyzerConfigOptionsResultWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AnalyzerOptionsFunc = LightupHelper.CreateGetAccessor<object?, ImmutableDictionary<String, String>>(WrappedType, nameof(AnalyzerOptions));
            DiagnosticsFunc = LightupHelper.CreateGetAccessor<object?, ImmutableArray<Diagnostic>>(WrappedType, nameof(Diagnostics));
            TreeOptionsFunc = LightupHelper.CreateGetAccessor<object?, ImmutableDictionary<String, ReportDiagnostic>>(WrappedType, nameof(TreeOptions));
        }

        private AnalyzerConfigOptionsResultWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly ImmutableDictionary<String, String> AnalyzerOptions
            => AnalyzerOptionsFunc(wrappedObject);

        public readonly ImmutableArray<Diagnostic> Diagnostics
            => DiagnosticsFunc(wrappedObject);

        public readonly ImmutableDictionary<String, ReportDiagnostic> TreeOptions
            => TreeOptionsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigOptionsResultWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigOptionsResultWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
