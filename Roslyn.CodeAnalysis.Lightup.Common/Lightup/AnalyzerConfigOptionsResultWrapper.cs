// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in version 3.8.0.0 of Roslyn.</summary>
    public readonly struct AnalyzerConfigOptionsResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ImmutableDictionary<String, String> AnalyzerOptionsGetterDelegate(object? _obj);
        private delegate ImmutableArray<Diagnostic> DiagnosticsGetterDelegate(object? _obj);
        private delegate ImmutableDictionary<String, ReportDiagnostic> TreeOptionsGetterDelegate(object? _obj);

        private static readonly AnalyzerOptionsGetterDelegate AnalyzerOptionsGetterFunc;
        private static readonly DiagnosticsGetterDelegate DiagnosticsGetterFunc;
        private static readonly TreeOptionsGetterDelegate TreeOptionsGetterFunc;

        private readonly object? wrappedObject;

        static AnalyzerConfigOptionsResultWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AnalyzerOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AnalyzerOptionsGetterDelegate>(WrappedType, nameof(AnalyzerOptions));
            DiagnosticsGetterFunc = LightupHelper.CreateInstanceGetAccessor<DiagnosticsGetterDelegate>(WrappedType, nameof(Diagnostics));
            TreeOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<TreeOptionsGetterDelegate>(WrappedType, nameof(TreeOptions));
        }

        private AnalyzerConfigOptionsResultWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ImmutableDictionary<String, String> AnalyzerOptions
        {
            get => AnalyzerOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ImmutableArray<Diagnostic> Diagnostics
        {
            get => DiagnosticsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public readonly ImmutableDictionary<String, ReportDiagnostic> TreeOptions
        {
            get => TreeOptionsGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigOptionsResultWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigOptionsResultWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
