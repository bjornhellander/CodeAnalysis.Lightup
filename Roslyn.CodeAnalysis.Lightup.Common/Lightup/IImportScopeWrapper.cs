// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct IImportScopeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IImportScope";

        public static readonly Type? WrappedType;

        private delegate ImmutableArray<IAliasSymbol> AliasesDelegate(object? _obj);
        private delegate ImmutableArray<IAliasSymbol> ExternAliasesDelegate(object? _obj);
        private delegate ImmutableArray<ImportedNamespaceOrTypeWrapper> ImportsDelegate(object? _obj);
        private delegate ImmutableArray<ImportedXmlNamespaceWrapper> XmlNamespacesDelegate(object? _obj);

        private static readonly AliasesDelegate AliasesFunc;
        private static readonly ExternAliasesDelegate ExternAliasesFunc;
        private static readonly ImportsDelegate ImportsFunc;
        private static readonly XmlNamespacesDelegate XmlNamespacesFunc;

        private readonly object? wrappedObject;

        static IImportScopeWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AliasesFunc = LightupHelper.CreateGetAccessor<AliasesDelegate>(WrappedType, nameof(Aliases));
            ExternAliasesFunc = LightupHelper.CreateGetAccessor<ExternAliasesDelegate>(WrappedType, nameof(ExternAliases));
            ImportsFunc = LightupHelper.CreateGetAccessor<ImportsDelegate>(WrappedType, nameof(Imports));
            XmlNamespacesFunc = LightupHelper.CreateGetAccessor<XmlNamespacesDelegate>(WrappedType, nameof(XmlNamespaces));
        }

        private IImportScopeWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly ImmutableArray<IAliasSymbol> Aliases
            => AliasesFunc(wrappedObject);

        public readonly ImmutableArray<IAliasSymbol> ExternAliases
            => ExternAliasesFunc(wrappedObject);

        public readonly ImmutableArray<ImportedNamespaceOrTypeWrapper> Imports
            => ImportsFunc(wrappedObject);

        public readonly ImmutableArray<ImportedXmlNamespaceWrapper> XmlNamespaces
            => XmlNamespacesFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IImportScopeWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new IImportScopeWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
