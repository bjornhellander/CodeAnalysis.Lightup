// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IImportScope. Added in version 4.4.0.0.</summary>
    public readonly struct IImportScopeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IImportScope";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate ImmutableArray<IAliasSymbol> AliasesGetterDelegate(object? _obj);
        private delegate ImmutableArray<IAliasSymbol> ExternAliasesGetterDelegate(object? _obj);
        private delegate ImmutableArray<ImportedNamespaceOrTypeWrapper> ImportsGetterDelegate(object? _obj);
        private delegate ImmutableArray<ImportedXmlNamespaceWrapper> XmlNamespacesGetterDelegate(object? _obj);

        private static readonly AliasesGetterDelegate AliasesGetterFunc;
        private static readonly ExternAliasesGetterDelegate ExternAliasesGetterFunc;
        private static readonly ImportsGetterDelegate ImportsGetterFunc;
        private static readonly XmlNamespacesGetterDelegate XmlNamespacesGetterFunc;

        private readonly object? wrappedObject;

        static IImportScopeWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AliasesGetterFunc = LightupHelper.CreateInstanceGetAccessor<AliasesGetterDelegate>(WrappedType, nameof(Aliases));
            ExternAliasesGetterFunc = LightupHelper.CreateInstanceGetAccessor<ExternAliasesGetterDelegate>(WrappedType, nameof(ExternAliases));
            ImportsGetterFunc = LightupHelper.CreateInstanceGetAccessor<ImportsGetterDelegate>(WrappedType, nameof(Imports));
            XmlNamespacesGetterFunc = LightupHelper.CreateInstanceGetAccessor<XmlNamespacesGetterDelegate>(WrappedType, nameof(XmlNamespaces));
        }

        private IImportScopeWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly ImmutableArray<IAliasSymbol> Aliases
        {
            get => AliasesGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly ImmutableArray<IAliasSymbol> ExternAliases
        {
            get => ExternAliasesGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly ImmutableArray<ImportedNamespaceOrTypeWrapper> Imports
        {
            get => ImportsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly ImmutableArray<ImportedXmlNamespaceWrapper> XmlNamespaces
        {
            get => XmlNamespacesGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static IImportScopeWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new IImportScopeWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
