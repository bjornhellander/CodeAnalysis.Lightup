// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.AnalyzerConfig. Added in version 3.8.0.0.</summary>
    public readonly struct AnalyzerConfigWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfig";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate AnalyzerConfigWrapper ParseDelegate0(String text, String? pathToFile);
        private delegate AnalyzerConfigWrapper ParseDelegate1(SourceText text, String? pathToFile);

        private static readonly ParseDelegate0 ParseFunc0;
        private static readonly ParseDelegate1 ParseFunc1;

        private readonly object? wrappedObject;

        static AnalyzerConfigWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ParseFunc0 = LightupHelper.CreateStaticMethodAccessor<ParseDelegate0>(WrappedType, "Parse", "textString", "pathToFileString");
            ParseFunc1 = LightupHelper.CreateStaticMethodAccessor<ParseDelegate1>(WrappedType, "Parse", "textSourceText", "pathToFileString");
        }

        private AnalyzerConfigWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new AnalyzerConfigWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnalyzerConfigWrapper Parse(String text, String? pathToFile)
            => ParseFunc0(text, pathToFile);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static AnalyzerConfigWrapper Parse(SourceText text, String? pathToFile)
            => ParseFunc1(text, pathToFile);
    }
}
