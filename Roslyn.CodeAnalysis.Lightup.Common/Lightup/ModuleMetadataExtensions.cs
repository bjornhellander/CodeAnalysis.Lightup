// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class ModuleMetadataExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ModuleMetadata";

        public static readonly Type? WrappedType;

        private delegate ModuleMetadata CreateFromMetadataDelegate0(IntPtr metadata, Int32 size, Action onDispose);

        private static readonly CreateFromMetadataDelegate0 CreateFromMetadataFunc0;

        static ModuleMetadataExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateFromMetadataFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateFromMetadataDelegate0>(WrappedType, nameof(CreateFromMetadata));
        }

        /// <summary>Method added in version 4.4.0.0 of Roslyn.</summary>
        public static ModuleMetadata CreateFromMetadata(IntPtr metadata, Int32 size, Action onDispose)
            => CreateFromMetadataFunc0(metadata, size, onDispose);
    }
}
