// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct GeneratedSourceResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.GeneratedSourceResult";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, String> HintNameFunc;
        private static readonly Func<object?, SourceText> SourceTextFunc;
        private static readonly Func<object?, SyntaxTree> SyntaxTreeFunc;

        private readonly object? wrappedObject;

        static GeneratedSourceResultWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            HintNameFunc = LightupHelper.CreateGetAccessor<object?, String>(WrappedType, nameof(HintName));
            SourceTextFunc = LightupHelper.CreateGetAccessor<object?, SourceText>(WrappedType, nameof(SourceText));
            SyntaxTreeFunc = LightupHelper.CreateGetAccessor<object?, SyntaxTree>(WrappedType, nameof(SyntaxTree));
        }

        private GeneratedSourceResultWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly String HintName
            => HintNameFunc(wrappedObject);

        public readonly SourceText SourceText
            => SourceTextFunc(wrappedObject);

        public readonly SyntaxTree SyntaxTree
            => SyntaxTreeFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static GeneratedSourceResultWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new GeneratedSourceResultWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
