// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class INamedTypeSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.INamedTypeSymbol";

        public static readonly Type? WrappedType;

        private delegate Boolean IsFileLocalGetterDelegate(INamedTypeSymbol? _obj);
        private delegate INamedTypeSymbol? NativeIntegerUnderlyingTypeGetterDelegate(INamedTypeSymbol? _obj);
        private delegate ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(INamedTypeSymbol? _obj);

        private delegate INamedTypeSymbol ConstructDelegate0(INamedTypeSymbol? _obj, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly IsFileLocalGetterDelegate IsFileLocalGetterFunc;
        private static readonly NativeIntegerUnderlyingTypeGetterDelegate NativeIntegerUnderlyingTypeGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static INamedTypeSymbolExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsFileLocalGetterFunc = LightupHelper.CreateGetAccessor<IsFileLocalGetterDelegate>(WrappedType, nameof(IsFileLocal));
            NativeIntegerUnderlyingTypeGetterFunc = LightupHelper.CreateGetAccessor<NativeIntegerUnderlyingTypeGetterDelegate>(WrappedType, nameof(NativeIntegerUnderlyingType));
            TypeArgumentNullableAnnotationsGetterFunc = LightupHelper.CreateGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(WrappedType, nameof(TypeArgumentNullableAnnotations));

            ConstructFunc0 = LightupHelper.CreateMethodAccessor<ConstructDelegate0>(WrappedType, nameof(Construct));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static Boolean IsFileLocal(this INamedTypeSymbol _obj)
            => IsFileLocalGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol? NativeIntegerUnderlyingType(this INamedTypeSymbol _obj)
            => NativeIntegerUnderlyingTypeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotations(this INamedTypeSymbol _obj)
            => TypeArgumentNullableAnnotationsGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol Construct(this INamedTypeSymbol wrappedObject, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations)
            => ConstructFunc0(wrappedObject, typeArguments, typeArgumentNullableAnnotations);
    }
}
