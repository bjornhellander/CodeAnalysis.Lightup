// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class INamedTypeSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.INamedTypeSymbol";

        private delegate Boolean IsFileLocalGetterDelegate(INamedTypeSymbol? _obj);
        private delegate INamedTypeSymbol? NativeIntegerUnderlyingTypeGetterDelegate(INamedTypeSymbol? _obj);
        private delegate ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(INamedTypeSymbol? _obj);

        private delegate INamedTypeSymbol ConstructDelegate0(INamedTypeSymbol? _obj, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly IsFileLocalGetterDelegate IsFileLocalGetterFunc;
        private static readonly NativeIntegerUnderlyingTypeGetterDelegate NativeIntegerUnderlyingTypeGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static INamedTypeSymbolExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            IsFileLocalGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsFileLocalGetterDelegate>(wrappedType, nameof(IsFileLocal));
            NativeIntegerUnderlyingTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<NativeIntegerUnderlyingTypeGetterDelegate>(wrappedType, nameof(NativeIntegerUnderlyingType));
            TypeArgumentNullableAnnotationsGetterFunc = LightupHelper.CreateInstanceGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(wrappedType, nameof(TypeArgumentNullableAnnotations));

            ConstructFunc0 = LightupHelper.CreateInstanceMethodAccessor<ConstructDelegate0>(wrappedType, nameof(Construct));
        }

        /// <summary>Property added in version 4.4.0.0 of Roslyn.</summary>
        public static Boolean IsFileLocal(this INamedTypeSymbol _obj)
            => IsFileLocalGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static INamedTypeSymbol? NativeIntegerUnderlyingType(this INamedTypeSymbol _obj)
            => NativeIntegerUnderlyingTypeGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotations(this INamedTypeSymbol _obj)
            => TypeArgumentNullableAnnotationsGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static INamedTypeSymbol Construct(this INamedTypeSymbol _obj, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations)
            => ConstructFunc0(_obj, typeArguments, typeArgumentNullableAnnotations);
    }
}
