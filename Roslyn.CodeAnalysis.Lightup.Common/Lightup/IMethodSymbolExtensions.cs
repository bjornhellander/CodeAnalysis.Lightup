// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class IMethodSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IMethodSymbol";

        private delegate SignatureCallingConvention CallingConventionGetterDelegate(IMethodSymbol? _obj);
        private delegate Boolean IsConditionalGetterDelegate(IMethodSymbol? _obj);
        private delegate Boolean IsInitOnlyGetterDelegate(IMethodSymbol? _obj);
        private delegate Boolean IsPartialDefinitionGetterDelegate(IMethodSymbol? _obj);
        private delegate Boolean IsReadOnlyGetterDelegate(IMethodSymbol? _obj);
        private delegate MethodImplAttributes MethodImplementationFlagsGetterDelegate(IMethodSymbol? _obj);
        private delegate NullableAnnotationEx ReceiverNullableAnnotationGetterDelegate(IMethodSymbol? _obj);
        private delegate NullableAnnotationEx ReturnNullableAnnotationGetterDelegate(IMethodSymbol? _obj);
        private delegate ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(IMethodSymbol? _obj);
        private delegate ImmutableArray<INamedTypeSymbol> UnmanagedCallingConventionTypesGetterDelegate(IMethodSymbol? _obj);

        private delegate IMethodSymbol ConstructDelegate0(IMethodSymbol? _obj, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly CallingConventionGetterDelegate CallingConventionGetterFunc;
        private static readonly IsConditionalGetterDelegate IsConditionalGetterFunc;
        private static readonly IsInitOnlyGetterDelegate IsInitOnlyGetterFunc;
        private static readonly IsPartialDefinitionGetterDelegate IsPartialDefinitionGetterFunc;
        private static readonly IsReadOnlyGetterDelegate IsReadOnlyGetterFunc;
        private static readonly MethodImplementationFlagsGetterDelegate MethodImplementationFlagsGetterFunc;
        private static readonly ReceiverNullableAnnotationGetterDelegate ReceiverNullableAnnotationGetterFunc;
        private static readonly ReturnNullableAnnotationGetterDelegate ReturnNullableAnnotationGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;
        private static readonly UnmanagedCallingConventionTypesGetterDelegate UnmanagedCallingConventionTypesGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static IMethodSymbolExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CallingConventionGetterFunc = LightupHelper.CreateInstanceGetAccessor<CallingConventionGetterDelegate>(wrappedType, nameof(CallingConvention));
            IsConditionalGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsConditionalGetterDelegate>(wrappedType, nameof(IsConditional));
            IsInitOnlyGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsInitOnlyGetterDelegate>(wrappedType, nameof(IsInitOnly));
            IsPartialDefinitionGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsPartialDefinitionGetterDelegate>(wrappedType, nameof(IsPartialDefinition));
            IsReadOnlyGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsReadOnlyGetterDelegate>(wrappedType, nameof(IsReadOnly));
            MethodImplementationFlagsGetterFunc = LightupHelper.CreateInstanceGetAccessor<MethodImplementationFlagsGetterDelegate>(wrappedType, nameof(MethodImplementationFlags));
            ReceiverNullableAnnotationGetterFunc = LightupHelper.CreateInstanceGetAccessor<ReceiverNullableAnnotationGetterDelegate>(wrappedType, nameof(ReceiverNullableAnnotation));
            ReturnNullableAnnotationGetterFunc = LightupHelper.CreateInstanceGetAccessor<ReturnNullableAnnotationGetterDelegate>(wrappedType, nameof(ReturnNullableAnnotation));
            TypeArgumentNullableAnnotationsGetterFunc = LightupHelper.CreateInstanceGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(wrappedType, nameof(TypeArgumentNullableAnnotations));
            UnmanagedCallingConventionTypesGetterFunc = LightupHelper.CreateInstanceGetAccessor<UnmanagedCallingConventionTypesGetterDelegate>(wrappedType, nameof(UnmanagedCallingConventionTypes));

            ConstructFunc0 = LightupHelper.CreateInstanceMethodAccessor<ConstructDelegate0>(wrappedType, nameof(Construct));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static SignatureCallingConvention CallingConvention(this IMethodSymbol _obj)
            => CallingConventionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static Boolean IsConditional(this IMethodSymbol _obj)
            => IsConditionalGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static Boolean IsInitOnly(this IMethodSymbol _obj)
            => IsInitOnlyGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public static Boolean IsPartialDefinition(this IMethodSymbol _obj)
            => IsPartialDefinitionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static Boolean IsReadOnly(this IMethodSymbol _obj)
            => IsReadOnlyGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public static MethodImplAttributes MethodImplementationFlags(this IMethodSymbol _obj)
            => MethodImplementationFlagsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static NullableAnnotationEx ReceiverNullableAnnotation(this IMethodSymbol _obj)
            => ReceiverNullableAnnotationGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static NullableAnnotationEx ReturnNullableAnnotation(this IMethodSymbol _obj)
            => ReturnNullableAnnotationGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static ImmutableArray<NullableAnnotationEx> TypeArgumentNullableAnnotations(this IMethodSymbol _obj)
            => TypeArgumentNullableAnnotationsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static ImmutableArray<INamedTypeSymbol> UnmanagedCallingConventionTypes(this IMethodSymbol _obj)
            => UnmanagedCallingConventionTypesGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static IMethodSymbol Construct(this IMethodSymbol _obj, ImmutableArray<ITypeSymbol> typeArguments, ImmutableArray<NullableAnnotationEx> typeArgumentNullableAnnotations)
            => ConstructFunc0(_obj, typeArguments, typeArgumentNullableAnnotations);
    }
}
