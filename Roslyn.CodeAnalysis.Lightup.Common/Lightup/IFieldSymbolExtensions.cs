// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class IFieldSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IFieldSymbol";

        public static readonly Type? WrappedType;

        private delegate Int32 FixedSizeGetterDelegate(IFieldSymbol? _obj);
        private delegate Boolean IsExplicitlyNamedTupleElementGetterDelegate(IFieldSymbol? _obj);
        private delegate Boolean IsRequiredGetterDelegate(IFieldSymbol? _obj);
        private delegate NullableAnnotationEx NullableAnnotationGetterDelegate(IFieldSymbol? _obj);
        private delegate ImmutableArray<CustomModifier> RefCustomModifiersGetterDelegate(IFieldSymbol? _obj);
        private delegate RefKind RefKindGetterDelegate(IFieldSymbol? _obj);

        private static readonly FixedSizeGetterDelegate FixedSizeGetterFunc;
        private static readonly IsExplicitlyNamedTupleElementGetterDelegate IsExplicitlyNamedTupleElementGetterFunc;
        private static readonly IsRequiredGetterDelegate IsRequiredGetterFunc;
        private static readonly NullableAnnotationGetterDelegate NullableAnnotationGetterFunc;
        private static readonly RefCustomModifiersGetterDelegate RefCustomModifiersGetterFunc;
        private static readonly RefKindGetterDelegate RefKindGetterFunc;

        static IFieldSymbolExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            FixedSizeGetterFunc = LightupHelper.CreateInstanceGetAccessor<FixedSizeGetterDelegate>(WrappedType, nameof(FixedSize));
            IsExplicitlyNamedTupleElementGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsExplicitlyNamedTupleElementGetterDelegate>(WrappedType, nameof(IsExplicitlyNamedTupleElement));
            IsRequiredGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsRequiredGetterDelegate>(WrappedType, nameof(IsRequired));
            NullableAnnotationGetterFunc = LightupHelper.CreateInstanceGetAccessor<NullableAnnotationGetterDelegate>(WrappedType, nameof(NullableAnnotation));
            RefCustomModifiersGetterFunc = LightupHelper.CreateInstanceGetAccessor<RefCustomModifiersGetterDelegate>(WrappedType, nameof(RefCustomModifiers));
            RefKindGetterFunc = LightupHelper.CreateInstanceGetAccessor<RefKindGetterDelegate>(WrappedType, nameof(RefKind));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Int32 FixedSize(this IFieldSymbol _obj)
            => FixedSizeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Boolean IsExplicitlyNamedTupleElement(this IFieldSymbol _obj)
            => IsExplicitlyNamedTupleElementGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static Boolean IsRequired(this IFieldSymbol _obj)
            => IsRequiredGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static NullableAnnotationEx NullableAnnotation(this IFieldSymbol _obj)
            => NullableAnnotationGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ImmutableArray<CustomModifier> RefCustomModifiers(this IFieldSymbol _obj)
            => RefCustomModifiersGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static RefKind RefKind(this IFieldSymbol _obj)
            => RefKindGetterFunc(_obj);
    }
}
