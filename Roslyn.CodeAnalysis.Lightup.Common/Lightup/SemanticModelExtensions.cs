// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class SemanticModelExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SemanticModel";

        public static readonly Type? WrappedType;

        private delegate ImmutableArray<IImportScopeWrapper> GetImportScopesDelegate0(SemanticModel? _obj, Int32 position, CancellationToken cancellationToken);
        private delegate NullableContextEx GetNullableContextDelegate1(SemanticModel? _obj, Int32 position);

        private static readonly GetImportScopesDelegate0 GetImportScopesFunc0;
        private static readonly GetNullableContextDelegate1 GetNullableContextFunc1;

        static SemanticModelExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetImportScopesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetImportScopesDelegate0>(WrappedType, nameof(GetImportScopes));
            GetNullableContextFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetNullableContextDelegate1>(WrappedType, nameof(GetNullableContext));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ImmutableArray<IImportScopeWrapper> GetImportScopes(this SemanticModel wrappedObject, Int32 position, CancellationToken cancellationToken)
            => GetImportScopesFunc0(wrappedObject, position, cancellationToken);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static NullableContextEx GetNullableContext(this SemanticModel wrappedObject, Int32 position)
            => GetNullableContextFunc1(wrappedObject, position);
    }
}
