// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SymbolVisitor.</summary>
    public static partial class SymbolVisitorExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SymbolVisitor";

        private delegate void VisitFunctionPointerTypeDelegate0(Microsoft.CodeAnalysis.SymbolVisitor? _obj, Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper symbol);

        private static readonly VisitFunctionPointerTypeDelegate0 VisitFunctionPointerTypeFunc0;

        static SymbolVisitorExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            VisitFunctionPointerTypeFunc0 = LightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerTypeDelegate0>(wrappedType, "VisitFunctionPointerType", "symbolIFunctionPointerTypeSymbol");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerType(this Microsoft.CodeAnalysis.SymbolVisitor _obj, Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper symbol)
            => VisitFunctionPointerTypeFunc0(_obj, symbol);
    }
}
