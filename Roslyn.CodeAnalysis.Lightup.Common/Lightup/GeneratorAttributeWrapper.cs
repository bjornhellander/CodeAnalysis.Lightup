// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct GeneratorAttributeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.GeneratorAttribute";

        public static readonly Type? WrappedType;

        private delegate String[] LanguagesDelegate(Attribute? _obj);

        private static readonly LanguagesDelegate LanguagesFunc;

        private readonly Attribute? wrappedObject;

        static GeneratorAttributeWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LanguagesFunc = LightupHelper.CreateGetAccessor<LanguagesDelegate>(WrappedType, nameof(Languages));
        }

        private GeneratorAttributeWrapper(Attribute? obj)
        {
            wrappedObject = obj;
        }

        public readonly String[] Languages
            => LanguagesFunc(wrappedObject);

        public static implicit operator Attribute?(GeneratorAttributeWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static GeneratorAttributeWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<Attribute>(obj, WrappedType);
            return new GeneratorAttributeWrapper(obj2);
        }

        public Attribute? Unwrap()
            => wrappedObject;
    }
}
