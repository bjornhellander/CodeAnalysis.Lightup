// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class ISymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ISymbol";

        public static readonly Type? WrappedType;

        private delegate Int32 MetadataTokenGetterDelegate(ISymbol? _obj);

        private delegate Boolean EqualsDelegate0(ISymbol? _obj, ISymbol? other, SymbolEqualityComparerWrapper equalityComparer);

        private static readonly MetadataTokenGetterDelegate MetadataTokenGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        static ISymbolExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            MetadataTokenGetterFunc = LightupHelper.CreateInstanceGetAccessor<MetadataTokenGetterDelegate>(WrappedType, nameof(MetadataToken));

            EqualsFunc0 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Int32 MetadataToken(this ISymbol _obj)
            => MetadataTokenGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean Equals(this ISymbol wrappedObject, ISymbol? other, SymbolEqualityComparerWrapper equalityComparer)
            => EqualsFunc0(wrappedObject, other, equalityComparer);
    }
}
