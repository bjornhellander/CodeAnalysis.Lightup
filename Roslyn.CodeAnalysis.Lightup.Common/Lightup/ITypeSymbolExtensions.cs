// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class ITypeSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ITypeSymbol";

        public static readonly Type? WrappedType;

        private delegate Boolean IsNativeIntegerTypeGetterDelegate(ITypeSymbol? _obj);
        private delegate Boolean IsReadOnlyGetterDelegate(ITypeSymbol? _obj);
        private delegate Boolean IsRecordGetterDelegate(ITypeSymbol? _obj);
        private delegate NullableAnnotationEx NullableAnnotationGetterDelegate(ITypeSymbol? _obj);

        private delegate ImmutableArray<SymbolDisplayPart> ToDisplayPartsDelegate0(ITypeSymbol? _obj, NullableFlowStateEx topLevelNullability, SymbolDisplayFormat? format);
        private delegate String ToDisplayStringDelegate1(ITypeSymbol? _obj, NullableFlowStateEx topLevelNullability, SymbolDisplayFormat? format);
        private delegate ImmutableArray<SymbolDisplayPart> ToMinimalDisplayPartsDelegate2(ITypeSymbol? _obj, SemanticModel semanticModel, NullableFlowStateEx topLevelNullability, Int32 position, SymbolDisplayFormat? format);
        private delegate String ToMinimalDisplayStringDelegate3(ITypeSymbol? _obj, SemanticModel semanticModel, NullableFlowStateEx topLevelNullability, Int32 position, SymbolDisplayFormat? format);
        private delegate ITypeSymbol WithNullableAnnotationDelegate4(ITypeSymbol? _obj, NullableAnnotationEx nullableAnnotation);

        private static readonly IsNativeIntegerTypeGetterDelegate IsNativeIntegerTypeGetterFunc;
        private static readonly IsReadOnlyGetterDelegate IsReadOnlyGetterFunc;
        private static readonly IsRecordGetterDelegate IsRecordGetterFunc;
        private static readonly NullableAnnotationGetterDelegate NullableAnnotationGetterFunc;

        private static readonly ToDisplayPartsDelegate0 ToDisplayPartsFunc0;
        private static readonly ToDisplayStringDelegate1 ToDisplayStringFunc1;
        private static readonly ToMinimalDisplayPartsDelegate2 ToMinimalDisplayPartsFunc2;
        private static readonly ToMinimalDisplayStringDelegate3 ToMinimalDisplayStringFunc3;
        private static readonly WithNullableAnnotationDelegate4 WithNullableAnnotationFunc4;

        static ITypeSymbolExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsNativeIntegerTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsNativeIntegerTypeGetterDelegate>(WrappedType, nameof(IsNativeIntegerType));
            IsReadOnlyGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsReadOnlyGetterDelegate>(WrappedType, nameof(IsReadOnly));
            IsRecordGetterFunc = LightupHelper.CreateInstanceGetAccessor<IsRecordGetterDelegate>(WrappedType, nameof(IsRecord));
            NullableAnnotationGetterFunc = LightupHelper.CreateInstanceGetAccessor<NullableAnnotationGetterDelegate>(WrappedType, nameof(NullableAnnotation));

            ToDisplayPartsFunc0 = LightupHelper.CreateInstanceMethodAccessor<ToDisplayPartsDelegate0>(WrappedType, nameof(ToDisplayParts));
            ToDisplayStringFunc1 = LightupHelper.CreateInstanceMethodAccessor<ToDisplayStringDelegate1>(WrappedType, nameof(ToDisplayString));
            ToMinimalDisplayPartsFunc2 = LightupHelper.CreateInstanceMethodAccessor<ToMinimalDisplayPartsDelegate2>(WrappedType, nameof(ToMinimalDisplayParts));
            ToMinimalDisplayStringFunc3 = LightupHelper.CreateInstanceMethodAccessor<ToMinimalDisplayStringDelegate3>(WrappedType, nameof(ToMinimalDisplayString));
            WithNullableAnnotationFunc4 = LightupHelper.CreateInstanceMethodAccessor<WithNullableAnnotationDelegate4>(WrappedType, nameof(WithNullableAnnotation));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsNativeIntegerType(this ITypeSymbol _obj)
            => IsNativeIntegerTypeGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean IsReadOnly(this ITypeSymbol _obj)
            => IsReadOnlyGetterFunc(_obj);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Boolean IsRecord(this ITypeSymbol _obj)
            => IsRecordGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static NullableAnnotationEx NullableAnnotation(this ITypeSymbol _obj)
            => NullableAnnotationGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ImmutableArray<SymbolDisplayPart> ToDisplayParts(this ITypeSymbol wrappedObject, NullableFlowStateEx topLevelNullability, SymbolDisplayFormat? format)
            => ToDisplayPartsFunc0(wrappedObject, topLevelNullability, format);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static String ToDisplayString(this ITypeSymbol wrappedObject, NullableFlowStateEx topLevelNullability, SymbolDisplayFormat? format)
            => ToDisplayStringFunc1(wrappedObject, topLevelNullability, format);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ImmutableArray<SymbolDisplayPart> ToMinimalDisplayParts(this ITypeSymbol wrappedObject, SemanticModel semanticModel, NullableFlowStateEx topLevelNullability, Int32 position, SymbolDisplayFormat? format)
            => ToMinimalDisplayPartsFunc2(wrappedObject, semanticModel, topLevelNullability, position, format);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static String ToMinimalDisplayString(this ITypeSymbol wrappedObject, SemanticModel semanticModel, NullableFlowStateEx topLevelNullability, Int32 position, SymbolDisplayFormat? format)
            => ToMinimalDisplayStringFunc3(wrappedObject, semanticModel, topLevelNullability, position, format);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static ITypeSymbol WithNullableAnnotation(this ITypeSymbol wrappedObject, NullableAnnotationEx nullableAnnotation)
            => WithNullableAnnotationFunc4(wrappedObject, nullableAnnotation);
    }
}
