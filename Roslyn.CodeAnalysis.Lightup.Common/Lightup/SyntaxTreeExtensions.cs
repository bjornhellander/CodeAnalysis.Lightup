// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class SyntaxTreeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTree";

        private delegate ImmutableDictionary<String, ReportDiagnostic> DiagnosticOptionsGetterDelegate(SyntaxTree? _obj);

        private delegate IEnumerable<LineMappingWrapper> GetLineMappingsDelegate0(SyntaxTree? _obj, CancellationToken cancellationToken);
        private delegate SyntaxTree WithDiagnosticOptionsDelegate1(SyntaxTree? _obj, ImmutableDictionary<String, ReportDiagnostic> options);

        private static readonly DiagnosticOptionsGetterDelegate DiagnosticOptionsGetterFunc;

        private static readonly GetLineMappingsDelegate0 GetLineMappingsFunc0;
        private static readonly WithDiagnosticOptionsDelegate1 WithDiagnosticOptionsFunc1;

        static SyntaxTreeExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            DiagnosticOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<DiagnosticOptionsGetterDelegate>(wrappedType, nameof(DiagnosticOptions));

            GetLineMappingsFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetLineMappingsDelegate0>(wrappedType, nameof(GetLineMappings));
            WithDiagnosticOptionsFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithDiagnosticOptionsDelegate1>(wrappedType, nameof(WithDiagnosticOptions));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static ImmutableDictionary<String, ReportDiagnostic> DiagnosticOptions(this SyntaxTree _obj)
            => DiagnosticOptionsGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0 of Roslyn.</summary>
        public static IEnumerable<LineMappingWrapper> GetLineMappings(this SyntaxTree _obj, CancellationToken cancellationToken)
            => GetLineMappingsFunc0(_obj, cancellationToken);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static SyntaxTree WithDiagnosticOptions(this SyntaxTree _obj, ImmutableDictionary<String, ReportDiagnostic> options)
            => WithDiagnosticOptionsFunc1(_obj, options);
    }
}
