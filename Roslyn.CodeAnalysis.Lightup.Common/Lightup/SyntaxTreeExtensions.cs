// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxTree.</summary>
    public static partial class SyntaxTreeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTree";

        private delegate System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> DiagnosticOptionsGetterDelegate(Microsoft.CodeAnalysis.SyntaxTree? _obj);

        private delegate System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappingsDelegate0(Microsoft.CodeAnalysis.SyntaxTree? _obj, System.Threading.CancellationToken cancellationToken);
        private delegate Microsoft.CodeAnalysis.SyntaxTree WithDiagnosticOptionsDelegate1(Microsoft.CodeAnalysis.SyntaxTree? _obj, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> options);

        private static readonly DiagnosticOptionsGetterDelegate DiagnosticOptionsGetterFunc;

        private static readonly GetLineMappingsDelegate0 GetLineMappingsFunc0;
        private static readonly WithDiagnosticOptionsDelegate1 WithDiagnosticOptionsFunc1;

        static SyntaxTreeExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            DiagnosticOptionsGetterFunc = LightupHelper.CreateInstanceGetAccessor<DiagnosticOptionsGetterDelegate>(wrappedType, nameof(DiagnosticOptions));

            GetLineMappingsFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetLineMappingsDelegate0>(wrappedType, "GetLineMappings", "cancellationTokenCancellationToken");
            WithDiagnosticOptionsFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithDiagnosticOptionsDelegate1>(wrappedType, "WithDiagnosticOptions", "optionsImmutableDictionary`2");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> DiagnosticOptions(this Microsoft.CodeAnalysis.SyntaxTree _obj)
            => DiagnosticOptionsGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappings(this Microsoft.CodeAnalysis.SyntaxTree _obj, System.Threading.CancellationToken cancellationToken)
            => GetLineMappingsFunc0(_obj, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxTree WithDiagnosticOptions(this Microsoft.CodeAnalysis.SyntaxTree _obj, System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> options)
            => WithDiagnosticOptionsFunc1(_obj, options);
    }
}
