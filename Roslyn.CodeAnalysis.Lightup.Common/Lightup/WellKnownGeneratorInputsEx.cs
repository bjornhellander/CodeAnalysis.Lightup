// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.WellKnownGeneratorInputs. Added in version 4.4.0.0.</summary>
    public static class WellKnownGeneratorInputsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.WellKnownGeneratorInputs";

        private delegate String AdditionalTextsGetterDelegate();
        private delegate String AnalyzerConfigOptionsGetterDelegate();
        private delegate String CompilationGetterDelegate();
        private delegate String MetadataReferencesGetterDelegate();
        private delegate String ParseOptionsGetterDelegate();

        private static readonly AdditionalTextsGetterDelegate AdditionalTextsGetterFunc;
        private static readonly AnalyzerConfigOptionsGetterDelegate AnalyzerConfigOptionsGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly MetadataReferencesGetterDelegate MetadataReferencesGetterFunc;
        private static readonly ParseOptionsGetterDelegate ParseOptionsGetterFunc;

        static WellKnownGeneratorInputsEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AdditionalTextsGetterFunc = LightupHelper.CreateStaticReadAccessor<AdditionalTextsGetterDelegate>(wrappedType, nameof(AdditionalTexts));
            AnalyzerConfigOptionsGetterFunc = LightupHelper.CreateStaticReadAccessor<AnalyzerConfigOptionsGetterDelegate>(wrappedType, nameof(AnalyzerConfigOptions));
            CompilationGetterFunc = LightupHelper.CreateStaticReadAccessor<CompilationGetterDelegate>(wrappedType, nameof(Compilation));
            MetadataReferencesGetterFunc = LightupHelper.CreateStaticReadAccessor<MetadataReferencesGetterDelegate>(wrappedType, nameof(MetadataReferences));
            ParseOptionsGetterFunc = LightupHelper.CreateStaticReadAccessor<ParseOptionsGetterDelegate>(wrappedType, nameof(ParseOptions));
        }

        /// <summary>Field added in version 4.4.0.0.</summary>
        public static String AdditionalTexts
        {
            get => AdditionalTextsGetterFunc();
        }

        /// <summary>Field added in version 4.4.0.0.</summary>
        public static String AnalyzerConfigOptions
        {
            get => AnalyzerConfigOptionsGetterFunc();
        }

        /// <summary>Field added in version 4.4.0.0.</summary>
        public static String Compilation
        {
            get => CompilationGetterFunc();
        }

        /// <summary>Field added in version 4.4.0.0.</summary>
        public static String MetadataReferences
        {
            get => MetadataReferencesGetterFunc();
        }

        /// <summary>Field added in version 4.4.0.0.</summary>
        public static String ParseOptions
        {
            get => ParseOptionsGetterFunc();
        }
    }
}
