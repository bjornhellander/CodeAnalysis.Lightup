// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct NullabilityInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.NullabilityInfo";

        public static readonly Type? WrappedType;

        private delegate NullableAnnotationEx AnnotationGetterDelegate(object? _obj);
        private delegate NullableFlowStateEx FlowStateGetterDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, NullabilityInfoWrapper other);

        private static readonly AnnotationGetterDelegate AnnotationGetterFunc;
        private static readonly FlowStateGetterDelegate FlowStateGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly object? wrappedObject;

        static NullabilityInfoWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AnnotationGetterFunc = LightupHelper.CreateGetAccessor<AnnotationGetterDelegate>(WrappedType, nameof(Annotation));
            FlowStateGetterFunc = LightupHelper.CreateGetAccessor<FlowStateGetterDelegate>(WrappedType, nameof(FlowState));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
        }

        private NullabilityInfoWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly NullableAnnotationEx Annotation
        {
            get => AnnotationGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly NullableFlowStateEx FlowState
        {
            get => FlowStateGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static NullabilityInfoWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new NullabilityInfoWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly Boolean Equals(NullabilityInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
