// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.NullabilityInfo. Added in version 3.8.0.0.</summary>
    public readonly partial struct NullabilityInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.NullabilityInfo";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx AnnotationGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.NullableFlowStateEx FlowStateGetterDelegate(System.Object? _obj);

        private delegate System.Boolean EqualsDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.Lightup.NullabilityInfoWrapper other);

        private static readonly AnnotationGetterDelegate AnnotationGetterFunc;
        private static readonly FlowStateGetterDelegate FlowStateGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly System.Object? wrappedObject;

        static NullabilityInfoWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AnnotationGetterFunc = LightupHelper.CreateInstanceGetAccessor<AnnotationGetterDelegate>(WrappedType, nameof(Annotation));
            FlowStateGetterFunc = LightupHelper.CreateInstanceGetAccessor<FlowStateGetterDelegate>(WrappedType, nameof(FlowState));

            EqualsFunc0 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "otherNullabilityInfo");
        }

        private NullabilityInfoWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx Annotation
        {
            get => AnnotationGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.NullableFlowStateEx FlowState
        {
            get => FlowStateGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static NullabilityInfoWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new NullabilityInfoWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.Lightup.NullabilityInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
