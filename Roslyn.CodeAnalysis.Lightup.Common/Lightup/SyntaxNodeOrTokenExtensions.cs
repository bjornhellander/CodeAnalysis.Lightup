// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class SyntaxNodeOrTokenExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxNodeOrToken";

        public static readonly Type? WrappedType;

        private delegate Boolean IsIncrementallyIdenticalToDelegate0(SyntaxNodeOrToken? _obj, SyntaxNodeOrToken other);

        private static readonly IsIncrementallyIdenticalToDelegate0 IsIncrementallyIdenticalToFunc0;

        static SyntaxNodeOrTokenExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsIncrementallyIdenticalToFunc0 = LightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate0>(WrappedType, nameof(IsIncrementallyIdenticalTo));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static Boolean IsIncrementallyIdenticalTo(this SyntaxNodeOrToken wrappedObject, SyntaxNodeOrToken other)
            => IsIncrementallyIdenticalToFunc0(wrappedObject, other);
    }
}
