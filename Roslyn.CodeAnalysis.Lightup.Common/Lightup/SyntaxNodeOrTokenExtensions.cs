// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.SyntaxNodeOrToken.</summary>
    public static partial class SyntaxNodeOrTokenExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxNodeOrToken";

        private delegate System.Boolean IsIncrementallyIdenticalToDelegate0(Microsoft.CodeAnalysis.SyntaxNodeOrToken? _obj, Microsoft.CodeAnalysis.SyntaxNodeOrToken other);

        private static readonly IsIncrementallyIdenticalToDelegate0 IsIncrementallyIdenticalToFunc0;

        static SyntaxNodeOrTokenExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            IsIncrementallyIdenticalToFunc0 = LightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate0>(wrappedType, "IsIncrementallyIdenticalTo", "otherSyntaxNodeOrToken");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Boolean IsIncrementallyIdenticalTo(this Microsoft.CodeAnalysis.SyntaxNodeOrToken _obj, Microsoft.CodeAnalysis.SyntaxNodeOrToken other)
            => IsIncrementallyIdenticalToFunc0(_obj, other);
    }
}
