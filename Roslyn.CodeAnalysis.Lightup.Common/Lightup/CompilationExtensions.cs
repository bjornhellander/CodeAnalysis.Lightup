// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Compilation.</summary>
    public static partial class CompilationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Compilation";

        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbolDelegate0(Microsoft.CodeAnalysis.Compilation? _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, System.Collections.Immutable.ImmutableArray<System.String> memberNames, System.Collections.Immutable.ImmutableArray<System.Boolean> memberIsReadOnly, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> memberLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations);
        private delegate Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbolDelegate1(Microsoft.CodeAnalysis.Compilation? _obj, Microsoft.CodeAnalysis.ITypeSymbol elementType, System.Int32 rank, Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation);
        private delegate Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate2(Microsoft.CodeAnalysis.Compilation? _obj, System.String name, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.ITypeSymbol operandType);
        private delegate Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate3(Microsoft.CodeAnalysis.Compilation? _obj, System.String name, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.ITypeSymbol leftType, Microsoft.CodeAnalysis.ITypeSymbol rightType);
        private delegate Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbolDelegate4(Microsoft.CodeAnalysis.Compilation? _obj, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.RefKind returnRefKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.RefKind> parameterRefKinds, System.Reflection.Metadata.SignatureCallingConvention callingConvention, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes);
        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbolDelegate5(Microsoft.CodeAnalysis.Compilation? _obj, System.Boolean signed);
        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate6(Microsoft.CodeAnalysis.Compilation? _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, System.Collections.Immutable.ImmutableArray<System.String> elementNames, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> elementLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate7(Microsoft.CodeAnalysis.Compilation? _obj, Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, System.Collections.Immutable.ImmutableArray<System.String> elementNames, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> elementLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifferenceDelegate8(Microsoft.CodeAnalysis.Compilation? _obj, Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, System.Func<Microsoft.CodeAnalysis.ISymbol, System.Boolean> isAddedSymbol, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Threading.CancellationToken cancellationToken);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataNameDelegate9(Microsoft.CodeAnalysis.Compilation? _obj, System.String fullyQualifiedMetadataName);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferencesDelegate10(Microsoft.CodeAnalysis.Compilation? _obj, System.Threading.CancellationToken cancellationToken);
        private delegate System.Boolean SupportsRuntimeCapabilityDelegate11(Microsoft.CodeAnalysis.Compilation? _obj, Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability);

        private static readonly CreateAnonymousTypeSymbolDelegate0 CreateAnonymousTypeSymbolFunc0;
        private static readonly CreateArrayTypeSymbolDelegate1 CreateArrayTypeSymbolFunc1;
        private static readonly CreateBuiltinOperatorDelegate2 CreateBuiltinOperatorFunc2;
        private static readonly CreateBuiltinOperatorDelegate3 CreateBuiltinOperatorFunc3;
        private static readonly CreateFunctionPointerTypeSymbolDelegate4 CreateFunctionPointerTypeSymbolFunc4;
        private static readonly CreateNativeIntegerTypeSymbolDelegate5 CreateNativeIntegerTypeSymbolFunc5;
        private static readonly CreateTupleTypeSymbolDelegate6 CreateTupleTypeSymbolFunc6;
        private static readonly CreateTupleTypeSymbolDelegate7 CreateTupleTypeSymbolFunc7;
        private static readonly EmitDifferenceDelegate8 EmitDifferenceFunc8;
        private static readonly GetTypesByMetadataNameDelegate9 GetTypesByMetadataNameFunc9;
        private static readonly GetUsedAssemblyReferencesDelegate10 GetUsedAssemblyReferencesFunc10;
        private static readonly SupportsRuntimeCapabilityDelegate11 SupportsRuntimeCapabilityFunc11;

        static CompilationExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateAnonymousTypeSymbolFunc0 = LightupHelper.CreateInstanceMethodAccessor<CreateAnonymousTypeSymbolDelegate0>(wrappedType, "CreateAnonymousTypeSymbol", "memberTypesImmutableArray`1", "memberNamesImmutableArray`1", "memberIsReadOnlyImmutableArray`1", "memberLocationsImmutableArray`1", "memberNullableAnnotationsImmutableArray`1");
            CreateArrayTypeSymbolFunc1 = LightupHelper.CreateInstanceMethodAccessor<CreateArrayTypeSymbolDelegate1>(wrappedType, "CreateArrayTypeSymbol", "elementTypeITypeSymbol", "rankInt32", "elementNullableAnnotationNullableAnnotation");
            CreateBuiltinOperatorFunc2 = LightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate2>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "operandTypeITypeSymbol");
            CreateBuiltinOperatorFunc3 = LightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate3>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "leftTypeITypeSymbol", "rightTypeITypeSymbol");
            CreateFunctionPointerTypeSymbolFunc4 = LightupHelper.CreateInstanceMethodAccessor<CreateFunctionPointerTypeSymbolDelegate4>(wrappedType, "CreateFunctionPointerTypeSymbol", "returnTypeITypeSymbol", "returnRefKindRefKind", "parameterTypesImmutableArray`1", "parameterRefKindsImmutableArray`1", "callingConventionSignatureCallingConvention", "callingConventionTypesImmutableArray`1");
            CreateNativeIntegerTypeSymbolFunc5 = LightupHelper.CreateInstanceMethodAccessor<CreateNativeIntegerTypeSymbolDelegate5>(wrappedType, "CreateNativeIntegerTypeSymbol", "signedBoolean");
            CreateTupleTypeSymbolFunc6 = LightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate6>(wrappedType, "CreateTupleTypeSymbol", "elementTypesImmutableArray`1", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            CreateTupleTypeSymbolFunc7 = LightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate7>(wrappedType, "CreateTupleTypeSymbol", "underlyingTypeINamedTypeSymbol", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            EmitDifferenceFunc8 = LightupHelper.CreateInstanceMethodAccessor<EmitDifferenceDelegate8>(wrappedType, "EmitDifference", "baselineEmitBaseline", "editsIEnumerable`1", "isAddedSymbolFunc`2", "metadataStreamStream", "ilStreamStream", "pdbStreamStream", "cancellationTokenCancellationToken");
            GetTypesByMetadataNameFunc9 = LightupHelper.CreateInstanceMethodAccessor<GetTypesByMetadataNameDelegate9>(wrappedType, "GetTypesByMetadataName", "fullyQualifiedMetadataNameString");
            GetUsedAssemblyReferencesFunc10 = LightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate10>(wrappedType, "GetUsedAssemblyReferences", "cancellationTokenCancellationToken");
            SupportsRuntimeCapabilityFunc11 = LightupHelper.CreateInstanceMethodAccessor<SupportsRuntimeCapabilityDelegate11>(wrappedType, "SupportsRuntimeCapability", "capabilityRuntimeCapability");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, System.Collections.Immutable.ImmutableArray<System.String> memberNames, System.Collections.Immutable.ImmutableArray<System.Boolean> memberIsReadOnly, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> memberLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations)
            => CreateAnonymousTypeSymbolFunc0(_obj, memberTypes, memberNames, memberIsReadOnly, memberLocations, memberNullableAnnotations);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, Microsoft.CodeAnalysis.ITypeSymbol elementType, System.Int32 rank, Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation)
            => CreateArrayTypeSymbolFunc1(_obj, elementType, rank, elementNullableAnnotation);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this Microsoft.CodeAnalysis.Compilation _obj, System.String name, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.ITypeSymbol operandType)
            => CreateBuiltinOperatorFunc2(_obj, name, returnType, operandType);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this Microsoft.CodeAnalysis.Compilation _obj, System.String name, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.ITypeSymbol leftType, Microsoft.CodeAnalysis.ITypeSymbol rightType)
            => CreateBuiltinOperatorFunc3(_obj, name, returnType, leftType, rightType);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, Microsoft.CodeAnalysis.ITypeSymbol returnType, Microsoft.CodeAnalysis.RefKind returnRefKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.RefKind> parameterRefKinds, System.Reflection.Metadata.SignatureCallingConvention callingConvention, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes)
            => CreateFunctionPointerTypeSymbolFunc4(_obj, returnType, returnRefKind, parameterTypes, parameterRefKinds, callingConvention, callingConventionTypes);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, System.Boolean signed)
            => CreateNativeIntegerTypeSymbolFunc5(_obj, signed);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, System.Collections.Immutable.ImmutableArray<System.String> elementNames, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> elementLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
            => CreateTupleTypeSymbolFunc6(_obj, elementTypes, elementNames, elementLocations, elementNullableAnnotations);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this Microsoft.CodeAnalysis.Compilation _obj, Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, System.Collections.Immutable.ImmutableArray<System.String> elementNames, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location> elementLocations, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
            => CreateTupleTypeSymbolFunc7(_obj, underlyingType, elementNames, elementLocations, elementNullableAnnotations);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifference(this Microsoft.CodeAnalysis.Compilation _obj, Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, System.Func<Microsoft.CodeAnalysis.ISymbol, System.Boolean> isAddedSymbol, System.IO.Stream metadataStream, System.IO.Stream ilStream, System.IO.Stream pdbStream, System.Threading.CancellationToken cancellationToken)
            => EmitDifferenceFunc8(_obj, baseline, edits, isAddedSymbol, metadataStream, ilStream, pdbStream, cancellationToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataName(this Microsoft.CodeAnalysis.Compilation _obj, System.String fullyQualifiedMetadataName)
            => GetTypesByMetadataNameFunc9(_obj, fullyQualifiedMetadataName);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferences(this Microsoft.CodeAnalysis.Compilation _obj, System.Threading.CancellationToken cancellationToken)
            => GetUsedAssemblyReferencesFunc10(_obj, cancellationToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static System.Boolean SupportsRuntimeCapability(this Microsoft.CodeAnalysis.Compilation _obj, Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability)
            => SupportsRuntimeCapabilityFunc11(_obj, capability);
    }
}
