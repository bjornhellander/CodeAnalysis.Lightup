// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class CompilationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Compilation";

        public static readonly Type? WrappedType;

        private delegate INamedTypeSymbol CreateAnonymousTypeSymbolDelegate0(Compilation? _obj, ImmutableArray<ITypeSymbol> memberTypes, ImmutableArray<String> memberNames, ImmutableArray<Boolean> memberIsReadOnly, ImmutableArray<Location> memberLocations, ImmutableArray<NullableAnnotationEx> memberNullableAnnotations);
        private delegate IArrayTypeSymbol CreateArrayTypeSymbolDelegate1(Compilation? _obj, ITypeSymbol elementType, Int32 rank, NullableAnnotationEx elementNullableAnnotation);
        private delegate IMethodSymbol CreateBuiltinOperatorDelegate2(Compilation? _obj, String name, ITypeSymbol returnType, ITypeSymbol operandType);
        private delegate IMethodSymbol CreateBuiltinOperatorDelegate3(Compilation? _obj, String name, ITypeSymbol returnType, ITypeSymbol leftType, ITypeSymbol rightType);
        private delegate IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbolDelegate4(Compilation? _obj, ITypeSymbol returnType, RefKind returnRefKind, ImmutableArray<ITypeSymbol> parameterTypes, ImmutableArray<RefKind> parameterRefKinds, SignatureCallingConvention callingConvention, ImmutableArray<INamedTypeSymbol> callingConventionTypes);
        private delegate INamedTypeSymbol CreateNativeIntegerTypeSymbolDelegate5(Compilation? _obj, Boolean signed);
        private delegate INamedTypeSymbol CreateTupleTypeSymbolDelegate6(Compilation? _obj, ImmutableArray<ITypeSymbol> elementTypes, ImmutableArray<String> elementNames, ImmutableArray<Location> elementLocations, ImmutableArray<NullableAnnotationEx> elementNullableAnnotations);
        private delegate INamedTypeSymbol CreateTupleTypeSymbolDelegate7(Compilation? _obj, INamedTypeSymbol underlyingType, ImmutableArray<String> elementNames, ImmutableArray<Location> elementLocations, ImmutableArray<NullableAnnotationEx> elementNullableAnnotations);
        private delegate EmitDifferenceResult EmitDifferenceDelegate8(Compilation? _obj, EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Func<ISymbol, Boolean> isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, CancellationToken cancellationToken);
        private delegate ImmutableArray<INamedTypeSymbol> GetTypesByMetadataNameDelegate9(Compilation? _obj, String fullyQualifiedMetadataName);
        private delegate ImmutableArray<MetadataReference> GetUsedAssemblyReferencesDelegate10(Compilation? _obj, CancellationToken cancellationToken);
        private delegate Boolean SupportsRuntimeCapabilityDelegate11(Compilation? _obj, RuntimeCapabilityEx capability);

        private static readonly CreateAnonymousTypeSymbolDelegate0 CreateAnonymousTypeSymbolFunc0;
        private static readonly CreateArrayTypeSymbolDelegate1 CreateArrayTypeSymbolFunc1;
        private static readonly CreateBuiltinOperatorDelegate2 CreateBuiltinOperatorFunc2;
        private static readonly CreateBuiltinOperatorDelegate3 CreateBuiltinOperatorFunc3;
        private static readonly CreateFunctionPointerTypeSymbolDelegate4 CreateFunctionPointerTypeSymbolFunc4;
        private static readonly CreateNativeIntegerTypeSymbolDelegate5 CreateNativeIntegerTypeSymbolFunc5;
        private static readonly CreateTupleTypeSymbolDelegate6 CreateTupleTypeSymbolFunc6;
        private static readonly CreateTupleTypeSymbolDelegate7 CreateTupleTypeSymbolFunc7;
        private static readonly EmitDifferenceDelegate8 EmitDifferenceFunc8;
        private static readonly GetTypesByMetadataNameDelegate9 GetTypesByMetadataNameFunc9;
        private static readonly GetUsedAssemblyReferencesDelegate10 GetUsedAssemblyReferencesFunc10;
        private static readonly SupportsRuntimeCapabilityDelegate11 SupportsRuntimeCapabilityFunc11;

        static CompilationExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateAnonymousTypeSymbolFunc0 = LightupHelper.CreateMethodAccessor<CreateAnonymousTypeSymbolDelegate0>(WrappedType, nameof(CreateAnonymousTypeSymbol));
            CreateArrayTypeSymbolFunc1 = LightupHelper.CreateMethodAccessor<CreateArrayTypeSymbolDelegate1>(WrappedType, nameof(CreateArrayTypeSymbol));
            CreateBuiltinOperatorFunc2 = LightupHelper.CreateMethodAccessor<CreateBuiltinOperatorDelegate2>(WrappedType, nameof(CreateBuiltinOperator));
            CreateBuiltinOperatorFunc3 = LightupHelper.CreateMethodAccessor<CreateBuiltinOperatorDelegate3>(WrappedType, nameof(CreateBuiltinOperator));
            CreateFunctionPointerTypeSymbolFunc4 = LightupHelper.CreateMethodAccessor<CreateFunctionPointerTypeSymbolDelegate4>(WrappedType, nameof(CreateFunctionPointerTypeSymbol));
            CreateNativeIntegerTypeSymbolFunc5 = LightupHelper.CreateMethodAccessor<CreateNativeIntegerTypeSymbolDelegate5>(WrappedType, nameof(CreateNativeIntegerTypeSymbol));
            CreateTupleTypeSymbolFunc6 = LightupHelper.CreateMethodAccessor<CreateTupleTypeSymbolDelegate6>(WrappedType, nameof(CreateTupleTypeSymbol));
            CreateTupleTypeSymbolFunc7 = LightupHelper.CreateMethodAccessor<CreateTupleTypeSymbolDelegate7>(WrappedType, nameof(CreateTupleTypeSymbol));
            EmitDifferenceFunc8 = LightupHelper.CreateMethodAccessor<EmitDifferenceDelegate8>(WrappedType, nameof(EmitDifference));
            GetTypesByMetadataNameFunc9 = LightupHelper.CreateMethodAccessor<GetTypesByMetadataNameDelegate9>(WrappedType, nameof(GetTypesByMetadataName));
            GetUsedAssemblyReferencesFunc10 = LightupHelper.CreateMethodAccessor<GetUsedAssemblyReferencesDelegate10>(WrappedType, nameof(GetUsedAssemblyReferences));
            SupportsRuntimeCapabilityFunc11 = LightupHelper.CreateMethodAccessor<SupportsRuntimeCapabilityDelegate11>(WrappedType, nameof(SupportsRuntimeCapability));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol CreateAnonymousTypeSymbol(this Compilation wrappedObject, ImmutableArray<ITypeSymbol> memberTypes, ImmutableArray<String> memberNames, ImmutableArray<Boolean> memberIsReadOnly, ImmutableArray<Location> memberLocations, ImmutableArray<NullableAnnotationEx> memberNullableAnnotations)
            => CreateAnonymousTypeSymbolFunc0(wrappedObject, memberTypes, memberNames, memberIsReadOnly, memberLocations, memberNullableAnnotations);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IArrayTypeSymbol CreateArrayTypeSymbol(this Compilation wrappedObject, ITypeSymbol elementType, Int32 rank, NullableAnnotationEx elementNullableAnnotation)
            => CreateArrayTypeSymbolFunc1(wrappedObject, elementType, rank, elementNullableAnnotation);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static IMethodSymbol CreateBuiltinOperator(this Compilation wrappedObject, String name, ITypeSymbol returnType, ITypeSymbol operandType)
            => CreateBuiltinOperatorFunc2(wrappedObject, name, returnType, operandType);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static IMethodSymbol CreateBuiltinOperator(this Compilation wrappedObject, String name, ITypeSymbol returnType, ITypeSymbol leftType, ITypeSymbol rightType)
            => CreateBuiltinOperatorFunc3(wrappedObject, name, returnType, leftType, rightType);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbol(this Compilation wrappedObject, ITypeSymbol returnType, RefKind returnRefKind, ImmutableArray<ITypeSymbol> parameterTypes, ImmutableArray<RefKind> parameterRefKinds, SignatureCallingConvention callingConvention, ImmutableArray<INamedTypeSymbol> callingConventionTypes)
            => CreateFunctionPointerTypeSymbolFunc4(wrappedObject, returnType, returnRefKind, parameterTypes, parameterRefKinds, callingConvention, callingConventionTypes);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol CreateNativeIntegerTypeSymbol(this Compilation wrappedObject, Boolean signed)
            => CreateNativeIntegerTypeSymbolFunc5(wrappedObject, signed);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol CreateTupleTypeSymbol(this Compilation wrappedObject, ImmutableArray<ITypeSymbol> elementTypes, ImmutableArray<String> elementNames, ImmutableArray<Location> elementLocations, ImmutableArray<NullableAnnotationEx> elementNullableAnnotations)
            => CreateTupleTypeSymbolFunc6(wrappedObject, elementTypes, elementNames, elementLocations, elementNullableAnnotations);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static INamedTypeSymbol CreateTupleTypeSymbol(this Compilation wrappedObject, INamedTypeSymbol underlyingType, ImmutableArray<String> elementNames, ImmutableArray<Location> elementLocations, ImmutableArray<NullableAnnotationEx> elementNullableAnnotations)
            => CreateTupleTypeSymbolFunc7(wrappedObject, underlyingType, elementNames, elementLocations, elementNullableAnnotations);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static EmitDifferenceResult EmitDifference(this Compilation wrappedObject, EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Func<ISymbol, Boolean> isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, CancellationToken cancellationToken)
            => EmitDifferenceFunc8(wrappedObject, baseline, edits, isAddedSymbol, metadataStream, ilStream, pdbStream, cancellationToken);

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static ImmutableArray<INamedTypeSymbol> GetTypesByMetadataName(this Compilation wrappedObject, String fullyQualifiedMetadataName)
            => GetTypesByMetadataNameFunc9(wrappedObject, fullyQualifiedMetadataName);

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ImmutableArray<MetadataReference> GetUsedAssemblyReferences(this Compilation wrappedObject, CancellationToken cancellationToken)
            => GetUsedAssemblyReferencesFunc10(wrappedObject, cancellationToken);

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static Boolean SupportsRuntimeCapability(this Compilation wrappedObject, RuntimeCapabilityEx capability)
            => SupportsRuntimeCapabilityFunc11(wrappedObject, capability);
    }
}
