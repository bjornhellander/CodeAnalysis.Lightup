// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.4.0.0</summary>
    public readonly struct ImportedXmlNamespaceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedXmlNamespace";

        public static readonly Type? WrappedType;

        private delegate SyntaxReference? DeclaringSyntaxReferenceDelegate(object? _obj);
        private delegate String XmlNamespaceDelegate(object? _obj);

        private static readonly DeclaringSyntaxReferenceDelegate DeclaringSyntaxReferenceFunc;
        private static readonly XmlNamespaceDelegate XmlNamespaceFunc;

        private readonly object? wrappedObject;

        static ImportedXmlNamespaceWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceFunc = LightupHelper.CreateGetAccessor<DeclaringSyntaxReferenceDelegate>(WrappedType, nameof(DeclaringSyntaxReference));
            XmlNamespaceFunc = LightupHelper.CreateGetAccessor<XmlNamespaceDelegate>(WrappedType, nameof(XmlNamespace));
        }

        private ImportedXmlNamespaceWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxReference? DeclaringSyntaxReference
            => DeclaringSyntaxReferenceFunc(wrappedObject);

        public readonly String XmlNamespace
            => XmlNamespaceFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ImportedXmlNamespaceWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new ImportedXmlNamespaceWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
