// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.ImportedXmlNamespace. Added in version 4.4.0.0.</summary>
    public readonly struct ImportedXmlNamespaceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedXmlNamespace";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate SyntaxReference? DeclaringSyntaxReferenceGetterDelegate(object? _obj);
        private delegate String XmlNamespaceGetterDelegate(object? _obj);

        private static readonly DeclaringSyntaxReferenceGetterDelegate DeclaringSyntaxReferenceGetterFunc;
        private static readonly XmlNamespaceGetterDelegate XmlNamespaceGetterFunc;

        private readonly object? wrappedObject;

        static ImportedXmlNamespaceWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeclaringSyntaxReferenceGetterDelegate>(WrappedType, nameof(DeclaringSyntaxReference));
            XmlNamespaceGetterFunc = LightupHelper.CreateInstanceGetAccessor<XmlNamespaceGetterDelegate>(WrappedType, nameof(XmlNamespace));
        }

        private ImportedXmlNamespaceWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly SyntaxReference? DeclaringSyntaxReference
        {
            get => DeclaringSyntaxReferenceGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly String XmlNamespace
        {
            get => XmlNamespaceGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ImportedXmlNamespaceWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new ImportedXmlNamespaceWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
