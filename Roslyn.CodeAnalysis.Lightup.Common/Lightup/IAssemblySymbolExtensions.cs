// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IAssemblySymbol.</summary>
    public static class IAssemblySymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IAssemblySymbol";

        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetForwardedTypesDelegate0(Microsoft.CodeAnalysis.IAssemblySymbol? _obj);

        private static readonly GetForwardedTypesDelegate0 GetForwardedTypesFunc0;

        static IAssemblySymbolExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            GetForwardedTypesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetForwardedTypesDelegate0>(wrappedType, "GetForwardedTypes");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetForwardedTypes(this Microsoft.CodeAnalysis.IAssemblySymbol _obj)
            => GetForwardedTypesFunc0(_obj);
    }
}
