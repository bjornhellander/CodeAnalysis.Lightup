// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    public static class WellKnownDiagnosticTagsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.WellKnownDiagnosticTags";

        public static readonly Type? WrappedType;

        private delegate String CustomObsoleteGetterDelegate();
        private delegate String CompilationEndGetterDelegate();

        private static readonly CustomObsoleteGetterDelegate CustomObsoleteGetterFunc;
        private static readonly CompilationEndGetterDelegate CompilationEndGetterFunc;

        static WellKnownDiagnosticTagsEx()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CustomObsoleteGetterFunc = LightupHelper.CreateStaticReadAccessor<CustomObsoleteGetterDelegate>(WrappedType, nameof(CustomObsolete));
            CompilationEndGetterFunc = LightupHelper.CreateStaticReadAccessor<CompilationEndGetterDelegate>(WrappedType, nameof(CompilationEnd));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static String CustomObsolete
        {
            get => CustomObsoleteGetterFunc();
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static String CompilationEnd
        {
            get => CompilationEndGetterFunc();
        }
    }
}
