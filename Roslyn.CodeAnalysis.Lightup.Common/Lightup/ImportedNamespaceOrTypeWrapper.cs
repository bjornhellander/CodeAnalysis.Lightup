// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Threading;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.4.0.0</summary>
    public readonly struct ImportedNamespaceOrTypeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedNamespaceOrType";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, SyntaxReference?> DeclaringSyntaxReferenceFunc;
        private static readonly Func<object?, INamespaceOrTypeSymbol> NamespaceOrTypeFunc;

        private readonly object? wrappedObject;

        static ImportedNamespaceOrTypeWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceFunc = LightupHelper.CreateGetAccessor<object?, SyntaxReference?>(WrappedType, nameof(DeclaringSyntaxReference));
            NamespaceOrTypeFunc = LightupHelper.CreateGetAccessor<object?, INamespaceOrTypeSymbol>(WrappedType, nameof(NamespaceOrType));
        }

        private ImportedNamespaceOrTypeWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly SyntaxReference? DeclaringSyntaxReference
            => DeclaringSyntaxReferenceFunc(wrappedObject);

        public readonly INamespaceOrTypeSymbol NamespaceOrType
            => NamespaceOrTypeFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ImportedNamespaceOrTypeWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new ImportedNamespaceOrTypeWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
