// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.ImportedNamespaceOrType. Added in version 4.4.0.0.</summary>
    public readonly partial struct ImportedNamespaceOrTypeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedNamespaceOrType";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReferenceGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.INamespaceOrTypeSymbol NamespaceOrTypeGetterDelegate(System.Object? _obj);

        private static readonly DeclaringSyntaxReferenceGetterDelegate DeclaringSyntaxReferenceGetterFunc;
        private static readonly NamespaceOrTypeGetterDelegate NamespaceOrTypeGetterFunc;

        private readonly System.Object? wrappedObject;

        static ImportedNamespaceOrTypeWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceGetterFunc = LightupHelper.CreateInstanceGetAccessor<DeclaringSyntaxReferenceGetterDelegate>(WrappedType, nameof(DeclaringSyntaxReference));
            NamespaceOrTypeGetterFunc = LightupHelper.CreateInstanceGetAccessor<NamespaceOrTypeGetterDelegate>(WrappedType, nameof(NamespaceOrType));
        }

        private ImportedNamespaceOrTypeWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReference
        {
            get => DeclaringSyntaxReferenceGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.INamespaceOrTypeSymbol NamespaceOrType
        {
            get => NamespaceOrTypeGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ImportedNamespaceOrTypeWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new ImportedNamespaceOrTypeWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;
    }
}
