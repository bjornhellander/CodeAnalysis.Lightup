// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CaseInsensitiveComparison.</summary>
    public static partial class CaseInsensitiveComparisonEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CaseInsensitiveComparison";

        private delegate System.Int32 CompareDelegate0(System.ReadOnlySpan<System.Char> left, System.ReadOnlySpan<System.Char> right);
        private delegate System.Boolean EqualsDelegate1(System.ReadOnlySpan<System.Char> left, System.ReadOnlySpan<System.Char> right);

        private static readonly CompareDelegate0 CompareFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        static CaseInsensitiveComparisonEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CompareFunc0 = LightupHelper.CreateStaticMethodAccessor<CompareDelegate0>(wrappedType, "Compare", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
            EqualsFunc1 = LightupHelper.CreateStaticMethodAccessor<EqualsDelegate1>(wrappedType, "Equals", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Int32 Compare(System.ReadOnlySpan<System.Char> left, System.ReadOnlySpan<System.Char> right)
            => CompareFunc0(left, right);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static System.Boolean Equals(System.ReadOnlySpan<System.Char> left, System.ReadOnlySpan<System.Char> right)
            => EqualsFunc1(left, right);
    }
}
