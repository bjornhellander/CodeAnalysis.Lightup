// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CaseInsensitiveComparison.</summary>
    public static class CaseInsensitiveComparisonEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CaseInsensitiveComparison";

        private delegate Int32 CompareDelegate0(ReadOnlySpan<Char> left, ReadOnlySpan<Char> right);
        private delegate Boolean EqualsDelegate1(ReadOnlySpan<Char> left, ReadOnlySpan<Char> right);

        private static readonly CompareDelegate0 CompareFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        static CaseInsensitiveComparisonEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CompareFunc0 = LightupHelper.CreateStaticMethodAccessor<CompareDelegate0>(wrappedType, "Compare", "ReadOnlySpan`1", "ReadOnlySpan`1");
            EqualsFunc1 = LightupHelper.CreateStaticMethodAccessor<EqualsDelegate1>(wrappedType, "Equals", "ReadOnlySpan`1", "ReadOnlySpan`1");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Int32 Compare(ReadOnlySpan<Char> left, ReadOnlySpan<Char> right)
            => CompareFunc0(left, right);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Boolean Equals(ReadOnlySpan<Char> left, ReadOnlySpan<Char> right)
            => EqualsFunc1(left, right);
    }
}
