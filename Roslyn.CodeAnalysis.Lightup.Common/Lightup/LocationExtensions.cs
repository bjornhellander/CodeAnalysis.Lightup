// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Location.</summary>
    public static partial class LocationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Location";

        private delegate Microsoft.CodeAnalysis.Location CreateDelegate0(System.String filePath, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Text.LinePositionSpan lineSpan, System.String mappedFilePath, Microsoft.CodeAnalysis.Text.LinePositionSpan mappedLineSpan);

        private static readonly CreateDelegate0 CreateFunc0;

        static LocationExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            CreateFunc0 = CommonLightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(wrappedType, "Create", "filePathString", "textSpanTextSpan", "lineSpanLinePositionSpan", "mappedFilePathString", "mappedLineSpanLinePositionSpan");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Location Create(System.String filePath, Microsoft.CodeAnalysis.Text.TextSpan textSpan, Microsoft.CodeAnalysis.Text.LinePositionSpan lineSpan, System.String mappedFilePath, Microsoft.CodeAnalysis.Text.LinePositionSpan mappedLineSpan)
            => CreateFunc0(filePath, textSpan, lineSpan, mappedFilePath, mappedLineSpan);
    }
}
