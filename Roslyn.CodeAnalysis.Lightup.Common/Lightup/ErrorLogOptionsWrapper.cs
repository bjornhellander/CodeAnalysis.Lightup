// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct ErrorLogOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ErrorLogOptions";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, String> PathFunc;
        private static readonly Func<object?, SarifVersionEx> SarifVersionFunc;

        private readonly object? wrappedObject;

        static ErrorLogOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PathFunc = LightupHelper.CreateGetAccessor<object?, String>(WrappedType, nameof(Path));
            SarifVersionFunc = LightupHelper.CreateGetAccessor<object?, SarifVersionEx>(WrappedType, nameof(SarifVersion));
        }

        private ErrorLogOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly String Path
            => PathFunc(wrappedObject);

        public readonly SarifVersionEx SarifVersion
            => SarifVersionFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ErrorLogOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new ErrorLogOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
