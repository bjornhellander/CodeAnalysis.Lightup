// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.ErrorLogOptions. Added in version 3.8.0.0.</summary>
    public readonly partial struct ErrorLogOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ErrorLogOptions";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate ErrorLogOptionsWrapper ConstructorDelegate0(System.String path, Microsoft.CodeAnalysis.Lightup.SarifVersionEx sarifVersion);

        private delegate System.String PathGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.SarifVersionEx SarifVersionGetterDelegate(System.Object? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly PathGetterDelegate PathGetterFunc;
        private static readonly SarifVersionGetterDelegate SarifVersionGetterFunc;

        private readonly System.Object? wrappedObject;

        static ErrorLogOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = LightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "pathString", "sarifVersionSarifVersion");

            PathGetterFunc = LightupHelper.CreateInstanceGetAccessor<PathGetterDelegate>(WrappedType, nameof(Path));
            SarifVersionGetterFunc = LightupHelper.CreateInstanceGetAccessor<SarifVersionGetterDelegate>(WrappedType, nameof(SarifVersion));
        }

        private ErrorLogOptionsWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 3.8.0.0.</summary>
        public static ErrorLogOptionsWrapper Create(System.String path, Microsoft.CodeAnalysis.Lightup.SarifVersionEx sarifVersion)
            => ConstructorFunc0(path, sarifVersion);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.String Path
        {
            get => PathGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.SarifVersionEx SarifVersion
        {
            get => SarifVersionGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ErrorLogOptionsWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new ErrorLogOptionsWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;
    }
}
