// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct ErrorLogOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ErrorLogOptions";

        public static readonly Type? WrappedType;

        private delegate String PathGetterDelegate(object? _obj);
        private delegate SarifVersionEx SarifVersionGetterDelegate(object? _obj);

        private static readonly PathGetterDelegate PathGetterFunc;
        private static readonly SarifVersionGetterDelegate SarifVersionGetterFunc;

        private readonly object? wrappedObject;

        static ErrorLogOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PathGetterFunc = LightupHelper.CreateGetAccessor<PathGetterDelegate>(WrappedType, nameof(Path));
            SarifVersionGetterFunc = LightupHelper.CreateGetAccessor<SarifVersionGetterDelegate>(WrappedType, nameof(SarifVersion));
        }

        private ErrorLogOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly String Path
        {
            get => PathGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly SarifVersionEx SarifVersion
        {
            get => SarifVersionGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ErrorLogOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new ErrorLogOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
