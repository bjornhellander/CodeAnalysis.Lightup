// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct SyntaxContextReceiverCreatorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxContextReceiverCreator";

        public static readonly Type? WrappedType;

        private static readonly Func<MulticastDelegate?, AsyncCallback?, Object?, IAsyncResult> BeginInvokeFunc0;
        private static readonly Func<MulticastDelegate?, IAsyncResult?, ISyntaxContextReceiverWrapper> EndInvokeFunc1;
        private static readonly Func<MulticastDelegate?, ISyntaxContextReceiverWrapper> InvokeFunc2;

        private readonly MulticastDelegate? wrappedObject;

        static SyntaxContextReceiverCreatorWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            BeginInvokeFunc0 = LightupHelper.CreateMethodAccessor<MulticastDelegate?, AsyncCallback?, Object?, IAsyncResult>(WrappedType, nameof(BeginInvoke));
            EndInvokeFunc1 = LightupHelper.CreateMethodAccessor<MulticastDelegate?, IAsyncResult?, ISyntaxContextReceiverWrapper>(WrappedType, nameof(EndInvoke));
            InvokeFunc2 = LightupHelper.CreateMethodAccessor<MulticastDelegate?, ISyntaxContextReceiverWrapper>(WrappedType, nameof(Invoke));
        }

        private SyntaxContextReceiverCreatorWrapper(MulticastDelegate? obj)
        {
            wrappedObject = obj;
        }

        public static implicit operator MulticastDelegate?(SyntaxContextReceiverCreatorWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SyntaxContextReceiverCreatorWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<MulticastDelegate>(obj, WrappedType);
            return new SyntaxContextReceiverCreatorWrapper(obj2);
        }

        public MulticastDelegate? Unwrap()
            => wrappedObject;

        public readonly IAsyncResult BeginInvoke(AsyncCallback? callback, Object? @object)
            => BeginInvokeFunc0(wrappedObject, callback, @object);

        public readonly ISyntaxContextReceiverWrapper EndInvoke(IAsyncResult? result)
            => EndInvokeFunc1(wrappedObject, result);

        public readonly ISyntaxContextReceiverWrapper Invoke()
            => InvokeFunc2(wrappedObject);
    }
}
