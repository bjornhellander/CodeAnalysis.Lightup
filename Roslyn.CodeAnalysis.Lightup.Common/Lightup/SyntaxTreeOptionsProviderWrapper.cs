// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct SyntaxTreeOptionsProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider";

        public static readonly Type? WrappedType;

        private delegate GeneratedKindEx IsGeneratedDelegate0(object? _obj, SyntaxTree tree, CancellationToken cancellationToken);
        private delegate Boolean TryGetDiagnosticValueDelegate1(object? _obj, SyntaxTree tree, String diagnosticId, CancellationToken cancellationToken, out ReportDiagnostic severity);
        private delegate Boolean TryGetGlobalDiagnosticValueDelegate2(object? _obj, String diagnosticId, CancellationToken cancellationToken, out ReportDiagnostic severity);

        private static readonly IsGeneratedDelegate0 IsGeneratedFunc0;
        private static readonly TryGetDiagnosticValueDelegate1 TryGetDiagnosticValueFunc1;
        private static readonly TryGetGlobalDiagnosticValueDelegate2 TryGetGlobalDiagnosticValueFunc2;

        private readonly object? wrappedObject;

        static SyntaxTreeOptionsProviderWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsGeneratedFunc0 = LightupHelper.CreateMethodAccessor<IsGeneratedDelegate0>(WrappedType, nameof(IsGenerated));
            TryGetDiagnosticValueFunc1 = LightupHelper.CreateMethodAccessor<TryGetDiagnosticValueDelegate1>(WrappedType, nameof(TryGetDiagnosticValue));
            TryGetGlobalDiagnosticValueFunc2 = LightupHelper.CreateMethodAccessor<TryGetGlobalDiagnosticValueDelegate2>(WrappedType, nameof(TryGetGlobalDiagnosticValue));
        }

        private SyntaxTreeOptionsProviderWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SyntaxTreeOptionsProviderWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SyntaxTreeOptionsProviderWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly GeneratedKindEx IsGenerated(SyntaxTree tree, CancellationToken cancellationToken)
            => IsGeneratedFunc0(wrappedObject, tree, cancellationToken);

        public readonly Boolean TryGetDiagnosticValue(SyntaxTree tree, String diagnosticId, CancellationToken cancellationToken, out ReportDiagnostic severity)
            => TryGetDiagnosticValueFunc1(wrappedObject, tree, diagnosticId, cancellationToken, out severity);

        public readonly Boolean TryGetGlobalDiagnosticValue(String diagnosticId, CancellationToken cancellationToken, out ReportDiagnostic severity)
            => TryGetGlobalDiagnosticValueFunc2(wrappedObject, diagnosticId, cancellationToken, out severity);
    }
}
