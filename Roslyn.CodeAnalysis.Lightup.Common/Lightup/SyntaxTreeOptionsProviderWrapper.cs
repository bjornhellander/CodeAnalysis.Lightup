// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider. Added in version 3.8.0.0.</summary>
    public readonly struct SyntaxTreeOptionsProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Lightup.GeneratedKindEx IsGeneratedDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.SyntaxTree tree, System.Threading.CancellationToken cancellationToken);
        private delegate System.Boolean TryGetDiagnosticValueDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.SyntaxTree tree, System.String diagnosticId, System.Threading.CancellationToken cancellationToken, out Microsoft.CodeAnalysis.ReportDiagnostic severity);
        private delegate System.Boolean TryGetGlobalDiagnosticValueDelegate2(System.Object? _obj, System.String diagnosticId, System.Threading.CancellationToken cancellationToken, out Microsoft.CodeAnalysis.ReportDiagnostic severity);

        private static readonly IsGeneratedDelegate0 IsGeneratedFunc0;
        private static readonly TryGetDiagnosticValueDelegate1 TryGetDiagnosticValueFunc1;
        private static readonly TryGetGlobalDiagnosticValueDelegate2 TryGetGlobalDiagnosticValueFunc2;

        private readonly System.Object? wrappedObject;

        static SyntaxTreeOptionsProviderWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            IsGeneratedFunc0 = LightupHelper.CreateInstanceMethodAccessor<IsGeneratedDelegate0>(WrappedType, "IsGenerated", "treeSyntaxTree", "cancellationTokenCancellationToken");
            TryGetDiagnosticValueFunc1 = LightupHelper.CreateInstanceMethodAccessor<TryGetDiagnosticValueDelegate1>(WrappedType, "TryGetDiagnosticValue", "treeSyntaxTree", "diagnosticIdString", "cancellationTokenCancellationToken", "severityReportDiagnostic&");
            TryGetGlobalDiagnosticValueFunc2 = LightupHelper.CreateInstanceMethodAccessor<TryGetGlobalDiagnosticValueDelegate2>(WrappedType, "TryGetGlobalDiagnosticValue", "diagnosticIdString", "cancellationTokenCancellationToken", "severityReportDiagnostic&");
        }

        private SyntaxTreeOptionsProviderWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SyntaxTreeOptionsProviderWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new SyntaxTreeOptionsProviderWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.GeneratedKindEx IsGenerated(Microsoft.CodeAnalysis.SyntaxTree tree, System.Threading.CancellationToken cancellationToken)
            => IsGeneratedFunc0(wrappedObject, tree, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean TryGetDiagnosticValue(Microsoft.CodeAnalysis.SyntaxTree tree, System.String diagnosticId, System.Threading.CancellationToken cancellationToken, out Microsoft.CodeAnalysis.ReportDiagnostic severity)
            => TryGetDiagnosticValueFunc1(wrappedObject, tree, diagnosticId, cancellationToken, out severity);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean TryGetGlobalDiagnosticValue(System.String diagnosticId, System.Threading.CancellationToken cancellationToken, out Microsoft.CodeAnalysis.ReportDiagnostic severity)
            => TryGetGlobalDiagnosticValueFunc2(wrappedObject, diagnosticId, cancellationToken, out severity);
    }
}
