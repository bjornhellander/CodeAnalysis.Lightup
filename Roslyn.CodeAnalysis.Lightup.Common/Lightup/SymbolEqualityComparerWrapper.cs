// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version 3.8.0.0</summary>
    public readonly struct SymbolEqualityComparerWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SymbolEqualityComparer";

        public static readonly Type? WrappedType;

        private delegate Boolean EqualsDelegate0(object? _obj, ISymbol? x, ISymbol? y);
        private delegate Int32 GetHashCodeDelegate1(object? _obj, ISymbol? obj);

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly GetHashCodeDelegate1 GetHashCodeFunc1;

        private readonly object? wrappedObject;

        static SymbolEqualityComparerWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
            GetHashCodeFunc1 = LightupHelper.CreateMethodAccessor<GetHashCodeDelegate1>(WrappedType, nameof(GetHashCode));
        }

        private SymbolEqualityComparerWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SymbolEqualityComparerWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SymbolEqualityComparerWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly Boolean Equals(ISymbol? x, ISymbol? y)
            => EqualsFunc0(wrappedObject, x, y);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public readonly Int32 GetHashCode(ISymbol? obj)
            => GetHashCodeFunc1(wrappedObject, obj);
    }
}
