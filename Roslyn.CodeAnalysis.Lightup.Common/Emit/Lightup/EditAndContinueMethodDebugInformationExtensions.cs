// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation.</summary>
    public static class EditAndContinueMethodDebugInformationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation";

        private delegate Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation CreateDelegate0(System.Collections.Immutable.ImmutableArray<System.Byte> compressedSlotMap, System.Collections.Immutable.ImmutableArray<System.Byte> compressedLambdaMap, System.Collections.Immutable.ImmutableArray<System.Byte> compressedStateMachineStateMap);

        private static readonly CreateDelegate0 CreateFunc0;

        static EditAndContinueMethodDebugInformationExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CreateFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(wrappedType, "Create", "compressedSlotMapImmutableArray`1", "compressedLambdaMapImmutableArray`1", "compressedStateMachineStateMapImmutableArray`1");
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation Create(System.Collections.Immutable.ImmutableArray<System.Byte> compressedSlotMap, System.Collections.Immutable.ImmutableArray<System.Byte> compressedLambdaMap, System.Collections.Immutable.ImmutableArray<System.Byte> compressedStateMachineStateMap)
            => CreateFunc0(compressedSlotMap, compressedLambdaMap, compressedStateMachineStateMap);
    }
}
