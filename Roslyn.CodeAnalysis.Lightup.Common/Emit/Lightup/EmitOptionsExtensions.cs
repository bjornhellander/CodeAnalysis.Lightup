// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Operations.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    public static class EmitOptionsExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.EmitOptions";

        private delegate Encoding? DefaultSourceFileEncodingGetterDelegate(EmitOptions? _obj);
        private delegate Encoding? FallbackSourceFileEncodingGetterDelegate(EmitOptions? _obj);

        private delegate EmitOptions WithDefaultSourceFileEncodingDelegate0(EmitOptions? _obj, Encoding? defaultSourceFileEncoding);
        private delegate EmitOptions WithFallbackSourceFileEncodingDelegate1(EmitOptions? _obj, Encoding? fallbackSourceFileEncoding);

        private static readonly DefaultSourceFileEncodingGetterDelegate DefaultSourceFileEncodingGetterFunc;
        private static readonly FallbackSourceFileEncodingGetterDelegate FallbackSourceFileEncodingGetterFunc;

        private static readonly WithDefaultSourceFileEncodingDelegate0 WithDefaultSourceFileEncodingFunc0;
        private static readonly WithFallbackSourceFileEncodingDelegate1 WithFallbackSourceFileEncodingFunc1;

        static EmitOptionsExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            DefaultSourceFileEncodingGetterFunc = LightupHelper.CreateInstanceGetAccessor<DefaultSourceFileEncodingGetterDelegate>(wrappedType, nameof(DefaultSourceFileEncoding));
            FallbackSourceFileEncodingGetterFunc = LightupHelper.CreateInstanceGetAccessor<FallbackSourceFileEncodingGetterDelegate>(wrappedType, nameof(FallbackSourceFileEncoding));

            WithDefaultSourceFileEncodingFunc0 = LightupHelper.CreateInstanceMethodAccessor<WithDefaultSourceFileEncodingDelegate0>(wrappedType, nameof(WithDefaultSourceFileEncoding));
            WithFallbackSourceFileEncodingFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithFallbackSourceFileEncodingDelegate1>(wrappedType, nameof(WithFallbackSourceFileEncoding));
        }

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static Encoding? DefaultSourceFileEncoding(this EmitOptions _obj)
            => DefaultSourceFileEncodingGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0 of Roslyn.</summary>
        public static Encoding? FallbackSourceFileEncoding(this EmitOptions _obj)
            => FallbackSourceFileEncodingGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static EmitOptions WithDefaultSourceFileEncoding(this EmitOptions _obj, Encoding? defaultSourceFileEncoding)
            => WithDefaultSourceFileEncodingFunc0(_obj, defaultSourceFileEncoding);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static EmitOptions WithFallbackSourceFileEncoding(this EmitOptions _obj, Encoding? fallbackSourceFileEncoding)
            => WithFallbackSourceFileEncodingFunc1(_obj, fallbackSourceFileEncoding);
    }
}
