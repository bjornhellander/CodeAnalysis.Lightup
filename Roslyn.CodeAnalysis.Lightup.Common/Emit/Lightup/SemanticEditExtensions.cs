// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Emit;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class SemanticEditExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.SemanticEdit";

        public static readonly Type? WrappedType;

        private delegate MethodInstrumentationWrapper InstrumentationGetterDelegate(SemanticEdit? _obj);

        private static readonly InstrumentationGetterDelegate InstrumentationGetterFunc;

        static SemanticEditExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            InstrumentationGetterFunc = LightupHelper.CreateGetAccessor<InstrumentationGetterDelegate>(WrappedType, nameof(Instrumentation));
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static MethodInstrumentationWrapper Instrumentation(this SemanticEdit _obj)
            => InstrumentationGetterFunc(_obj);
    }
}
