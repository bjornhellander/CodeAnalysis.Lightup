// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 4.8.0.0</summary>
    public readonly struct LoadTextOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.LoadTextOptions";

        public static readonly Type? WrappedType;

        private delegate SourceHashAlgorithm ChecksumAlgorithmGetterDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, LoadTextOptionsWrapper other);

        private static readonly ChecksumAlgorithmGetterDelegate ChecksumAlgorithmGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly object? wrappedObject;

        static LoadTextOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ChecksumAlgorithmGetterFunc = LightupHelper.CreateInstanceGetAccessor<ChecksumAlgorithmGetterDelegate>(WrappedType, nameof(ChecksumAlgorithm));

            EqualsFunc0 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
        }

        private LoadTextOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public readonly SourceHashAlgorithm ChecksumAlgorithm
        {
            get => ChecksumAlgorithmGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LoadTextOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new LoadTextOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public readonly Boolean Equals(LoadTextOptionsWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
