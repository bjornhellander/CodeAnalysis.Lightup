// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in version 4.0.0.0 of Roslyn.</summary>
    public readonly struct SourceGeneratedDocumentWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SourceGeneratedDocument";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate String HintNameGetterDelegate(Document? _obj);

        private static readonly HintNameGetterDelegate HintNameGetterFunc;

        private readonly Document? wrappedObject;

        static SourceGeneratedDocumentWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            HintNameGetterFunc = LightupHelper.CreateInstanceGetAccessor<HintNameGetterDelegate>(WrappedType, nameof(HintName));
        }

        private SourceGeneratedDocumentWrapper(Document? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0 of Roslyn.</summary>
        public readonly String HintName
        {
            get => HintNameGetterFunc(wrappedObject);
        }

        public static implicit operator Document?(SourceGeneratedDocumentWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SourceGeneratedDocumentWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<Document>(obj, WrappedType);
            return new SourceGeneratedDocumentWrapper(obj2);
        }

        public Document? Unwrap()
            => wrappedObject;
    }
}
