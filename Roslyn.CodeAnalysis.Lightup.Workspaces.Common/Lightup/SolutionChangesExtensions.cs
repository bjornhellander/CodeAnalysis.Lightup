// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.SolutionChanges.</summary>
    public static partial class SolutionChangesExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SolutionChanges";

        private delegate System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> GetAddedAnalyzerReferencesDelegate0(Microsoft.CodeAnalysis.SolutionChanges? _obj);
        private delegate System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> GetRemovedAnalyzerReferencesDelegate1(Microsoft.CodeAnalysis.SolutionChanges? _obj);

        private static readonly GetAddedAnalyzerReferencesDelegate0 GetAddedAnalyzerReferencesFunc0;
        private static readonly GetRemovedAnalyzerReferencesDelegate1 GetRemovedAnalyzerReferencesFunc1;

        static SolutionChangesExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            GetAddedAnalyzerReferencesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetAddedAnalyzerReferencesDelegate0>(wrappedType, "GetAddedAnalyzerReferences");
            GetRemovedAnalyzerReferencesFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetRemovedAnalyzerReferencesDelegate1>(wrappedType, "GetRemovedAnalyzerReferences");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> GetAddedAnalyzerReferences(this Microsoft.CodeAnalysis.SolutionChanges _obj)
            => GetAddedAnalyzerReferencesFunc0(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> GetRemovedAnalyzerReferences(this Microsoft.CodeAnalysis.SolutionChanges _obj)
            => GetRemovedAnalyzerReferencesFunc1(_obj);
    }
}
