// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class SolutionChangesExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SolutionChanges";

        public static readonly Type? WrappedType;

        private delegate IEnumerable<AnalyzerReference> GetAddedAnalyzerReferencesDelegate0(SolutionChanges? _obj);
        private delegate IEnumerable<AnalyzerReference> GetRemovedAnalyzerReferencesDelegate1(SolutionChanges? _obj);

        private static readonly GetAddedAnalyzerReferencesDelegate0 GetAddedAnalyzerReferencesFunc0;
        private static readonly GetRemovedAnalyzerReferencesDelegate1 GetRemovedAnalyzerReferencesFunc1;

        static SolutionChangesExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetAddedAnalyzerReferencesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetAddedAnalyzerReferencesDelegate0>(WrappedType, nameof(GetAddedAnalyzerReferences));
            GetRemovedAnalyzerReferencesFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetRemovedAnalyzerReferencesDelegate1>(WrappedType, nameof(GetRemovedAnalyzerReferences));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IEnumerable<AnalyzerReference> GetAddedAnalyzerReferences(this SolutionChanges wrappedObject)
            => GetAddedAnalyzerReferencesFunc0(wrappedObject);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IEnumerable<AnalyzerReference> GetRemovedAnalyzerReferences(this SolutionChanges wrappedObject)
            => GetRemovedAnalyzerReferencesFunc1(wrappedObject);
    }
}
