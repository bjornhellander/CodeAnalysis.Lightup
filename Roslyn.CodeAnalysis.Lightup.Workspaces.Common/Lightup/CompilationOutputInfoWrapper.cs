// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CompilationOutputInfo. Added in version 3.8.0.0.</summary>
    public readonly struct CompilationOutputInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOutputInfo";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate String? AssemblyPathGetterDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, CompilationOutputInfoWrapper other);
        private delegate CompilationOutputInfoWrapper WithAssemblyPathDelegate1(object? _obj, String? path);

        private static readonly AssemblyPathGetterDelegate AssemblyPathGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly WithAssemblyPathDelegate1 WithAssemblyPathFunc1;

        private readonly object? wrappedObject;

        static CompilationOutputInfoWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AssemblyPathGetterFunc = LightupHelper.CreateInstanceGetAccessor<AssemblyPathGetterDelegate>(WrappedType, nameof(AssemblyPath));

            EqualsFunc0 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
            WithAssemblyPathFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithAssemblyPathDelegate1>(WrappedType, nameof(WithAssemblyPath));
        }

        private CompilationOutputInfoWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly String? AssemblyPath
        {
            get => AssemblyPathGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static CompilationOutputInfoWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new CompilationOutputInfoWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Boolean Equals(CompilationOutputInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly CompilationOutputInfoWrapper WithAssemblyPath(String? path)
            => WithAssemblyPathFunc1(wrappedObject, path);
    }
}
