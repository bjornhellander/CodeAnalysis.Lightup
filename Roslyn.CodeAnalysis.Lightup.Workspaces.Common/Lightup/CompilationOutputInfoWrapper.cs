// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Struct added in Roslyn version 3.8.0.0</summary>
    public readonly struct CompilationOutputInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOutputInfo";

        public static readonly Type? WrappedType;

        private delegate String? AssemblyPathGetterDelegate(object? _obj);

        private delegate Boolean EqualsDelegate0(object? _obj, CompilationOutputInfoWrapper other);
        private delegate CompilationOutputInfoWrapper WithAssemblyPathDelegate1(object? _obj, String? path);

        private static readonly AssemblyPathGetterDelegate AssemblyPathGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly WithAssemblyPathDelegate1 WithAssemblyPathFunc1;

        private readonly object? wrappedObject;

        static CompilationOutputInfoWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AssemblyPathGetterFunc = LightupHelper.CreateGetAccessor<AssemblyPathGetterDelegate>(WrappedType, nameof(AssemblyPath));

            EqualsFunc0 = LightupHelper.CreateMethodAccessor<EqualsDelegate0>(WrappedType, nameof(Equals));
            WithAssemblyPathFunc1 = LightupHelper.CreateMethodAccessor<WithAssemblyPathDelegate1>(WrappedType, nameof(WithAssemblyPath));
        }

        private CompilationOutputInfoWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly String? AssemblyPath
        {
            get => AssemblyPathGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static CompilationOutputInfoWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new CompilationOutputInfoWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly Boolean Equals(CompilationOutputInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);

        public readonly CompilationOutputInfoWrapper WithAssemblyPath(String? path)
            => WithAssemblyPathFunc1(wrappedObject, path);
    }
}
