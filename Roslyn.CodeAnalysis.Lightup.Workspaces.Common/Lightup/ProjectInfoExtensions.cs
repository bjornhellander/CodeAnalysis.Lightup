// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.ProjectInfo.</summary>
    public static class ProjectInfoExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ProjectInfo";

        private delegate IReadOnlyList<DocumentInfo> AnalyzerConfigDocumentsGetterDelegate(ProjectInfo? _obj);
        private delegate CompilationOutputInfoWrapper CompilationOutputInfoGetterDelegate(ProjectInfo? _obj);

        private delegate ProjectInfo WithAnalyzerConfigDocumentsDelegate0(ProjectInfo? _obj, IEnumerable<DocumentInfo>? analyzerConfigDocuments);
        private delegate ProjectInfo WithCompilationOutputInfoDelegate1(ProjectInfo? _obj, in CompilationOutputInfoWrapper info);
        private delegate ProjectInfo WithDefaultNamespaceDelegate2(ProjectInfo? _obj, String? defaultNamespace);

        private static readonly AnalyzerConfigDocumentsGetterDelegate AnalyzerConfigDocumentsGetterFunc;
        private static readonly CompilationOutputInfoGetterDelegate CompilationOutputInfoGetterFunc;

        private static readonly WithAnalyzerConfigDocumentsDelegate0 WithAnalyzerConfigDocumentsFunc0;
        private static readonly WithCompilationOutputInfoDelegate1 WithCompilationOutputInfoFunc1;
        private static readonly WithDefaultNamespaceDelegate2 WithDefaultNamespaceFunc2;

        static ProjectInfoExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AnalyzerConfigDocumentsGetterFunc = LightupHelper.CreateInstanceGetAccessor<AnalyzerConfigDocumentsGetterDelegate>(wrappedType, nameof(AnalyzerConfigDocuments));
            CompilationOutputInfoGetterFunc = LightupHelper.CreateInstanceGetAccessor<CompilationOutputInfoGetterDelegate>(wrappedType, nameof(CompilationOutputInfo));

            WithAnalyzerConfigDocumentsFunc0 = LightupHelper.CreateInstanceMethodAccessor<WithAnalyzerConfigDocumentsDelegate0>(wrappedType, "WithAnalyzerConfigDocuments", "analyzerConfigDocumentsIEnumerable`1");
            WithCompilationOutputInfoFunc1 = LightupHelper.CreateInstanceMethodAccessor<WithCompilationOutputInfoDelegate1>(wrappedType, "WithCompilationOutputInfo", "infoCompilationOutputInfo&");
            WithDefaultNamespaceFunc2 = LightupHelper.CreateInstanceMethodAccessor<WithDefaultNamespaceDelegate2>(wrappedType, "WithDefaultNamespace", "defaultNamespaceString");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static IReadOnlyList<DocumentInfo> AnalyzerConfigDocuments(this ProjectInfo _obj)
            => AnalyzerConfigDocumentsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static CompilationOutputInfoWrapper CompilationOutputInfo(this ProjectInfo _obj)
            => CompilationOutputInfoGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ProjectInfo WithAnalyzerConfigDocuments(this ProjectInfo _obj, IEnumerable<DocumentInfo>? analyzerConfigDocuments)
            => WithAnalyzerConfigDocumentsFunc0(_obj, analyzerConfigDocuments);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ProjectInfo WithCompilationOutputInfo(this ProjectInfo _obj, in CompilationOutputInfoWrapper info)
            => WithCompilationOutputInfoFunc1(_obj, in info);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static ProjectInfo WithDefaultNamespace(this ProjectInfo _obj, String? defaultNamespace)
            => WithDefaultNamespaceFunc2(_obj, defaultNamespace);
    }
}
