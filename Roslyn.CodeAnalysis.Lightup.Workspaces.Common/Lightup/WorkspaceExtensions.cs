// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Workspace.</summary>
    public static class WorkspaceExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Workspace";

        private delegate Boolean CanApplyCompilationOptionChangeDelegate0(Workspace? _obj, CompilationOptions oldOptions, CompilationOptions newOptions, Project project);
        private delegate Boolean CanApplyParseOptionChangeDelegate1(Workspace? _obj, ParseOptions oldOptions, ParseOptions newOptions, Project project);
        private delegate void CloseAnalyzerConfigDocumentDelegate2(Workspace? _obj, DocumentId documentId);
        private delegate void OpenAnalyzerConfigDocumentDelegate3(Workspace? _obj, DocumentId documentId, Boolean activate);

        private static readonly CanApplyCompilationOptionChangeDelegate0 CanApplyCompilationOptionChangeFunc0;
        private static readonly CanApplyParseOptionChangeDelegate1 CanApplyParseOptionChangeFunc1;
        private static readonly CloseAnalyzerConfigDocumentDelegate2 CloseAnalyzerConfigDocumentFunc2;
        private static readonly OpenAnalyzerConfigDocumentDelegate3 OpenAnalyzerConfigDocumentFunc3;

        static WorkspaceExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            CanApplyCompilationOptionChangeFunc0 = LightupHelper.CreateInstanceMethodAccessor<CanApplyCompilationOptionChangeDelegate0>(wrappedType, "CanApplyCompilationOptionChange", "CompilationOptions", "CompilationOptions", "Project");
            CanApplyParseOptionChangeFunc1 = LightupHelper.CreateInstanceMethodAccessor<CanApplyParseOptionChangeDelegate1>(wrappedType, "CanApplyParseOptionChange", "ParseOptions", "ParseOptions", "Project");
            CloseAnalyzerConfigDocumentFunc2 = LightupHelper.CreateInstanceMethodAccessor<CloseAnalyzerConfigDocumentDelegate2>(wrappedType, "CloseAnalyzerConfigDocument", "DocumentId");
            OpenAnalyzerConfigDocumentFunc3 = LightupHelper.CreateInstanceMethodAccessor<OpenAnalyzerConfigDocumentDelegate3>(wrappedType, "OpenAnalyzerConfigDocument", "DocumentId", "Boolean");
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Boolean CanApplyCompilationOptionChange(this Workspace _obj, CompilationOptions oldOptions, CompilationOptions newOptions, Project project)
            => CanApplyCompilationOptionChangeFunc0(_obj, oldOptions, newOptions, project);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Boolean CanApplyParseOptionChange(this Workspace _obj, ParseOptions oldOptions, ParseOptions newOptions, Project project)
            => CanApplyParseOptionChangeFunc1(_obj, oldOptions, newOptions, project);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void CloseAnalyzerConfigDocument(this Workspace _obj, DocumentId documentId)
            => CloseAnalyzerConfigDocumentFunc2(_obj, documentId);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void OpenAnalyzerConfigDocument(this Workspace _obj, DocumentId documentId, Boolean activate)
            => OpenAnalyzerConfigDocumentFunc3(_obj, documentId, activate);
    }
}
