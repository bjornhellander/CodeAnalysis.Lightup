// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class WorkspaceExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Workspace";

        public static readonly Type? WrappedType;

        private delegate Boolean CanApplyCompilationOptionChangeDelegate0(Workspace? _obj, CompilationOptions oldOptions, CompilationOptions newOptions, Project project);
        private delegate Boolean CanApplyParseOptionChangeDelegate1(Workspace? _obj, ParseOptions oldOptions, ParseOptions newOptions, Project project);
        private delegate void CloseAnalyzerConfigDocumentDelegate2(Workspace? _obj, DocumentId documentId);
        private delegate void OpenAnalyzerConfigDocumentDelegate3(Workspace? _obj, DocumentId documentId, Boolean activate);

        private static readonly CanApplyCompilationOptionChangeDelegate0 CanApplyCompilationOptionChangeFunc0;
        private static readonly CanApplyParseOptionChangeDelegate1 CanApplyParseOptionChangeFunc1;
        private static readonly CloseAnalyzerConfigDocumentDelegate2 CloseAnalyzerConfigDocumentFunc2;
        private static readonly OpenAnalyzerConfigDocumentDelegate3 OpenAnalyzerConfigDocumentFunc3;

        static WorkspaceExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CanApplyCompilationOptionChangeFunc0 = LightupHelper.CreateMethodAccessor<CanApplyCompilationOptionChangeDelegate0>(WrappedType, nameof(CanApplyCompilationOptionChange));
            CanApplyParseOptionChangeFunc1 = LightupHelper.CreateMethodAccessor<CanApplyParseOptionChangeDelegate1>(WrappedType, nameof(CanApplyParseOptionChange));
            CloseAnalyzerConfigDocumentFunc2 = LightupHelper.CreateMethodAccessor<CloseAnalyzerConfigDocumentDelegate2>(WrappedType, nameof(CloseAnalyzerConfigDocument));
            OpenAnalyzerConfigDocumentFunc3 = LightupHelper.CreateMethodAccessor<OpenAnalyzerConfigDocumentDelegate3>(WrappedType, nameof(OpenAnalyzerConfigDocument));
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public static Boolean CanApplyCompilationOptionChange(this Workspace wrappedObject, CompilationOptions oldOptions, CompilationOptions newOptions, Project project)
            => CanApplyCompilationOptionChangeFunc0(wrappedObject, oldOptions, newOptions, project);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static Boolean CanApplyParseOptionChange(this Workspace wrappedObject, ParseOptions oldOptions, ParseOptions newOptions, Project project)
            => CanApplyParseOptionChangeFunc1(wrappedObject, oldOptions, newOptions, project);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static void CloseAnalyzerConfigDocument(this Workspace wrappedObject, DocumentId documentId)
            => CloseAnalyzerConfigDocumentFunc2(wrappedObject, documentId);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static void OpenAnalyzerConfigDocument(this Workspace wrappedObject, DocumentId documentId, Boolean activate)
            => OpenAnalyzerConfigDocumentFunc3(wrappedObject, documentId, activate);
    }
}
