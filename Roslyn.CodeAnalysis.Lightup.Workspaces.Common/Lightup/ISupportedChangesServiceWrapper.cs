// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.ISupportedChangesService. Added in version 4.4.0.0.</summary>
    public readonly struct ISupportedChangesServiceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ISupportedChangesService";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate Boolean CanApplyChangeDelegate0(IWorkspaceService? _obj, ApplyChangesKind kind);
        private delegate Boolean CanApplyCompilationOptionChangeDelegate1(IWorkspaceService? _obj, CompilationOptions oldOptions, CompilationOptions newOptions, Project project);
        private delegate Boolean CanApplyParseOptionChangeDelegate2(IWorkspaceService? _obj, ParseOptions oldOptions, ParseOptions newOptions, Project project);

        private static readonly CanApplyChangeDelegate0 CanApplyChangeFunc0;
        private static readonly CanApplyCompilationOptionChangeDelegate1 CanApplyCompilationOptionChangeFunc1;
        private static readonly CanApplyParseOptionChangeDelegate2 CanApplyParseOptionChangeFunc2;

        private readonly IWorkspaceService? wrappedObject;

        static ISupportedChangesServiceWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CanApplyChangeFunc0 = LightupHelper.CreateInstanceMethodAccessor<CanApplyChangeDelegate0>(WrappedType, "CanApplyChange", "kindApplyChangesKind");
            CanApplyCompilationOptionChangeFunc1 = LightupHelper.CreateInstanceMethodAccessor<CanApplyCompilationOptionChangeDelegate1>(WrappedType, "CanApplyCompilationOptionChange", "oldOptionsCompilationOptions", "newOptionsCompilationOptions", "projectProject");
            CanApplyParseOptionChangeFunc2 = LightupHelper.CreateInstanceMethodAccessor<CanApplyParseOptionChangeDelegate2>(WrappedType, "CanApplyParseOptionChange", "oldOptionsParseOptions", "newOptionsParseOptions", "projectProject");
        }

        private ISupportedChangesServiceWrapper(IWorkspaceService? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ISupportedChangesServiceWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IWorkspaceService>(obj, WrappedType);
            return new ISupportedChangesServiceWrapper(obj2);
        }

        public IWorkspaceService? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean CanApplyChange(ApplyChangesKind kind)
            => CanApplyChangeFunc0(wrappedObject, kind);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean CanApplyCompilationOptionChange(CompilationOptions oldOptions, CompilationOptions newOptions, Project project)
            => CanApplyCompilationOptionChangeFunc1(wrappedObject, oldOptions, newOptions, project);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean CanApplyParseOptionChange(ParseOptions oldOptions, ParseOptions newOptions, Project project)
            => CanApplyParseOptionChangeFunc2(wrappedObject, oldOptions, newOptions, project);
    }
}
