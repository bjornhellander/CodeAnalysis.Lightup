// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.Host;
using System;
using System.Collections.Immutable;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Interface added in Roslyn version 4.4.0.0</summary>
    public readonly struct ISupportedChangesServiceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ISupportedChangesService";

        public static readonly Type? WrappedType;

        private static readonly Func<IWorkspaceService?, ApplyChangesKind, Boolean> CanApplyChangeFunc0;
        private static readonly Func<IWorkspaceService?, CompilationOptions, CompilationOptions, Project, Boolean> CanApplyCompilationOptionChangeFunc1;
        private static readonly Func<IWorkspaceService?, ParseOptions, ParseOptions, Project, Boolean> CanApplyParseOptionChangeFunc2;

        private readonly IWorkspaceService? wrappedObject;

        static ISupportedChangesServiceWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            CanApplyChangeFunc0 = LightupHelper.CreateMethodAccessor<IWorkspaceService?, ApplyChangesKind, Boolean>(WrappedType, nameof(CanApplyChange));
            CanApplyCompilationOptionChangeFunc1 = LightupHelper.CreateMethodAccessor<IWorkspaceService?, CompilationOptions, CompilationOptions, Project, Boolean>(WrappedType, nameof(CanApplyCompilationOptionChange));
            CanApplyParseOptionChangeFunc2 = LightupHelper.CreateMethodAccessor<IWorkspaceService?, ParseOptions, ParseOptions, Project, Boolean>(WrappedType, nameof(CanApplyParseOptionChange));
        }

        private ISupportedChangesServiceWrapper(IWorkspaceService? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static ISupportedChangesServiceWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<IWorkspaceService>(obj, WrappedType);
            return new ISupportedChangesServiceWrapper(obj2);
        }

        public IWorkspaceService? Unwrap()
            => wrappedObject;

        public readonly Boolean CanApplyChange(ApplyChangesKind kind)
            => CanApplyChangeFunc0(wrappedObject, kind);

        public readonly Boolean CanApplyCompilationOptionChange(CompilationOptions oldOptions, CompilationOptions newOptions, Project project)
            => CanApplyCompilationOptionChangeFunc1(wrappedObject, oldOptions, newOptions, project);

        public readonly Boolean CanApplyParseOptionChange(ParseOptions oldOptions, ParseOptions newOptions, Project project)
            => CanApplyParseOptionChangeFunc2(wrappedObject, oldOptions, newOptions, project);
    }
}
