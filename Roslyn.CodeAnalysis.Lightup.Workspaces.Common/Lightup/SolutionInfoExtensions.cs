// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class SolutionInfoExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SolutionInfo";

        public static readonly Type? WrappedType;

        private delegate IReadOnlyList<AnalyzerReference> AnalyzerReferencesGetterDelegate(SolutionInfo? _obj);

        private delegate SolutionInfo CreateDelegate0(SolutionId id, VersionStamp version, String? filePath, IEnumerable<ProjectInfo>? projects, IEnumerable<AnalyzerReference>? analyzerReferences);

        private static readonly AnalyzerReferencesGetterDelegate AnalyzerReferencesGetterFunc;

        private static readonly CreateDelegate0 CreateFunc0;

        static SolutionInfoExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            AnalyzerReferencesGetterFunc = LightupHelper.CreateInstanceGetAccessor<AnalyzerReferencesGetterDelegate>(WrappedType, nameof(AnalyzerReferences));

            CreateFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(WrappedType, nameof(Create));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static IReadOnlyList<AnalyzerReference> AnalyzerReferences(this SolutionInfo _obj)
            => AnalyzerReferencesGetterFunc(_obj);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SolutionInfo Create(SolutionId id, VersionStamp version, String? filePath, IEnumerable<ProjectInfo>? projects, IEnumerable<AnalyzerReference>? analyzerReferences)
            => CreateFunc0(id, version, filePath, projects, analyzerReferences);
    }
}
