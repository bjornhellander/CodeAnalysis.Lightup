// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Formatting.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Formatting.Formatter.</summary>
    public static class FormatterEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Formatting.Formatter";

        private delegate System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Document> OrganizeImportsAsyncDelegate0(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken);

        private static readonly OrganizeImportsAsyncDelegate0 OrganizeImportsAsyncFunc0;

        static FormatterEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            OrganizeImportsAsyncFunc0 = LightupHelper.CreateStaticMethodAccessor<OrganizeImportsAsyncDelegate0>(wrappedType, "OrganizeImportsAsync", "documentDocument", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Document> OrganizeImportsAsync(Microsoft.CodeAnalysis.Document document, System.Threading.CancellationToken cancellationToken)
            => OrganizeImportsAsyncFunc0(document, cancellationToken);
    }
}
