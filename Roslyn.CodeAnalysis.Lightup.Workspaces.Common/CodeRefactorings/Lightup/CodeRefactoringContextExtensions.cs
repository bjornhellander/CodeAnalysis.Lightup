// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CodeRefactorings.Lightup
{
    /// <summary>Struct added in Roslyn version </summary>
    public static class CodeRefactoringContextExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext";

        public static readonly Type? WrappedType;

        private delegate TextDocument TextDocumentGetterDelegate(CodeRefactoringContext? _obj);

        private static readonly TextDocumentGetterDelegate TextDocumentGetterFunc;

        static CodeRefactoringContextExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            TextDocumentGetterFunc = LightupHelper.CreateGetAccessor<TextDocumentGetterDelegate>(WrappedType, nameof(TextDocument));
        }

        /// <summary>Added in Roslyn version 4.8.0.0</summary>
        public static TextDocument TextDocument(this CodeRefactoringContext _obj)
            => TextDocumentGetterFunc(_obj);
    }
}
