// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Editing.Lightup
{
    /// <summary>Class added in Roslyn version </summary>
    public static class SyntaxGeneratorExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Editing.SyntaxGenerator";

        public static readonly Type? WrappedType;

        private delegate SyntaxNode ConditionalAccessExpressionDelegate0(SyntaxGenerator? _obj, SyntaxNode expression, SyntaxNode whenNotNull);
        private delegate SyntaxNode ElementBindingExpressionDelegate1(SyntaxGenerator? _obj, IEnumerable<SyntaxNode> arguments);
        private delegate SyntaxNode ElementBindingExpressionDelegate2(SyntaxGenerator? _obj, params SyntaxNode[] arguments);
        private delegate SyntaxNode MemberBindingExpressionDelegate3(SyntaxGenerator? _obj, SyntaxNode name);

        private static readonly ConditionalAccessExpressionDelegate0 ConditionalAccessExpressionFunc0;
        private static readonly ElementBindingExpressionDelegate1 ElementBindingExpressionFunc1;
        private static readonly ElementBindingExpressionDelegate2 ElementBindingExpressionFunc2;
        private static readonly MemberBindingExpressionDelegate3 MemberBindingExpressionFunc3;

        static SyntaxGeneratorExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConditionalAccessExpressionFunc0 = LightupHelper.CreateMethodAccessor<ConditionalAccessExpressionDelegate0>(WrappedType, nameof(ConditionalAccessExpression));
            ElementBindingExpressionFunc1 = LightupHelper.CreateMethodAccessor<ElementBindingExpressionDelegate1>(WrappedType, nameof(ElementBindingExpression));
            ElementBindingExpressionFunc2 = LightupHelper.CreateMethodAccessor<ElementBindingExpressionDelegate2>(WrappedType, nameof(ElementBindingExpression));
            MemberBindingExpressionFunc3 = LightupHelper.CreateMethodAccessor<MemberBindingExpressionDelegate3>(WrappedType, nameof(MemberBindingExpression));
        }

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxNode ConditionalAccessExpression(this SyntaxGenerator wrappedObject, SyntaxNode expression, SyntaxNode whenNotNull)
            => ConditionalAccessExpressionFunc0(wrappedObject, expression, whenNotNull);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxNode ElementBindingExpression(this SyntaxGenerator wrappedObject, IEnumerable<SyntaxNode> arguments)
            => ElementBindingExpressionFunc1(wrappedObject, arguments);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxNode ElementBindingExpression(this SyntaxGenerator wrappedObject, params SyntaxNode[] arguments)
            => ElementBindingExpressionFunc2(wrappedObject, arguments);

        /// <summary>Added in Roslyn version 3.8.0.0</summary>
        public static SyntaxNode MemberBindingExpression(this SyntaxGenerator wrappedObject, SyntaxNode name)
            => MemberBindingExpressionFunc3(wrappedObject, name);
    }
}
