// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Editing.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Editing.SyntaxEditor.</summary>
    public static partial class SyntaxEditorExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Editing.SyntaxEditor";

        private delegate SyntaxEditor ConstructorDelegate0(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Host.HostWorkspaceServices services);
        private delegate SyntaxEditor ConstructorDelegate1(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper services);

        private static readonly ConstructorDelegate0 ConstructorFunc0;
        private static readonly ConstructorDelegate1 ConstructorFunc1;

        static SyntaxEditorExtensions()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = LightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(wrappedType, "rootSyntaxNode", "servicesHostWorkspaceServices");
            ConstructorFunc1 = LightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate1>(wrappedType, "rootSyntaxNode", "servicesSolutionServices");
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static SyntaxEditor Create(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Host.HostWorkspaceServices services)
            => ConstructorFunc0(root, services);

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static SyntaxEditor Create(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper services)
            => ConstructorFunc1(root, services);
    }
}
