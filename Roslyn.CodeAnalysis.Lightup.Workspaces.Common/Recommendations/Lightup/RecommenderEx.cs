// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Recommendations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Recommendations.Recommender.</summary>
    public static class RecommenderEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Recommendations.Recommender";

        private delegate Task<ImmutableArray<ISymbol>> GetRecommendedSymbolsAtPositionAsyncDelegate0(Document document, Int32 position, OptionSet? options, CancellationToken cancellationToken);

        private static readonly GetRecommendedSymbolsAtPositionAsyncDelegate0 GetRecommendedSymbolsAtPositionAsyncFunc0;

        static RecommenderEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            GetRecommendedSymbolsAtPositionAsyncFunc0 = LightupHelper.CreateStaticMethodAccessor<GetRecommendedSymbolsAtPositionAsyncDelegate0>(wrappedType, nameof(GetRecommendedSymbolsAtPositionAsync));
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Task<ImmutableArray<ISymbol>> GetRecommendedSymbolsAtPositionAsync(Document document, Int32 position, OptionSet? options, CancellationToken cancellationToken)
            => GetRecommendedSymbolsAtPositionAsyncFunc0(document, position, options, cancellationToken);
    }
}
