// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Host.SolutionServices. Added in version 4.4.0.0.</summary>
    public readonly struct SolutionServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.SolutionServices";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate IEnumerable<String> SupportedLanguagesGetterDelegate(object? _obj);

        private delegate LanguageServicesWrapper GetLanguageServicesDelegate0(object? _obj, String languageName);
        private delegate Boolean IsSupportedDelegate1(object? _obj, String languageName);

        private static readonly SupportedLanguagesGetterDelegate SupportedLanguagesGetterFunc;

        private static readonly GetLanguageServicesDelegate0 GetLanguageServicesFunc0;
        private static readonly IsSupportedDelegate1 IsSupportedFunc1;

        private readonly object? wrappedObject;

        static SolutionServicesWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            SupportedLanguagesGetterFunc = LightupHelper.CreateInstanceGetAccessor<SupportedLanguagesGetterDelegate>(WrappedType, nameof(SupportedLanguages));

            GetLanguageServicesFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetLanguageServicesDelegate0>(WrappedType, nameof(GetLanguageServices));
            IsSupportedFunc1 = LightupHelper.CreateInstanceMethodAccessor<IsSupportedDelegate1>(WrappedType, nameof(IsSupported));
        }

        private SolutionServicesWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly IEnumerable<String> SupportedLanguages
        {
            get => SupportedLanguagesGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SolutionServicesWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SolutionServicesWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly LanguageServicesWrapper GetLanguageServices(String languageName)
            => GetLanguageServicesFunc0(wrappedObject, languageName);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean IsSupported(String languageName)
            => IsSupportedFunc1(wrappedObject, languageName);
    }
}
