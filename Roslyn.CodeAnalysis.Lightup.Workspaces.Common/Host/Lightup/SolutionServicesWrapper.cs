// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Class added in Roslyn version 4.4.0.0</summary>
    public readonly struct SolutionServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.SolutionServices";

        public static readonly Type? WrappedType;

        private static readonly Func<object?, IEnumerable<String>> SupportedLanguagesFunc;

        private static readonly Func<object?, String, LanguageServicesWrapper> GetLanguageServicesFunc0;
        private static readonly Func<object?, String, Boolean> IsSupportedFunc1;

        private readonly object? wrappedObject;

        static SolutionServicesWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            SupportedLanguagesFunc = LightupHelper.CreateGetAccessor<object?, IEnumerable<String>>(WrappedType, nameof(SupportedLanguages));

            GetLanguageServicesFunc0 = LightupHelper.CreateMethodAccessor<object?, String, LanguageServicesWrapper>(WrappedType, nameof(GetLanguageServices));
            IsSupportedFunc1 = LightupHelper.CreateMethodAccessor<object?, String, Boolean>(WrappedType, nameof(IsSupported));
        }

        private SolutionServicesWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly IEnumerable<String> SupportedLanguages
            => SupportedLanguagesFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SolutionServicesWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SolutionServicesWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly LanguageServicesWrapper GetLanguageServices(String languageName)
            => GetLanguageServicesFunc0(wrappedObject, languageName);

        public readonly Boolean IsSupported(String languageName)
            => IsSupportedFunc1(wrappedObject, languageName);
    }
}
