// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Class added in Roslyn version 4.4.0.0</summary>
    public readonly struct LanguageServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.LanguageServices";

        public static readonly Type? WrappedType;

        private delegate String LanguageGetterDelegate(object? _obj);
        private delegate SolutionServicesWrapper SolutionServicesGetterDelegate(object? _obj);

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly SolutionServicesGetterDelegate SolutionServicesGetterFunc;

        private readonly object? wrappedObject;

        static LanguageServicesWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            LanguageGetterFunc = LightupHelper.CreateGetAccessor<LanguageGetterDelegate>(WrappedType, nameof(Language));
            SolutionServicesGetterFunc = LightupHelper.CreateGetAccessor<SolutionServicesGetterDelegate>(WrappedType, nameof(SolutionServices));
        }

        private LanguageServicesWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly String Language
        {
            get => LanguageGetterFunc(wrappedObject);
        }

        /// <summary>Added in Roslyn version 4.4.0.0</summary>
        public readonly SolutionServicesWrapper SolutionServices
        {
            get => SolutionServicesGetterFunc(wrappedObject);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static LanguageServicesWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new LanguageServicesWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;
    }
}
