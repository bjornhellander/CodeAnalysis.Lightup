// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Interface added in Roslyn version </summary>
    public static class IPersistentStorageServiceExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.IPersistentStorageService";

        public static readonly Type? WrappedType;

        private delegate ValueTask<IPersistentStorage> GetStorageAsyncDelegate0(IPersistentStorageService? _obj, Solution solution, CancellationToken cancellationToken);

        private static readonly GetStorageAsyncDelegate0 GetStorageAsyncFunc0;

        static IPersistentStorageServiceExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetStorageAsyncFunc0 = LightupHelper.CreateMethodAccessor<GetStorageAsyncDelegate0>(WrappedType, nameof(GetStorageAsync));
        }

        /// <summary>Added in Roslyn version 4.0.0.0</summary>
        public static ValueTask<IPersistentStorage> GetStorageAsync(this IPersistentStorageService wrappedObject, Solution solution, CancellationToken cancellationToken)
            => GetStorageAsyncFunc0(wrappedObject, solution, cancellationToken);
    }
}
