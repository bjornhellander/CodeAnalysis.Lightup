// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentActionSet. Added in version 3.8.0.0.</summary>
    public readonly partial struct RenameDocumentActionSetWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentActionSet";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Rename.Lightup.RenameDocumentActionWrapper> ApplicableActionsGetterDelegate(System.Object? _obj);

        private delegate System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution> UpdateSolutionAsyncDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken);
        private delegate System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution> UpdateSolutionAsyncDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Rename.Lightup.RenameDocumentActionWrapper> actions, System.Threading.CancellationToken cancellationToken);

        private static readonly ApplicableActionsGetterDelegate ApplicableActionsGetterFunc;

        private static readonly UpdateSolutionAsyncDelegate0 UpdateSolutionAsyncFunc0;
        private static readonly UpdateSolutionAsyncDelegate1 UpdateSolutionAsyncFunc1;

        private readonly System.Object? wrappedObject;

        static RenameDocumentActionSetWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ApplicableActionsGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ApplicableActionsGetterDelegate>(WrappedType, nameof(ApplicableActions));

            UpdateSolutionAsyncFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<UpdateSolutionAsyncDelegate0>(WrappedType, "UpdateSolutionAsync", "solutionSolution", "cancellationTokenCancellationToken");
            UpdateSolutionAsyncFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<UpdateSolutionAsyncDelegate1>(WrappedType, "UpdateSolutionAsync", "solutionSolution", "actionsImmutableArray`1", "cancellationTokenCancellationToken");
        }

        private RenameDocumentActionSetWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Rename.Lightup.RenameDocumentActionWrapper> ApplicableActions
        {
            get => ApplicableActionsGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        public static RenameDocumentActionSetWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new RenameDocumentActionSetWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution> UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution solution, System.Threading.CancellationToken cancellationToken)
            => UpdateSolutionAsyncFunc0(wrappedObject, solution, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Solution> UpdateSolutionAsync(Microsoft.CodeAnalysis.Solution solution, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Rename.Lightup.RenameDocumentActionWrapper> actions, System.Threading.CancellationToken cancellationToken)
            => UpdateSolutionAsyncFunc1(wrappedObject, solution, actions, cancellationToken);
    }
}
