// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentAction. Added in version 3.8.0.0.</summary>
    public readonly partial struct RenameDocumentActionWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentAction";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.String GetDescriptionDelegate0(System.Object? _obj, System.Globalization.CultureInfo? culture);
        private delegate System.Collections.Immutable.ImmutableArray<System.String> GetErrorsDelegate1(System.Object? _obj, System.Globalization.CultureInfo? culture);

        private static readonly GetDescriptionDelegate0 GetDescriptionFunc0;
        private static readonly GetErrorsDelegate1 GetErrorsFunc1;

        private readonly System.Object? wrappedObject;

        static RenameDocumentActionWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetDescriptionFunc0 = LightupHelper.CreateInstanceMethodAccessor<GetDescriptionDelegate0>(WrappedType, "GetDescription", "cultureCultureInfo");
            GetErrorsFunc1 = LightupHelper.CreateInstanceMethodAccessor<GetErrorsDelegate1>(WrappedType, "GetErrors", "cultureCultureInfo");
        }

        private RenameDocumentActionWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static RenameDocumentActionWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new RenameDocumentActionWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.String GetDescription(System.Globalization.CultureInfo? culture)
            => GetDescriptionFunc0(wrappedObject, culture);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<System.String> GetErrors(System.Globalization.CultureInfo? culture)
            => GetErrorsFunc1(wrappedObject, culture);
    }
}
