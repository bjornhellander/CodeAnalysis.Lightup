// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Rename.DocumentRenameOptions. Added in version 4.4.0.0.</summary>
    public readonly struct DocumentRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.DocumentRenameOptions";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate DocumentRenameOptionsWrapper ConstructorDelegate0(System.Boolean RenameMatchingTypeInStrings, System.Boolean RenameMatchingTypeInComments);

        private delegate System.Boolean RenameMatchingTypeInCommentsGetterDelegate(System.Object? _obj);
        private delegate void RenameMatchingTypeInCommentsSetterDelegate(System.Object? _obj, System.Boolean _value);
        private delegate System.Boolean RenameMatchingTypeInStringsGetterDelegate(System.Object? _obj);
        private delegate void RenameMatchingTypeInStringsSetterDelegate(System.Object? _obj, System.Boolean _value);

        private delegate void DeconstructDelegate0(System.Object? _obj, out System.Boolean RenameMatchingTypeInStrings, out System.Boolean RenameMatchingTypeInComments);
        private delegate System.Boolean EqualsDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.Rename.Lightup.DocumentRenameOptionsWrapper other);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly RenameMatchingTypeInCommentsGetterDelegate RenameMatchingTypeInCommentsGetterFunc;
        private static readonly RenameMatchingTypeInCommentsSetterDelegate RenameMatchingTypeInCommentsSetterFunc;
        private static readonly RenameMatchingTypeInStringsGetterDelegate RenameMatchingTypeInStringsGetterFunc;
        private static readonly RenameMatchingTypeInStringsSetterDelegate RenameMatchingTypeInStringsSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly System.Object? wrappedObject;

        static DocumentRenameOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = LightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "RenameMatchingTypeInStringsBoolean", "RenameMatchingTypeInCommentsBoolean");

            RenameMatchingTypeInCommentsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInCommentsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInCommentsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInCommentsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInStringsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInStringsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));
            RenameMatchingTypeInStringsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInStringsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));

            DeconstructFunc0 = LightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RenameMatchingTypeInStringsBoolean&", "RenameMatchingTypeInCommentsBoolean&");
            EqualsFunc1 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate1>(WrappedType, "Equals", "otherDocumentRenameOptions");
        }

        private DocumentRenameOptionsWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static DocumentRenameOptionsWrapper Create(System.Boolean RenameMatchingTypeInStrings, System.Boolean RenameMatchingTypeInComments)
            => ConstructorFunc0(RenameMatchingTypeInStrings, RenameMatchingTypeInComments);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameMatchingTypeInComments
        {
            get => RenameMatchingTypeInCommentsGetterFunc(wrappedObject);
            set => RenameMatchingTypeInCommentsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameMatchingTypeInStrings
        {
            get => RenameMatchingTypeInStringsGetterFunc(wrappedObject);
            set => RenameMatchingTypeInStringsSetterFunc(wrappedObject, value);
        }

        public static bool Is(System.Object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DocumentRenameOptionsWrapper As(System.Object? obj)
        {
            var obj2 = LightupHelper.As<System.Object>(obj, WrappedType);
            return new DocumentRenameOptionsWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Deconstruct(out System.Boolean RenameMatchingTypeInStrings, out System.Boolean RenameMatchingTypeInComments)
            => DeconstructFunc0(wrappedObject, out RenameMatchingTypeInStrings, out RenameMatchingTypeInComments);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.Rename.Lightup.DocumentRenameOptionsWrapper other)
            => EqualsFunc1(wrappedObject, other);
    }
}
