// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Rename.DocumentRenameOptions. Added in version 4.4.0.0.</summary>
    public readonly struct DocumentRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.DocumentRenameOptions";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate DocumentRenameOptionsWrapper ConstructorDelegate0(Boolean RenameMatchingTypeInStrings, Boolean RenameMatchingTypeInComments);

        private delegate Boolean RenameMatchingTypeInCommentsGetterDelegate(object? _obj);
        private delegate void RenameMatchingTypeInCommentsSetterDelegate(object? _obj, Boolean _value);
        private delegate Boolean RenameMatchingTypeInStringsGetterDelegate(object? _obj);
        private delegate void RenameMatchingTypeInStringsSetterDelegate(object? _obj, Boolean _value);

        private delegate void DeconstructDelegate0(object? _obj, out Boolean RenameMatchingTypeInStrings, out Boolean RenameMatchingTypeInComments);
        private delegate Boolean EqualsDelegate1(object? _obj, DocumentRenameOptionsWrapper other);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly RenameMatchingTypeInCommentsGetterDelegate RenameMatchingTypeInCommentsGetterFunc;
        private static readonly RenameMatchingTypeInCommentsSetterDelegate RenameMatchingTypeInCommentsSetterFunc;
        private static readonly RenameMatchingTypeInStringsGetterDelegate RenameMatchingTypeInStringsGetterFunc;
        private static readonly RenameMatchingTypeInStringsSetterDelegate RenameMatchingTypeInStringsSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly object? wrappedObject;

        static DocumentRenameOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = LightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "RenameMatchingTypeInStringsBoolean", "RenameMatchingTypeInCommentsBoolean");

            RenameMatchingTypeInCommentsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInCommentsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInCommentsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInCommentsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInStringsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInStringsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));
            RenameMatchingTypeInStringsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInStringsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));

            DeconstructFunc0 = LightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RenameMatchingTypeInStringsBoolean&", "RenameMatchingTypeInCommentsBoolean&");
            EqualsFunc1 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate1>(WrappedType, "Equals", "otherDocumentRenameOptions");
        }

        private DocumentRenameOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static DocumentRenameOptionsWrapper Create(Boolean RenameMatchingTypeInStrings, Boolean RenameMatchingTypeInComments)
            => ConstructorFunc0(RenameMatchingTypeInStrings, RenameMatchingTypeInComments);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameMatchingTypeInComments
        {
            get => RenameMatchingTypeInCommentsGetterFunc(wrappedObject);
            set => RenameMatchingTypeInCommentsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameMatchingTypeInStrings
        {
            get => RenameMatchingTypeInStringsGetterFunc(wrappedObject);
            set => RenameMatchingTypeInStringsSetterFunc(wrappedObject, value);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DocumentRenameOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new DocumentRenameOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Deconstruct(out Boolean RenameMatchingTypeInStrings, out Boolean RenameMatchingTypeInComments)
            => DeconstructFunc0(wrappedObject, out RenameMatchingTypeInStrings, out RenameMatchingTypeInComments);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean Equals(DocumentRenameOptionsWrapper other)
            => EqualsFunc1(wrappedObject, other);
    }
}
