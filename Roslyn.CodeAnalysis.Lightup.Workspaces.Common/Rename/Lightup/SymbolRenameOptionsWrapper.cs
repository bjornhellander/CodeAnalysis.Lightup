// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Rename.SymbolRenameOptions. Added in version 4.4.0.0.</summary>
    public readonly struct SymbolRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.SymbolRenameOptions";

        private static readonly Type? WrappedType; // NOTE: Used via reflection

        private delegate Boolean RenameFileGetterDelegate(object? _obj);
        private delegate void RenameFileSetterDelegate(object? _obj, Boolean _value);
        private delegate Boolean RenameInCommentsGetterDelegate(object? _obj);
        private delegate void RenameInCommentsSetterDelegate(object? _obj, Boolean _value);
        private delegate Boolean RenameInStringsGetterDelegate(object? _obj);
        private delegate void RenameInStringsSetterDelegate(object? _obj, Boolean _value);
        private delegate Boolean RenameOverloadsGetterDelegate(object? _obj);
        private delegate void RenameOverloadsSetterDelegate(object? _obj, Boolean _value);

        private delegate void DeconstructDelegate0(object? _obj, out Boolean RenameOverloads, out Boolean RenameInStrings, out Boolean RenameInComments, out Boolean RenameFile);
        private delegate Boolean EqualsDelegate1(object? _obj, SymbolRenameOptionsWrapper other);

        private static readonly RenameFileGetterDelegate RenameFileGetterFunc;
        private static readonly RenameFileSetterDelegate RenameFileSetterFunc;
        private static readonly RenameInCommentsGetterDelegate RenameInCommentsGetterFunc;
        private static readonly RenameInCommentsSetterDelegate RenameInCommentsSetterFunc;
        private static readonly RenameInStringsGetterDelegate RenameInStringsGetterFunc;
        private static readonly RenameInStringsSetterDelegate RenameInStringsSetterFunc;
        private static readonly RenameOverloadsGetterDelegate RenameOverloadsGetterFunc;
        private static readonly RenameOverloadsSetterDelegate RenameOverloadsSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly object? wrappedObject;

        static SymbolRenameOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            RenameFileGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameFileGetterDelegate>(WrappedType, nameof(RenameFile));
            RenameFileSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameFileSetterDelegate>(WrappedType, nameof(RenameFile));
            RenameInCommentsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameInCommentsGetterDelegate>(WrappedType, nameof(RenameInComments));
            RenameInCommentsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameInCommentsSetterDelegate>(WrappedType, nameof(RenameInComments));
            RenameInStringsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameInStringsGetterDelegate>(WrappedType, nameof(RenameInStrings));
            RenameInStringsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameInStringsSetterDelegate>(WrappedType, nameof(RenameInStrings));
            RenameOverloadsGetterFunc = LightupHelper.CreateInstanceGetAccessor<RenameOverloadsGetterDelegate>(WrappedType, nameof(RenameOverloads));
            RenameOverloadsSetterFunc = LightupHelper.CreateInstanceSetAccessor<RenameOverloadsSetterDelegate>(WrappedType, nameof(RenameOverloads));

            DeconstructFunc0 = LightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RenameOverloadsBoolean&", "RenameInStringsBoolean&", "RenameInCommentsBoolean&", "RenameFileBoolean&");
            EqualsFunc1 = LightupHelper.CreateInstanceMethodAccessor<EqualsDelegate1>(WrappedType, "Equals", "otherSymbolRenameOptions");
        }

        private SymbolRenameOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameFile
        {
            get => RenameFileGetterFunc(wrappedObject);
            set => RenameFileSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameInComments
        {
            get => RenameInCommentsGetterFunc(wrappedObject);
            set => RenameInCommentsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameInStrings
        {
            get => RenameInStringsGetterFunc(wrappedObject);
            set => RenameInStringsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Boolean RenameOverloads
        {
            get => RenameOverloadsGetterFunc(wrappedObject);
            set => RenameOverloadsSetterFunc(wrappedObject, value);
        }

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SymbolRenameOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SymbolRenameOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Deconstruct(out Boolean RenameOverloads, out Boolean RenameInStrings, out Boolean RenameInComments, out Boolean RenameFile)
            => DeconstructFunc0(wrappedObject, out RenameOverloads, out RenameInStrings, out RenameInComments, out RenameFile);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Boolean Equals(SymbolRenameOptionsWrapper other)
            => EqualsFunc1(wrappedObject, other);
    }
}
