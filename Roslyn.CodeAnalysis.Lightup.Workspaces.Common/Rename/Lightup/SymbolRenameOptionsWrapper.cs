// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Struct added in Roslyn version 4.4.0.0</summary>
    public readonly struct SymbolRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.SymbolRenameOptions";

        public static readonly Type? WrappedType;

        private delegate Boolean RenameFileDelegate(object? _obj);
        private delegate Boolean RenameInCommentsDelegate(object? _obj);
        private delegate Boolean RenameInStringsDelegate(object? _obj);
        private delegate Boolean RenameOverloadsDelegate(object? _obj);

        private delegate void DeconstructDelegate0(object? _obj, out Boolean RenameOverloads, out Boolean RenameInStrings, out Boolean RenameInComments, out Boolean RenameFile);
        private delegate Boolean EqualsDelegate1(object? _obj, SymbolRenameOptionsWrapper other);

        private static readonly RenameFileDelegate RenameFileFunc;
        private static readonly RenameInCommentsDelegate RenameInCommentsFunc;
        private static readonly RenameInStringsDelegate RenameInStringsFunc;
        private static readonly RenameOverloadsDelegate RenameOverloadsFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly object? wrappedObject;

        static SymbolRenameOptionsWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            RenameFileFunc = LightupHelper.CreateGetAccessor<RenameFileDelegate>(WrappedType, nameof(RenameFile));
            RenameInCommentsFunc = LightupHelper.CreateGetAccessor<RenameInCommentsDelegate>(WrappedType, nameof(RenameInComments));
            RenameInStringsFunc = LightupHelper.CreateGetAccessor<RenameInStringsDelegate>(WrappedType, nameof(RenameInStrings));
            RenameOverloadsFunc = LightupHelper.CreateGetAccessor<RenameOverloadsDelegate>(WrappedType, nameof(RenameOverloads));

            DeconstructFunc0 = LightupHelper.CreateMethodAccessor<DeconstructDelegate0>(WrappedType, nameof(Deconstruct));
            EqualsFunc1 = LightupHelper.CreateMethodAccessor<EqualsDelegate1>(WrappedType, nameof(Equals));
        }

        private SymbolRenameOptionsWrapper(object? obj)
        {
            wrappedObject = obj;
        }

        public readonly Boolean RenameFile
            => RenameFileFunc(wrappedObject);

        public readonly Boolean RenameInComments
            => RenameInCommentsFunc(wrappedObject);

        public readonly Boolean RenameInStrings
            => RenameInStringsFunc(wrappedObject);

        public readonly Boolean RenameOverloads
            => RenameOverloadsFunc(wrappedObject);

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static SymbolRenameOptionsWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<object>(obj, WrappedType);
            return new SymbolRenameOptionsWrapper(obj2);
        }

        public object? Unwrap()
            => wrappedObject;

        public readonly void Deconstruct(out Boolean RenameOverloads, out Boolean RenameInStrings, out Boolean RenameInComments, out Boolean RenameFile)
            => DeconstructFunc0(wrappedObject, out RenameOverloads, out RenameInStrings, out RenameInComments, out RenameFile);

        public readonly Boolean Equals(SymbolRenameOptionsWrapper other)
            => EqualsFunc1(wrappedObject, other);
    }
}
