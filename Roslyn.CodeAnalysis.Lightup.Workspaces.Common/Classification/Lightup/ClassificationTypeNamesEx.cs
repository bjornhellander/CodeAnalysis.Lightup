// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Classification.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Classification.ClassificationTypeNames.</summary>
    public static class ClassificationTypeNamesEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Classification.ClassificationTypeNames";

        private delegate String RecordClassNameGetterDelegate();
        private delegate String RecordStructNameGetterDelegate();

        private delegate ImmutableArray<String> AllTypeNamesGetterDelegate();

        private static readonly RecordClassNameGetterDelegate RecordClassNameGetterFunc;
        private static readonly RecordStructNameGetterDelegate RecordStructNameGetterFunc;

        private static readonly AllTypeNamesGetterDelegate AllTypeNamesGetterFunc;

        static ClassificationTypeNamesEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            RecordClassNameGetterFunc = LightupHelper.CreateStaticReadAccessor<RecordClassNameGetterDelegate>(wrappedType, nameof(RecordClassName));
            RecordStructNameGetterFunc = LightupHelper.CreateStaticReadAccessor<RecordStructNameGetterDelegate>(wrappedType, nameof(RecordStructName));

            AllTypeNamesGetterFunc = LightupHelper.CreateStaticGetAccessor<AllTypeNamesGetterDelegate>(wrappedType, nameof(AllTypeNames));
        }

        /// <summary>Field added in version 4.0.0.0.</summary>
        public static String RecordClassName
        {
            get => RecordClassNameGetterFunc();
        }

        /// <summary>Field added in version 4.0.0.0.</summary>
        public static String RecordStructName
        {
            get => RecordStructNameGetterFunc();
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static ImmutableArray<String> AllTypeNames()
            => AllTypeNamesGetterFunc();
    }
}
