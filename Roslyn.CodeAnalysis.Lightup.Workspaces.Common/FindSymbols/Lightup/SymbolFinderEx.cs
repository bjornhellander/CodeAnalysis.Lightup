// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.FindSymbols.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.</summary>
    public static class SymbolFinderEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FindSymbols.SymbolFinder";

        private delegate Task<IEnumerable<INamedTypeSymbol>> FindDerivedClassesAsyncDelegate0(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken);
        private delegate Task<IEnumerable<INamedTypeSymbol>> FindDerivedInterfacesAsyncDelegate1(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken);
        private delegate Task<IEnumerable<INamedTypeSymbol>> FindImplementationsAsyncDelegate2(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken);

        private static readonly FindDerivedClassesAsyncDelegate0 FindDerivedClassesAsyncFunc0;
        private static readonly FindDerivedInterfacesAsyncDelegate1 FindDerivedInterfacesAsyncFunc1;
        private static readonly FindImplementationsAsyncDelegate2 FindImplementationsAsyncFunc2;

        static SymbolFinderEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            FindDerivedClassesAsyncFunc0 = LightupHelper.CreateStaticMethodAccessor<FindDerivedClassesAsyncDelegate0>(wrappedType, "FindDerivedClassesAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
            FindDerivedInterfacesAsyncFunc1 = LightupHelper.CreateStaticMethodAccessor<FindDerivedInterfacesAsyncDelegate1>(wrappedType, "FindDerivedInterfacesAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
            FindImplementationsAsyncFunc2 = LightupHelper.CreateStaticMethodAccessor<FindImplementationsAsyncDelegate2>(wrappedType, "FindImplementationsAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<IEnumerable<INamedTypeSymbol>> FindDerivedClassesAsync(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken)
            => FindDerivedClassesAsyncFunc0(type, solution, transitive, projects, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<IEnumerable<INamedTypeSymbol>> FindDerivedInterfacesAsync(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken)
            => FindDerivedInterfacesAsyncFunc1(type, solution, transitive, projects, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Task<IEnumerable<INamedTypeSymbol>> FindImplementationsAsync(INamedTypeSymbol type, Solution solution, Boolean transitive, IImmutableSet<Project>? projects, CancellationToken cancellationToken)
            => FindImplementationsAsyncFunc2(type, solution, transitive, projects, cancellationToken);
    }
}
