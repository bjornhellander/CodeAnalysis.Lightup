// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CodeFixes.Lightup
{
    /// <summary>Class added in Roslyn version 4.0.0.0</summary>
    public readonly struct DocumentBasedFixAllProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider";

        public static readonly Type? WrappedType;

        private static readonly Func<FixAllProvider?, FixAllContext, Task<CodeAction>> GetFixAsyncFunc0;
        private static readonly Func<FixAllProvider?, IEnumerable<FixAllScope>> GetSupportedFixAllScopesFunc1;

        private readonly FixAllProvider? wrappedObject;

        static DocumentBasedFixAllProviderWrapper()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            GetFixAsyncFunc0 = LightupHelper.CreateMethodAccessor<FixAllProvider?, FixAllContext, Task<CodeAction>>(WrappedType, nameof(GetFixAsync));
            GetSupportedFixAllScopesFunc1 = LightupHelper.CreateMethodAccessor<FixAllProvider?, IEnumerable<FixAllScope>>(WrappedType, nameof(GetSupportedFixAllScopes));
        }

        private DocumentBasedFixAllProviderWrapper(FixAllProvider? obj)
        {
            wrappedObject = obj;
        }

        public static implicit operator FixAllProvider?(DocumentBasedFixAllProviderWrapper obj)
            => obj.Unwrap();

        public static bool Is(object? obj)
            => LightupHelper.Is(obj, WrappedType);

        public static DocumentBasedFixAllProviderWrapper As(object? obj)
        {
            var obj2 = LightupHelper.As<FixAllProvider>(obj, WrappedType);
            return new DocumentBasedFixAllProviderWrapper(obj2);
        }

        public FixAllProvider? Unwrap()
            => wrappedObject;

        public readonly Task<CodeAction> GetFixAsync(FixAllContext fixAllContext)
            => GetFixAsyncFunc0(wrappedObject, fixAllContext);

        public readonly IEnumerable<FixAllScope> GetSupportedFixAllScopes()
            => GetSupportedFixAllScopesFunc1(wrappedObject);
    }
}
