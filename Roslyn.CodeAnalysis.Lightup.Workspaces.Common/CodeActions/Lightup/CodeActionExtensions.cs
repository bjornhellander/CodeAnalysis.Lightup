// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.CodeActions.Lightup
{
    public static class CodeActionExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeActions.CodeAction";

        public static readonly Type? WrappedType;

        private delegate CodeActionPriorityEx PriorityGetterDelegate(CodeAction? _obj);

        private delegate CodeAction CreateDelegate0(String title, ImmutableArray<CodeAction> nestedActions, Boolean isInlinable);
        private delegate CodeAction CreateDelegate1(String title, Func<CancellationToken, Task<Document>> createChangedDocument, String? equivalenceKey, CodeActionPriorityEx priority);
        private delegate CodeAction CreateDelegate2(String title, Func<CancellationToken, Task<Solution>> createChangedSolution, String? equivalenceKey, CodeActionPriorityEx priority);
        private delegate CodeAction CreateDelegate3(String title, ImmutableArray<CodeAction> nestedActions, Boolean isInlinable, CodeActionPriorityEx priority);

        private static readonly PriorityGetterDelegate PriorityGetterFunc;

        private static readonly CreateDelegate0 CreateFunc0;
        private static readonly CreateDelegate1 CreateFunc1;
        private static readonly CreateDelegate2 CreateFunc2;
        private static readonly CreateDelegate3 CreateFunc3;

        static CodeActionExtensions()
        {
            WrappedType = LightupHelper.FindType(WrappedTypeName);

            PriorityGetterFunc = LightupHelper.CreateInstanceGetAccessor<PriorityGetterDelegate>(WrappedType, nameof(Priority));

            CreateFunc0 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(WrappedType, nameof(Create));
            CreateFunc1 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate1>(WrappedType, nameof(Create));
            CreateFunc2 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate2>(WrappedType, nameof(Create));
            CreateFunc3 = LightupHelper.CreateStaticMethodAccessor<CreateDelegate3>(WrappedType, nameof(Create));
        }

        /// <summary>Property added in version 4.8.0.0 of Roslyn.</summary>
        public static CodeActionPriorityEx Priority(this CodeAction _obj)
            => PriorityGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0 of Roslyn.</summary>
        public static CodeAction Create(String title, ImmutableArray<CodeAction> nestedActions, Boolean isInlinable)
            => CreateFunc0(title, nestedActions, isInlinable);

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static CodeAction Create(String title, Func<CancellationToken, Task<Document>> createChangedDocument, String? equivalenceKey, CodeActionPriorityEx priority)
            => CreateFunc1(title, createChangedDocument, equivalenceKey, priority);

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static CodeAction Create(String title, Func<CancellationToken, Task<Solution>> createChangedSolution, String? equivalenceKey, CodeActionPriorityEx priority)
            => CreateFunc2(title, createChangedSolution, equivalenceKey, priority);

        /// <summary>Method added in version 4.8.0.0 of Roslyn.</summary>
        public static CodeAction Create(String title, ImmutableArray<CodeAction> nestedActions, Boolean isInlinable, CodeActionPriorityEx priority)
            => CreateFunc3(title, nestedActions, isInlinable, priority);
    }
}
