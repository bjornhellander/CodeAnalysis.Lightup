// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeActions.Lightup;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Host.Lightup;
using Microsoft.CodeAnalysis.Lightup;
using Microsoft.CodeAnalysis.Options;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.CodeAnalysis.Simplification.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Simplification.Simplifier.</summary>
    public static class SimplifierEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Simplification.Simplifier";

        private delegate SyntaxAnnotation AddImportsAnnotationGetterDelegate();

        private static readonly AddImportsAnnotationGetterDelegate AddImportsAnnotationGetterFunc;

        static SimplifierEx()
        {
            var wrappedType = LightupHelper.FindType(WrappedTypeName);

            AddImportsAnnotationGetterFunc = LightupHelper.CreateStaticGetAccessor<AddImportsAnnotationGetterDelegate>(wrappedType, nameof(AddImportsAnnotation));
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static SyntaxAnnotation AddImportsAnnotation()
            => AddImportsAnnotationGetterFunc();
    }
}
