// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Editing.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Editing.SyntaxGenerator.</summary>
    public static partial class SyntaxGeneratorExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Editing.SyntaxGenerator";

        private delegate Microsoft.CodeAnalysis.SyntaxNode ConditionalAccessExpressionDelegate0(Microsoft.CodeAnalysis.Editing.SyntaxGenerator? _obj, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode whenNotNull);
        private delegate Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpressionDelegate1(Microsoft.CodeAnalysis.Editing.SyntaxGenerator? _obj, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments);
        private delegate Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpressionDelegate2(Microsoft.CodeAnalysis.Editing.SyntaxGenerator? _obj, params Microsoft.CodeAnalysis.SyntaxNode[] arguments);
        private delegate Microsoft.CodeAnalysis.SyntaxNode MemberBindingExpressionDelegate3(Microsoft.CodeAnalysis.Editing.SyntaxGenerator? _obj, Microsoft.CodeAnalysis.SyntaxNode name);

        private static readonly ConditionalAccessExpressionDelegate0 ConditionalAccessExpressionFunc0;
        private static readonly ElementBindingExpressionDelegate1 ElementBindingExpressionFunc1;
        private static readonly ElementBindingExpressionDelegate2 ElementBindingExpressionFunc2;
        private static readonly MemberBindingExpressionDelegate3 MemberBindingExpressionFunc3;

        static SyntaxGeneratorExtensions()
        {
            var wrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConditionalAccessExpressionFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ConditionalAccessExpressionDelegate0>(wrappedType, "ConditionalAccessExpression", "expressionSyntaxNode", "whenNotNullSyntaxNode");
            ElementBindingExpressionFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ElementBindingExpressionDelegate1>(wrappedType, "ElementBindingExpression", "argumentsIEnumerable`1");
            ElementBindingExpressionFunc2 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ElementBindingExpressionDelegate2>(wrappedType, "ElementBindingExpression", "argumentsSyntaxNode[]");
            MemberBindingExpressionFunc3 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<MemberBindingExpressionDelegate3>(wrappedType, "MemberBindingExpression", "nameSyntaxNode");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxNode ConditionalAccessExpression(this Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode whenNotNull)
            => ConditionalAccessExpressionFunc0(_obj, expression, whenNotNull);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpression(this Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments)
            => ElementBindingExpressionFunc1(_obj, arguments);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpression(this Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, params Microsoft.CodeAnalysis.SyntaxNode[] arguments)
            => ElementBindingExpressionFunc2(_obj, arguments);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxNode MemberBindingExpression(this Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, Microsoft.CodeAnalysis.SyntaxNode name)
            => MemberBindingExpressionFunc3(_obj, name);
    }
}
