// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.ISupportedChangesService. Added in version 4.4.0.0.</summary>
    public readonly partial struct ISupportedChangesServiceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ISupportedChangesService";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Boolean CanApplyChangeDelegate0(Microsoft.CodeAnalysis.Host.IWorkspaceService? _obj, Microsoft.CodeAnalysis.ApplyChangesKind kind);
        private delegate System.Boolean CanApplyCompilationOptionChangeDelegate1(Microsoft.CodeAnalysis.Host.IWorkspaceService? _obj, Microsoft.CodeAnalysis.CompilationOptions oldOptions, Microsoft.CodeAnalysis.CompilationOptions newOptions, Microsoft.CodeAnalysis.Project project);
        private delegate System.Boolean CanApplyParseOptionChangeDelegate2(Microsoft.CodeAnalysis.Host.IWorkspaceService? _obj, Microsoft.CodeAnalysis.ParseOptions oldOptions, Microsoft.CodeAnalysis.ParseOptions newOptions, Microsoft.CodeAnalysis.Project project);

        private static readonly CanApplyChangeDelegate0 CanApplyChangeFunc0;
        private static readonly CanApplyCompilationOptionChangeDelegate1 CanApplyCompilationOptionChangeFunc1;
        private static readonly CanApplyParseOptionChangeDelegate2 CanApplyParseOptionChangeFunc2;

        private readonly Microsoft.CodeAnalysis.Host.IWorkspaceService? wrappedObject;

        static ISupportedChangesServiceWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            CanApplyChangeFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<CanApplyChangeDelegate0>(WrappedType, "CanApplyChange", "kindApplyChangesKind");
            CanApplyCompilationOptionChangeFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<CanApplyCompilationOptionChangeDelegate1>(WrappedType, "CanApplyCompilationOptionChange", "oldOptionsCompilationOptions", "newOptionsCompilationOptions", "projectProject");
            CanApplyParseOptionChangeFunc2 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<CanApplyParseOptionChangeDelegate2>(WrappedType, "CanApplyParseOptionChange", "oldOptionsParseOptions", "newOptionsParseOptions", "projectProject");
        }

        private ISupportedChangesServiceWrapper(Microsoft.CodeAnalysis.Host.IWorkspaceService? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ISupportedChangesServiceWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<Microsoft.CodeAnalysis.Host.IWorkspaceService>(obj, WrappedType);
            return new ISupportedChangesServiceWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.Host.IWorkspaceService? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean CanApplyChange(Microsoft.CodeAnalysis.ApplyChangesKind kind)
            => CanApplyChangeFunc0(wrappedObject, kind);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean CanApplyCompilationOptionChange(Microsoft.CodeAnalysis.CompilationOptions oldOptions, Microsoft.CodeAnalysis.CompilationOptions newOptions, Microsoft.CodeAnalysis.Project project)
            => CanApplyCompilationOptionChangeFunc1(wrappedObject, oldOptions, newOptions, project);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean CanApplyParseOptionChange(Microsoft.CodeAnalysis.ParseOptions oldOptions, Microsoft.CodeAnalysis.ParseOptions newOptions, Microsoft.CodeAnalysis.Project project)
            => CanApplyParseOptionChangeFunc2(wrappedObject, oldOptions, newOptions, project);
    }
}
