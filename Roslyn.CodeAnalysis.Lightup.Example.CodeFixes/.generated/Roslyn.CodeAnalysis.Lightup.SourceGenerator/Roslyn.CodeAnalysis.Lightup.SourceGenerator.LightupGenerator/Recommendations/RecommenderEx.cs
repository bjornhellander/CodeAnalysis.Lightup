// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Recommendations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Recommendations.Recommender.</summary>
    public static partial class RecommenderEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Recommendations.Recommender";

        private delegate System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>> GetRecommendedSymbolsAtPositionAsyncDelegate0(Microsoft.CodeAnalysis.Document document, System.Int32 position, Microsoft.CodeAnalysis.Options.OptionSet? options, System.Threading.CancellationToken cancellationToken);

        private static readonly GetRecommendedSymbolsAtPositionAsyncDelegate0 GetRecommendedSymbolsAtPositionAsyncFunc0;

        static RecommenderEx()
        {
            var wrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetRecommendedSymbolsAtPositionAsyncFunc0 = WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<GetRecommendedSymbolsAtPositionAsyncDelegate0>(wrappedType, "GetRecommendedSymbolsAtPositionAsync", "documentDocument", "positionInt32", "optionsOptionSet", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>> GetRecommendedSymbolsAtPositionAsync(Microsoft.CodeAnalysis.Document document, System.Int32 position, Microsoft.CodeAnalysis.Options.OptionSet? options, System.Threading.CancellationToken cancellationToken)
            => GetRecommendedSymbolsAtPositionAsyncFunc0(document, position, options, cancellationToken);
    }
}
