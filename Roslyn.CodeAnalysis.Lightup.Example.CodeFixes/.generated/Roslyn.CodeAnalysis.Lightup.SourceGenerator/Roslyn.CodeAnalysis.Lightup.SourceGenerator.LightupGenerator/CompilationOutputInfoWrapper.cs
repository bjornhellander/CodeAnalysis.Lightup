// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CompilationOutputInfo. Added in version 3.8.0.0.</summary>
    public readonly partial struct CompilationOutputInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOutputInfo";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.String? AssemblyPathGetterDelegate(System.Object? _obj);

        private delegate System.Boolean EqualsDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper other);
        private delegate Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper WithAssemblyPathDelegate1(System.Object? _obj, System.String? path);

        private static readonly AssemblyPathGetterDelegate AssemblyPathGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly WithAssemblyPathDelegate1 WithAssemblyPathFunc1;

        private readonly System.Object? wrappedObject;

        static CompilationOutputInfoWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            AssemblyPathGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<AssemblyPathGetterDelegate>(WrappedType, nameof(AssemblyPath));

            EqualsFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "otherCompilationOutputInfo");
            WithAssemblyPathFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithAssemblyPathDelegate1>(WrappedType, "WithAssemblyPath", "pathString");
        }

        private CompilationOutputInfoWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.String? AssemblyPath
        {
            get => AssemblyPathGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static CompilationOutputInfoWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new CompilationOutputInfoWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper WithAssemblyPath(System.String? path)
            => WithAssemblyPathFunc1(wrappedObject, path);
    }
}
