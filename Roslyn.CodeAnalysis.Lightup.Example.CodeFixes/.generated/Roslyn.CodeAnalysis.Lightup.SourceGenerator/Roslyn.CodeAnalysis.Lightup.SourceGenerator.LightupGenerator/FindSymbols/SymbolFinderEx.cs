// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.FindSymbols.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.</summary>
    public static partial class SymbolFinderEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FindSymbols.SymbolFinder";

        private delegate System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindDerivedClassesAsyncDelegate0(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken);
        private delegate System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindDerivedInterfacesAsyncDelegate1(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken);
        private delegate System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindImplementationsAsyncDelegate2(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken);

        private static readonly FindDerivedClassesAsyncDelegate0 FindDerivedClassesAsyncFunc0;
        private static readonly FindDerivedInterfacesAsyncDelegate1 FindDerivedInterfacesAsyncFunc1;
        private static readonly FindImplementationsAsyncDelegate2 FindImplementationsAsyncFunc2;

        static SymbolFinderEx()
        {
            var wrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            FindDerivedClassesAsyncFunc0 = WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<FindDerivedClassesAsyncDelegate0>(wrappedType, "FindDerivedClassesAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
            FindDerivedInterfacesAsyncFunc1 = WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<FindDerivedInterfacesAsyncDelegate1>(wrappedType, "FindDerivedInterfacesAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
            FindImplementationsAsyncFunc2 = WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<FindImplementationsAsyncDelegate2>(wrappedType, "FindImplementationsAsync", "typeINamedTypeSymbol", "solutionSolution", "transitiveBoolean", "projectsIImmutableSet`1", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindDerivedClassesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken)
            => FindDerivedClassesAsyncFunc0(type, solution, transitive, projects, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindDerivedInterfacesAsync(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken)
            => FindDerivedInterfacesAsyncFunc1(type, solution, transitive, projects, cancellationToken);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.INamedTypeSymbol>> FindImplementationsAsync(Microsoft.CodeAnalysis.INamedTypeSymbol type, Microsoft.CodeAnalysis.Solution solution, System.Boolean transitive, System.Collections.Immutable.IImmutableSet<Microsoft.CodeAnalysis.Project>? projects, System.Threading.CancellationToken cancellationToken)
            => FindImplementationsAsyncFunc2(type, solution, transitive, projects, cancellationToken);
    }
}
