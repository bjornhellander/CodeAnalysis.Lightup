// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CodeFixes.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider. Added in version 4.0.0.0.</summary>
    public readonly partial struct DocumentBasedFixAllProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeActions.CodeAction> GetFixAsyncDelegate0(Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? _obj, Microsoft.CodeAnalysis.CodeFixes.FixAllContext fixAllContext);
        private delegate System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CodeFixes.FixAllScope> GetSupportedFixAllScopesDelegate1(Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? _obj);

        private static readonly GetFixAsyncDelegate0 GetFixAsyncFunc0;
        private static readonly GetSupportedFixAllScopesDelegate1 GetSupportedFixAllScopesFunc1;

        private readonly Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? wrappedObject;

        static DocumentBasedFixAllProviderWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetFixAsyncFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetFixAsyncDelegate0>(WrappedType, "GetFixAsync", "fixAllContextFixAllContext");
            GetSupportedFixAllScopesFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetSupportedFixAllScopesDelegate1>(WrappedType, "GetSupportedFixAllScopes");
        }

        private DocumentBasedFixAllProviderWrapper(Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CodeFixes.FixAllProvider?(DocumentBasedFixAllProviderWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static DocumentBasedFixAllProviderWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<Microsoft.CodeAnalysis.CodeFixes.FixAllProvider>(obj, WrappedType);
            return new DocumentBasedFixAllProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly System.Threading.Tasks.Task<Microsoft.CodeAnalysis.CodeActions.CodeAction> GetFixAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext fixAllContext)
            => GetFixAsyncFunc0(wrappedObject, fixAllContext);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CodeFixes.FixAllScope> GetSupportedFixAllScopes()
            => GetSupportedFixAllScopesFunc1(wrappedObject);
    }
}
