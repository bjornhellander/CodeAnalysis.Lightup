// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FileTextLoader.</summary>
    public static partial class FileTextLoaderExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FileTextLoader";

        private delegate System.Threading.Tasks.Task<Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsyncDelegate0(Microsoft.CodeAnalysis.FileTextLoader? _obj, Microsoft.CodeAnalysis.Lightup.LoadTextOptionsWrapper options, System.Threading.CancellationToken cancellationToken);

        private static readonly LoadTextAndVersionAsyncDelegate0 LoadTextAndVersionAsyncFunc0;

        static FileTextLoaderExtensions()
        {
            var wrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            LoadTextAndVersionAsyncFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<LoadTextAndVersionAsyncDelegate0>(wrappedType, "LoadTextAndVersionAsync", "optionsLoadTextOptions", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static System.Threading.Tasks.Task<Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsync(this Microsoft.CodeAnalysis.FileTextLoader _obj, Microsoft.CodeAnalysis.Lightup.LoadTextOptionsWrapper options, System.Threading.CancellationToken cancellationToken)
            => LoadTextAndVersionAsyncFunc0(_obj, options, cancellationToken);
    }
}
