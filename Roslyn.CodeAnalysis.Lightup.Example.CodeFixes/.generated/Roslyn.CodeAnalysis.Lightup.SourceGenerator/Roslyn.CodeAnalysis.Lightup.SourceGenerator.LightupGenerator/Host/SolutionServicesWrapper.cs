// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Host.SolutionServices. Added in version 4.4.0.0.</summary>
    public readonly partial struct SolutionServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.SolutionServices";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Collections.Generic.IEnumerable<System.String> SupportedLanguagesGetterDelegate(System.Object? _obj);

        private delegate Microsoft.CodeAnalysis.Host.Lightup.LanguageServicesWrapper GetLanguageServicesDelegate0(System.Object? _obj, System.String languageName);
        private delegate System.Boolean IsSupportedDelegate1(System.Object? _obj, System.String languageName);

        private static readonly SupportedLanguagesGetterDelegate SupportedLanguagesGetterFunc;

        private static readonly GetLanguageServicesDelegate0 GetLanguageServicesFunc0;
        private static readonly IsSupportedDelegate1 IsSupportedFunc1;

        private readonly System.Object? wrappedObject;

        static SolutionServicesWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            SupportedLanguagesGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SupportedLanguagesGetterDelegate>(WrappedType, nameof(SupportedLanguages));

            GetLanguageServicesFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetLanguageServicesDelegate0>(WrappedType, "GetLanguageServices", "languageNameString");
            IsSupportedFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<IsSupportedDelegate1>(WrappedType, "IsSupported", "languageNameString");
        }

        private SolutionServicesWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Generic.IEnumerable<System.String> SupportedLanguages
        {
            get => SupportedLanguagesGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SolutionServicesWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new SolutionServicesWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Host.Lightup.LanguageServicesWrapper GetLanguageServices(System.String languageName)
            => GetLanguageServicesFunc0(wrappedObject, languageName);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean IsSupported(System.String languageName)
            => IsSupportedFunc1(wrappedObject, languageName);
    }
}
