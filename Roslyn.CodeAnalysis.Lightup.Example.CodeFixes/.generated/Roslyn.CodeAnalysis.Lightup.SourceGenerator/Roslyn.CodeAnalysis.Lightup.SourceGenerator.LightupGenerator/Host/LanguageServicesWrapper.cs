// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Host.LanguageServices. Added in version 4.4.0.0.</summary>
    public readonly partial struct LanguageServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.LanguageServices";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.String LanguageGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper SolutionServicesGetterDelegate(System.Object? _obj);

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly SolutionServicesGetterDelegate SolutionServicesGetterFunc;

        private readonly System.Object? wrappedObject;

        static LanguageServicesWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            LanguageGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(WrappedType, nameof(Language));
            SolutionServicesGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SolutionServicesGetterDelegate>(WrappedType, nameof(SolutionServices));
        }

        private LanguageServicesWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.String Language
        {
            get => LanguageGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper SolutionServices
        {
            get => SolutionServicesGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static LanguageServicesWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new LanguageServicesWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;
    }
}
