// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Rename.SymbolRenameOptions. Added in version 4.4.0.0.</summary>
    public readonly partial struct SymbolRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.SymbolRenameOptions";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate SymbolRenameOptionsWrapper ConstructorDelegate0(System.Boolean RenameOverloads, System.Boolean RenameInStrings, System.Boolean RenameInComments, System.Boolean RenameFile);

        private delegate System.Boolean RenameFileGetterDelegate(System.Object? _obj);
        private delegate void RenameFileSetterDelegate(System.Object? _obj, System.Boolean _value);
        private delegate System.Boolean RenameInCommentsGetterDelegate(System.Object? _obj);
        private delegate void RenameInCommentsSetterDelegate(System.Object? _obj, System.Boolean _value);
        private delegate System.Boolean RenameInStringsGetterDelegate(System.Object? _obj);
        private delegate void RenameInStringsSetterDelegate(System.Object? _obj, System.Boolean _value);
        private delegate System.Boolean RenameOverloadsGetterDelegate(System.Object? _obj);
        private delegate void RenameOverloadsSetterDelegate(System.Object? _obj, System.Boolean _value);

        private delegate void DeconstructDelegate0(System.Object? _obj, out System.Boolean RenameOverloads, out System.Boolean RenameInStrings, out System.Boolean RenameInComments, out System.Boolean RenameFile);
        private delegate System.Boolean EqualsDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.Rename.Lightup.SymbolRenameOptionsWrapper other);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly RenameFileGetterDelegate RenameFileGetterFunc;
        private static readonly RenameFileSetterDelegate RenameFileSetterFunc;
        private static readonly RenameInCommentsGetterDelegate RenameInCommentsGetterFunc;
        private static readonly RenameInCommentsSetterDelegate RenameInCommentsSetterFunc;
        private static readonly RenameInStringsGetterDelegate RenameInStringsGetterFunc;
        private static readonly RenameInStringsSetterDelegate RenameInStringsSetterFunc;
        private static readonly RenameOverloadsGetterDelegate RenameOverloadsGetterFunc;
        private static readonly RenameOverloadsSetterDelegate RenameOverloadsSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly System.Object? wrappedObject;

        static SymbolRenameOptionsWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "RenameOverloadsBoolean", "RenameInStringsBoolean", "RenameInCommentsBoolean", "RenameFileBoolean");

            RenameFileGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameFileGetterDelegate>(WrappedType, nameof(RenameFile));
            RenameFileSetterFunc = WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameFileSetterDelegate>(WrappedType, nameof(RenameFile));
            RenameInCommentsGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameInCommentsGetterDelegate>(WrappedType, nameof(RenameInComments));
            RenameInCommentsSetterFunc = WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameInCommentsSetterDelegate>(WrappedType, nameof(RenameInComments));
            RenameInStringsGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameInStringsGetterDelegate>(WrappedType, nameof(RenameInStrings));
            RenameInStringsSetterFunc = WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameInStringsSetterDelegate>(WrappedType, nameof(RenameInStrings));
            RenameOverloadsGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameOverloadsGetterDelegate>(WrappedType, nameof(RenameOverloads));
            RenameOverloadsSetterFunc = WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameOverloadsSetterDelegate>(WrappedType, nameof(RenameOverloads));

            DeconstructFunc0 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RenameOverloadsBoolean&", "RenameInStringsBoolean&", "RenameInCommentsBoolean&", "RenameFileBoolean&");
            EqualsFunc1 = WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate1>(WrappedType, "Equals", "otherSymbolRenameOptions");
        }

        private SymbolRenameOptionsWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static SymbolRenameOptionsWrapper Create(System.Boolean RenameOverloads, System.Boolean RenameInStrings, System.Boolean RenameInComments, System.Boolean RenameFile)
            => ConstructorFunc0(RenameOverloads, RenameInStrings, RenameInComments, RenameFile);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameFile
        {
            get => RenameFileGetterFunc(wrappedObject);
            set => RenameFileSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameInComments
        {
            get => RenameInCommentsGetterFunc(wrappedObject);
            set => RenameInCommentsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameInStrings
        {
            get => RenameInStringsGetterFunc(wrappedObject);
            set => RenameInStringsSetterFunc(wrappedObject, value);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Boolean RenameOverloads
        {
            get => RenameOverloadsGetterFunc(wrappedObject);
            set => RenameOverloadsSetterFunc(wrappedObject, value);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SymbolRenameOptionsWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new SymbolRenameOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Deconstruct(out System.Boolean RenameOverloads, out System.Boolean RenameInStrings, out System.Boolean RenameInComments, out System.Boolean RenameFile)
            => DeconstructFunc0(wrappedObject, out RenameOverloads, out RenameInStrings, out RenameInComments, out RenameFile);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.Rename.Lightup.SymbolRenameOptionsWrapper other)
            => EqualsFunc1(wrappedObject, other);
    }
}
