// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.TextDocumentEventArgs. Added in version 4.4.0.0.</summary>
    public readonly partial struct TextDocumentEventArgsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.TextDocumentEventArgs";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate TextDocumentEventArgsWrapper ConstructorDelegate0(Microsoft.CodeAnalysis.TextDocument document);

        private delegate Microsoft.CodeAnalysis.TextDocument DocumentGetterDelegate(System.EventArgs? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly DocumentGetterDelegate DocumentGetterFunc;

        private readonly System.EventArgs? wrappedObject;

        static TextDocumentEventArgsWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "documentTextDocument");

            DocumentGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<DocumentGetterDelegate>(WrappedType, nameof(Document));
        }

        private TextDocumentEventArgsWrapper(System.EventArgs? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static TextDocumentEventArgsWrapper Create(Microsoft.CodeAnalysis.TextDocument document)
            => ConstructorFunc0(document);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.TextDocument Document
        {
            get => DocumentGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator System.EventArgs?(TextDocumentEventArgsWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static TextDocumentEventArgsWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<System.EventArgs>(obj, WrappedType);
            return new TextDocumentEventArgsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.EventArgs? Unwrap()
            => wrappedObject;
    }
}
