// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.TextDocumentEventArgs. Added in version 4.4.0.0.</summary>
    public readonly partial struct TextDocumentEventArgsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.TextDocumentEventArgs";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate TextDocumentEventArgsWrapper ConstructorDelegate0(global::Microsoft.CodeAnalysis.TextDocument document);

        private delegate global::Microsoft.CodeAnalysis.TextDocument DocumentGetterDelegate(global::System.EventArgs? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly DocumentGetterDelegate DocumentGetterFunc;

        private readonly global::System.EventArgs? wrappedObject;

        static TextDocumentEventArgsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "documentTextDocument");

            DocumentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<DocumentGetterDelegate>(WrappedType, nameof(Document));
        }

        private TextDocumentEventArgsWrapper(global::System.EventArgs? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static TextDocumentEventArgsWrapper Create(global::Microsoft.CodeAnalysis.TextDocument document)
            => ConstructorFunc0(document);

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly global::Microsoft.CodeAnalysis.TextDocument Document
        {
            get => DocumentGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::System.EventArgs?(TextDocumentEventArgsWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static TextDocumentEventArgsWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.As<global::System.EventArgs>(obj, WrappedType);
            return new TextDocumentEventArgsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.EventArgs? Unwrap()
            => wrappedObject;
    }
}
