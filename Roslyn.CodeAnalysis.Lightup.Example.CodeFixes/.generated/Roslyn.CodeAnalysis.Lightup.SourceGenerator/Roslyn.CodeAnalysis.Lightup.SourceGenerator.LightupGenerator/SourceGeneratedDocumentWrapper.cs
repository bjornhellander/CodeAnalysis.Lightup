// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SourceGeneratedDocument. Added in version 4.0.0.0.</summary>
    public readonly partial struct SourceGeneratedDocumentWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SourceGeneratedDocument";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.String HintNameGetterDelegate(Microsoft.CodeAnalysis.Document? _obj);

        private static readonly HintNameGetterDelegate HintNameGetterFunc;

        private readonly Microsoft.CodeAnalysis.Document? wrappedObject;

        static SourceGeneratedDocumentWrapper()
        {
            WrappedType = WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            HintNameGetterFunc = WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<HintNameGetterDelegate>(WrappedType, nameof(HintName));
        }

        private SourceGeneratedDocumentWrapper(Microsoft.CodeAnalysis.Document? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly System.String HintName
        {
            get => HintNameGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.Document?(SourceGeneratedDocumentWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SourceGeneratedDocumentWrapper As(System.Object? obj)
        {
            var obj2 = WorkspacesCommonLightupHelper.As<Microsoft.CodeAnalysis.Document>(obj, WrappedType);
            return new SourceGeneratedDocumentWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.Document? Unwrap()
            => wrappedObject;
    }
}
