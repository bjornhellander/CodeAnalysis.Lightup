// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation.</summary>
    public static partial class ISwitchExpressionOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation";

        private delegate System.Boolean IsExhaustiveGetterDelegate(Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation? _obj);

        private static readonly IsExhaustiveGetterDelegate IsExhaustiveGetterFunc;

        static ISwitchExpressionOperationExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            IsExhaustiveGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsExhaustiveGetterDelegate>(wrappedType, nameof(IsExhaustive));
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static System.Boolean IsExhaustive(this Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation _obj)
            => IsExhaustiveGetterFunc(_obj);
    }
}
