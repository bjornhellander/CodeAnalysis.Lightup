// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation.</summary>
    public static partial class ISwitchExpressionOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation";

        private delegate global::System.Boolean IsExhaustiveGetterDelegate(global::Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation? _obj);

        private static readonly IsExhaustiveGetterDelegate IsExhaustiveGetterFunc;

        static ISwitchExpressionOperationExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            IsExhaustiveGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsExhaustiveGetterDelegate>(wrappedType, nameof(IsExhaustive));
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static global::System.Boolean IsExhaustive(this global::Microsoft.CodeAnalysis.Operations.ISwitchExpressionOperation _obj)
            => IsExhaustiveGetterFunc(_obj);
    }
}
