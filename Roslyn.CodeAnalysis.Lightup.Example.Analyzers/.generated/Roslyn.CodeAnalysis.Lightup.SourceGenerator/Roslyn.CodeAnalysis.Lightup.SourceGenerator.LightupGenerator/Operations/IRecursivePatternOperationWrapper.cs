// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IRecursivePatternOperation. Added in version 3.8.0.0.</summary>
    public readonly partial struct IRecursivePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IRecursivePatternOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.ISymbol? DeclaredSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IPatternOperation> DeconstructionSubpatternsGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol? DeconstructSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ITypeSymbol MatchedTypeGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper> PropertySubpatternsGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly DeclaredSymbolGetterDelegate DeclaredSymbolGetterFunc;
        private static readonly DeconstructionSubpatternsGetterDelegate DeconstructionSubpatternsGetterFunc;
        private static readonly DeconstructSymbolGetterDelegate DeconstructSymbolGetterFunc;
        private static readonly MatchedTypeGetterDelegate MatchedTypeGetterFunc;
        private static readonly PropertySubpatternsGetterDelegate PropertySubpatternsGetterFunc;

        private readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static IRecursivePatternOperationWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            DeclaredSymbolGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<DeclaredSymbolGetterDelegate>(WrappedType, nameof(DeclaredSymbol));
            DeconstructionSubpatternsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<DeconstructionSubpatternsGetterDelegate>(WrappedType, nameof(DeconstructionSubpatterns));
            DeconstructSymbolGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<DeconstructSymbolGetterDelegate>(WrappedType, nameof(DeconstructSymbol));
            MatchedTypeGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<MatchedTypeGetterDelegate>(WrappedType, nameof(MatchedType));
            PropertySubpatternsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<PropertySubpatternsGetterDelegate>(WrappedType, nameof(PropertySubpatterns));
        }

        private IRecursivePatternOperationWrapper(Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? DeclaredSymbol
        {
            get => DeclaredSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.IPatternOperation> DeconstructionSubpatterns
        {
            get => DeconstructionSubpatternsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? DeconstructSymbol
        {
            get => DeconstructSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ITypeSymbol MatchedType
        {
            get => MatchedTypeGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper> PropertySubpatterns
        {
            get => PropertySubpatternsGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static IRecursivePatternOperationWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new IRecursivePatternOperationWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
