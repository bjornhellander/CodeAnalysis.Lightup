// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ISlicePatternOperation. Added in version 4.4.0.0.</summary>
    public readonly partial struct ISlicePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ISlicePatternOperation";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Operations.IPatternOperation? PatternGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate Microsoft.CodeAnalysis.ISymbol? SliceSymbolGetterDelegate(Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly PatternGetterDelegate PatternGetterFunc;
        private static readonly SliceSymbolGetterDelegate SliceSymbolGetterFunc;

        private readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static ISlicePatternOperationWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            PatternGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));
            SliceSymbolGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<SliceSymbolGetterDelegate>(WrappedType, nameof(SliceSymbol));
        }

        private ISlicePatternOperationWrapper(Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Operations.IPatternOperation? Pattern
        {
            get => PatternGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.ISymbol? SliceSymbol
        {
            get => SliceSymbolGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ISlicePatternOperationWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new ISlicePatternOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
