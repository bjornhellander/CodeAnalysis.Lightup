// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Operations.OperationExtensions.</summary>
    public static partial class OperationExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationExtensions";

        private delegate Microsoft.CodeAnalysis.IMethodSymbol GetFunctionPointerSignatureDelegate0(Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper functionPointer);

        private static readonly GetFunctionPointerSignatureDelegate0 GetFunctionPointerSignatureFunc0;

        static OperationExtensionsEx()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            GetFunctionPointerSignatureFunc0 = CommonLightupHelper.CreateStaticMethodAccessor<GetFunctionPointerSignatureDelegate0>(wrappedType, "GetFunctionPointerSignature", "functionPointerIFunctionPointerInvocationOperation");
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.IMethodSymbol GetFunctionPointerSignature(this Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper functionPointer)
            => GetFunctionPointerSignatureFunc0(functionPointer);
    }
}
