// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IConversionOperation.</summary>
    public static partial class IConversionOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IConversionOperation";

        private delegate Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToTypeGetterDelegate(Microsoft.CodeAnalysis.Operations.IConversionOperation? _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;

        static IConversionOperationExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(wrappedType, nameof(ConstrainedToType));
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToType(this Microsoft.CodeAnalysis.Operations.IConversionOperation _obj)
            => ConstrainedToTypeGetterFunc(_obj);
    }
}
