// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions. Added in version 3.8.0.0.</summary>
    public readonly partial struct AnalyzerConfigOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.StringComparer KeyComparerGetterDelegate();

        private delegate System.Collections.Generic.IEnumerable<System.String> KeysGetterDelegate(System.Object? _obj);

        private delegate System.Boolean TryGetValueDelegate0(System.Object? _obj, System.String key, out System.String? value);

        private static readonly KeyComparerGetterDelegate KeyComparerGetterFunc;

        private static readonly KeysGetterDelegate KeysGetterFunc;

        private static readonly TryGetValueDelegate0 TryGetValueFunc0;

        private readonly System.Object? wrappedObject;

        static AnalyzerConfigOptionsWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            KeyComparerGetterFunc = CommonLightupHelper.CreateStaticGetAccessor<KeyComparerGetterDelegate>(WrappedType, nameof(KeyComparer));

            KeysGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<KeysGetterDelegate>(WrappedType, nameof(Keys));

            TryGetValueFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<TryGetValueDelegate0>(WrappedType, "TryGetValue", "keyString", "valueString&");
        }

        private AnalyzerConfigOptionsWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.StringComparer KeyComparer
        {
            get => KeyComparerGetterFunc();
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Generic.IEnumerable<System.String> Keys
        {
            get => KeysGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AnalyzerConfigOptionsWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new AnalyzerConfigOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean TryGetValue(System.String key, out System.String? value)
            => TryGetValueFunc0(wrappedObject, key, out value);
    }
}
