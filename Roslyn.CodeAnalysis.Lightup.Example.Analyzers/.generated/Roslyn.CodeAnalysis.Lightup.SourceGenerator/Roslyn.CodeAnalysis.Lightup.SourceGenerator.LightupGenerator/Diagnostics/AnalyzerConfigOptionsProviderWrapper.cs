// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider. Added in version 3.8.0.0.</summary>
    public readonly partial struct AnalyzerConfigOptionsProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptionsProvider";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GlobalOptionsGetterDelegate(System.Object? _obj);

        private delegate Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GetOptionsDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.SyntaxTree tree);
        private delegate Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GetOptionsDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.AdditionalText textFile);

        private static readonly GlobalOptionsGetterDelegate GlobalOptionsGetterFunc;

        private static readonly GetOptionsDelegate0 GetOptionsFunc0;
        private static readonly GetOptionsDelegate1 GetOptionsFunc1;

        private readonly System.Object? wrappedObject;

        static AnalyzerConfigOptionsProviderWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            GlobalOptionsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<GlobalOptionsGetterDelegate>(WrappedType, nameof(GlobalOptions));

            GetOptionsFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<GetOptionsDelegate0>(WrappedType, "GetOptions", "treeSyntaxTree");
            GetOptionsFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<GetOptionsDelegate1>(WrappedType, "GetOptions", "textFileAdditionalText");
        }

        private AnalyzerConfigOptionsProviderWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GlobalOptions
        {
            get => GlobalOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AnalyzerConfigOptionsProviderWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new AnalyzerConfigOptionsProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GetOptions(Microsoft.CodeAnalysis.SyntaxTree tree)
            => GetOptionsFunc0(wrappedObject, tree);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Diagnostics.Lightup.AnalyzerConfigOptionsWrapper GetOptions(Microsoft.CodeAnalysis.AdditionalText textFile)
            => GetOptionsFunc1(wrappedObject, textFile);
    }
}
