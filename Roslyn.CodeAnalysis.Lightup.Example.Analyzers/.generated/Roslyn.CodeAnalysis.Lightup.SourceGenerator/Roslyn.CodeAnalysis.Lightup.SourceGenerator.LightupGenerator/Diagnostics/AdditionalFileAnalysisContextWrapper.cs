// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext. Added in version 3.8.0.0.</summary>
    public readonly partial struct AdditionalFileAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.AdditionalText AdditionalFileGetterDelegate(System.Object? _obj);
        private delegate System.Threading.CancellationToken CancellationTokenGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Compilation CompilationGetterDelegate(System.Object? _obj);
        private delegate System.Nullable<Microsoft.CodeAnalysis.Text.TextSpan> FilterSpanGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions OptionsGetterDelegate(System.Object? _obj);

        private delegate void ReportDiagnosticDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.Diagnostic diagnostic);

        private static readonly AdditionalFileGetterDelegate AdditionalFileGetterFunc;
        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly FilterSpanGetterDelegate FilterSpanGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;

        private static readonly ReportDiagnosticDelegate0 ReportDiagnosticFunc0;

        private readonly System.Object? wrappedObject;

        static AdditionalFileAnalysisContextWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            AdditionalFileGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<AdditionalFileGetterDelegate>(WrappedType, nameof(AdditionalFile));
            CancellationTokenGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CompilationGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CompilationGetterDelegate>(WrappedType, nameof(Compilation));
            FilterSpanGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<FilterSpanGetterDelegate>(WrappedType, nameof(FilterSpan));
            OptionsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));

            ReportDiagnosticFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<ReportDiagnosticDelegate0>(WrappedType, "ReportDiagnostic", "diagnosticDiagnostic");
        }

        private AdditionalFileAnalysisContextWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.AdditionalText AdditionalFile
        {
            get => AdditionalFileGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Threading.CancellationToken CancellationToken
        {
            get => CancellationTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Compilation Compilation
        {
            get => CompilationGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public readonly System.Nullable<Microsoft.CodeAnalysis.Text.TextSpan> FilterSpan
        {
            get => FilterSpanGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options
        {
            get => OptionsGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AdditionalFileAnalysisContextWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new AdditionalFileAnalysisContextWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic)
            => ReportDiagnosticFunc0(wrappedObject, diagnostic);
    }
}
