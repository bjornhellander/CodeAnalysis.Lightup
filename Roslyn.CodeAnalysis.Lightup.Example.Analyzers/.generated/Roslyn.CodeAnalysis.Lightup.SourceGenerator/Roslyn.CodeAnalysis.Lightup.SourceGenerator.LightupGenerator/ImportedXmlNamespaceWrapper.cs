// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.ImportedXmlNamespace. Added in version 4.4.0.0.</summary>
    public readonly partial struct ImportedXmlNamespaceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedXmlNamespace";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReferenceGetterDelegate(System.Object? _obj);
        private delegate System.String XmlNamespaceGetterDelegate(System.Object? _obj);

        private static readonly DeclaringSyntaxReferenceGetterDelegate DeclaringSyntaxReferenceGetterFunc;
        private static readonly XmlNamespaceGetterDelegate XmlNamespaceGetterFunc;

        private readonly System.Object? wrappedObject;

        static ImportedXmlNamespaceWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<DeclaringSyntaxReferenceGetterDelegate>(WrappedType, nameof(DeclaringSyntaxReference));
            XmlNamespaceGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<XmlNamespaceGetterDelegate>(WrappedType, nameof(XmlNamespace));
        }

        private ImportedXmlNamespaceWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReference
        {
            get => DeclaringSyntaxReferenceGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.String XmlNamespace
        {
            get => XmlNamespaceGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ImportedXmlNamespaceWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new ImportedXmlNamespaceWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;
    }
}
