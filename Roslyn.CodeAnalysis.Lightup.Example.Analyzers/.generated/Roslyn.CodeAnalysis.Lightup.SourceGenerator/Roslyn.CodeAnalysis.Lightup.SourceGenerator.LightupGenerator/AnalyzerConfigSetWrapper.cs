// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.AnalyzerConfigSet. Added in version 3.8.0.0.</summary>
    public readonly partial struct AnalyzerConfigSetWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigSet";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Lightup.AnalyzerConfigOptionsResultWrapper GlobalConfigOptionsGetterDelegate(System.Object? _obj);

        private delegate Microsoft.CodeAnalysis.Lightup.AnalyzerConfigOptionsResultWrapper GetOptionsForSourcePathDelegate0(System.Object? _obj, System.String sourcePath);

        private static readonly GlobalConfigOptionsGetterDelegate GlobalConfigOptionsGetterFunc;

        private static readonly GetOptionsForSourcePathDelegate0 GetOptionsForSourcePathFunc0;

        private readonly System.Object? wrappedObject;

        static AnalyzerConfigSetWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            GlobalConfigOptionsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<GlobalConfigOptionsGetterDelegate>(WrappedType, nameof(GlobalConfigOptions));

            GetOptionsForSourcePathFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<GetOptionsForSourcePathDelegate0>(WrappedType, "GetOptionsForSourcePath", "sourcePathString");
        }

        private AnalyzerConfigSetWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.AnalyzerConfigOptionsResultWrapper GlobalConfigOptions
        {
            get => GlobalConfigOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AnalyzerConfigSetWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new AnalyzerConfigSetWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.AnalyzerConfigOptionsResultWrapper GetOptionsForSourcePath(System.String sourcePath)
            => GetOptionsForSourcePathFunc0(wrappedObject, sourcePath);
    }
}
