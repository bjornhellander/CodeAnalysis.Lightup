// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
public partial class IOperationExtensions {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList. Added in version 4.4.0.0.</summary>
    public readonly partial struct OperationListWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Int32 CountGetterDelegate(System.Object? _obj);

        private delegate System.Boolean AnyDelegate0(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.IOperation FirstDelegate1(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.IOperationExtensions.OperationListWrapper.EnumeratorWrapper GetEnumeratorDelegate2(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.IOperation LastDelegate3(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.IOperationExtensions.OperationListWrapper.ReversedWrapper ReverseDelegate4(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> ToImmutableArrayDelegate5(System.Object? _obj);

        private static readonly CountGetterDelegate CountGetterFunc;

        private static readonly AnyDelegate0 AnyFunc0;
        private static readonly FirstDelegate1 FirstFunc1;
        private static readonly GetEnumeratorDelegate2 GetEnumeratorFunc2;
        private static readonly LastDelegate3 LastFunc3;
        private static readonly ReverseDelegate4 ReverseFunc4;
        private static readonly ToImmutableArrayDelegate5 ToImmutableArrayFunc5;

        private readonly System.Object? wrappedObject;

        static OperationListWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            CountGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CountGetterDelegate>(WrappedType, nameof(Count));

            AnyFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<AnyDelegate0>(WrappedType, "Any");
            FirstFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<FirstDelegate1>(WrappedType, "First");
            GetEnumeratorFunc2 = CommonLightupHelper.CreateInstanceMethodAccessor<GetEnumeratorDelegate2>(WrappedType, "GetEnumerator");
            LastFunc3 = CommonLightupHelper.CreateInstanceMethodAccessor<LastDelegate3>(WrappedType, "Last");
            ReverseFunc4 = CommonLightupHelper.CreateInstanceMethodAccessor<ReverseDelegate4>(WrappedType, "Reverse");
            ToImmutableArrayFunc5 = CommonLightupHelper.CreateInstanceMethodAccessor<ToImmutableArrayDelegate5>(WrappedType, "ToImmutableArray");
        }

        private OperationListWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Int32 Count
        {
            get => CountGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static OperationListWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new OperationListWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Boolean Any()
            => AnyFunc0(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation First()
            => FirstFunc1(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.IOperationExtensions.OperationListWrapper.EnumeratorWrapper GetEnumerator()
            => GetEnumeratorFunc2(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IOperation Last()
            => LastFunc3(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Lightup.IOperationExtensions.OperationListWrapper.ReversedWrapper Reverse()
            => ReverseFunc4(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> ToImmutableArray()
            => ToImmutableArrayFunc5(wrappedObject);
    }
}
}
