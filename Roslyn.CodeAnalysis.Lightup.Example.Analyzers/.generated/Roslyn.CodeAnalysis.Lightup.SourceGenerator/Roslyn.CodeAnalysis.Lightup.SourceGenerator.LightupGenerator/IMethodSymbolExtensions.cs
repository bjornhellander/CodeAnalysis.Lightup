// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IMethodSymbol.</summary>
    public static partial class IMethodSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IMethodSymbol";

        private delegate System.Reflection.Metadata.SignatureCallingConvention CallingConventionGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Boolean IsConditionalGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Boolean IsInitOnlyGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Boolean IsPartialDefinitionGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Boolean IsReadOnlyGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Reflection.MethodImplAttributes MethodImplementationFlagsGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReceiverNullableAnnotationGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReturnNullableAnnotationGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> UnmanagedCallingConventionTypesGetterDelegate(Microsoft.CodeAnalysis.IMethodSymbol? _obj);

        private delegate Microsoft.CodeAnalysis.IMethodSymbol ConstructDelegate0(Microsoft.CodeAnalysis.IMethodSymbol? _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly CallingConventionGetterDelegate CallingConventionGetterFunc;
        private static readonly IsConditionalGetterDelegate IsConditionalGetterFunc;
        private static readonly IsInitOnlyGetterDelegate IsInitOnlyGetterFunc;
        private static readonly IsPartialDefinitionGetterDelegate IsPartialDefinitionGetterFunc;
        private static readonly IsReadOnlyGetterDelegate IsReadOnlyGetterFunc;
        private static readonly MethodImplementationFlagsGetterDelegate MethodImplementationFlagsGetterFunc;
        private static readonly ReceiverNullableAnnotationGetterDelegate ReceiverNullableAnnotationGetterFunc;
        private static readonly ReturnNullableAnnotationGetterDelegate ReturnNullableAnnotationGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;
        private static readonly UnmanagedCallingConventionTypesGetterDelegate UnmanagedCallingConventionTypesGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static IMethodSymbolExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            CallingConventionGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CallingConventionGetterDelegate>(wrappedType, nameof(CallingConvention));
            IsConditionalGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsConditionalGetterDelegate>(wrappedType, nameof(IsConditional));
            IsInitOnlyGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsInitOnlyGetterDelegate>(wrappedType, nameof(IsInitOnly));
            IsPartialDefinitionGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsPartialDefinitionGetterDelegate>(wrappedType, nameof(IsPartialDefinition));
            IsReadOnlyGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsReadOnlyGetterDelegate>(wrappedType, nameof(IsReadOnly));
            MethodImplementationFlagsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<MethodImplementationFlagsGetterDelegate>(wrappedType, nameof(MethodImplementationFlags));
            ReceiverNullableAnnotationGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<ReceiverNullableAnnotationGetterDelegate>(wrappedType, nameof(ReceiverNullableAnnotation));
            ReturnNullableAnnotationGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<ReturnNullableAnnotationGetterDelegate>(wrappedType, nameof(ReturnNullableAnnotation));
            TypeArgumentNullableAnnotationsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(wrappedType, nameof(TypeArgumentNullableAnnotations));
            UnmanagedCallingConventionTypesGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<UnmanagedCallingConventionTypesGetterDelegate>(wrappedType, nameof(UnmanagedCallingConventionTypes));

            ConstructFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<ConstructDelegate0>(wrappedType, "Construct", "typeArgumentsImmutableArray`1", "typeArgumentNullableAnnotationsImmutableArray`1");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Reflection.Metadata.SignatureCallingConvention CallingConvention(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => CallingConventionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsConditional(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => IsConditionalGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsInitOnly(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => IsInitOnlyGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static System.Boolean IsPartialDefinition(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => IsPartialDefinitionGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Boolean IsReadOnly(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => IsReadOnlyGetterFunc(_obj);

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static System.Reflection.MethodImplAttributes MethodImplementationFlags(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => MethodImplementationFlagsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReceiverNullableAnnotation(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => ReceiverNullableAnnotationGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReturnNullableAnnotation(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => ReturnNullableAnnotationGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotations(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => TypeArgumentNullableAnnotationsGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> UnmanagedCallingConventionTypes(this Microsoft.CodeAnalysis.IMethodSymbol _obj)
            => UnmanagedCallingConventionTypesGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.IMethodSymbol Construct(this Microsoft.CodeAnalysis.IMethodSymbol _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations)
            => ConstructFunc0(_obj, typeArguments, typeArgumentNullableAnnotations);
    }
}
