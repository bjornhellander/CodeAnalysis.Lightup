// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult. Added in version 3.8.0.0.</summary>
    public readonly partial struct AnalyzerConfigOptionsResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Collections.Immutable.ImmutableDictionary<System.String, System.String> AnalyzerOptionsGetterDelegate(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> DiagnosticsGetterDelegate(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> TreeOptionsGetterDelegate(System.Object? _obj);

        private static readonly AnalyzerOptionsGetterDelegate AnalyzerOptionsGetterFunc;
        private static readonly DiagnosticsGetterDelegate DiagnosticsGetterFunc;
        private static readonly TreeOptionsGetterDelegate TreeOptionsGetterFunc;

        private readonly System.Object? wrappedObject;

        static AnalyzerConfigOptionsResultWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            AnalyzerOptionsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<AnalyzerOptionsGetterDelegate>(WrappedType, nameof(AnalyzerOptions));
            DiagnosticsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<DiagnosticsGetterDelegate>(WrappedType, nameof(Diagnostics));
            TreeOptionsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<TreeOptionsGetterDelegate>(WrappedType, nameof(TreeOptions));
        }

        private AnalyzerConfigOptionsResultWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableDictionary<System.String, System.String> AnalyzerOptions
        {
            get => AnalyzerOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> Diagnostics
        {
            get => DiagnosticsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableDictionary<System.String, Microsoft.CodeAnalysis.ReportDiagnostic> TreeOptions
        {
            get => TreeOptionsGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static AnalyzerConfigOptionsResultWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new AnalyzerConfigOptionsResultWrapper(obj2);
        }

        public System.Object? Unwrap()
            => wrappedObject;
    }
}
