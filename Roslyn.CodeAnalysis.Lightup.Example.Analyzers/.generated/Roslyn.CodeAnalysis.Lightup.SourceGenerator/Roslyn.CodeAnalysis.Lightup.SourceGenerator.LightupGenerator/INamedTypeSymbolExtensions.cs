// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.INamedTypeSymbol.</summary>
    public static partial class INamedTypeSymbolExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.INamedTypeSymbol";

        private delegate System.Boolean IsFileLocalGetterDelegate(Microsoft.CodeAnalysis.INamedTypeSymbol? _obj);
        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol? NativeIntegerUnderlyingTypeGetterDelegate(Microsoft.CodeAnalysis.INamedTypeSymbol? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(Microsoft.CodeAnalysis.INamedTypeSymbol? _obj);

        private delegate Microsoft.CodeAnalysis.INamedTypeSymbol ConstructDelegate0(Microsoft.CodeAnalysis.INamedTypeSymbol? _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly IsFileLocalGetterDelegate IsFileLocalGetterFunc;
        private static readonly NativeIntegerUnderlyingTypeGetterDelegate NativeIntegerUnderlyingTypeGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static INamedTypeSymbolExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            IsFileLocalGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsFileLocalGetterDelegate>(wrappedType, nameof(IsFileLocal));
            NativeIntegerUnderlyingTypeGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<NativeIntegerUnderlyingTypeGetterDelegate>(wrappedType, nameof(NativeIntegerUnderlyingType));
            TypeArgumentNullableAnnotationsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(wrappedType, nameof(TypeArgumentNullableAnnotations));

            ConstructFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<ConstructDelegate0>(wrappedType, "Construct", "typeArgumentsImmutableArray`1", "typeArgumentNullableAnnotationsImmutableArray`1");
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static System.Boolean IsFileLocal(this Microsoft.CodeAnalysis.INamedTypeSymbol _obj)
            => IsFileLocalGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol? NativeIntegerUnderlyingType(this Microsoft.CodeAnalysis.INamedTypeSymbol _obj)
            => NativeIntegerUnderlyingTypeGetterFunc(_obj);

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotations(this Microsoft.CodeAnalysis.INamedTypeSymbol _obj)
            => TypeArgumentNullableAnnotationsGetterFunc(_obj);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.INamedTypeSymbol Construct(this Microsoft.CodeAnalysis.INamedTypeSymbol _obj, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations)
            => ConstructFunc0(_obj, typeArguments, typeArgumentNullableAnnotations);
    }
}
