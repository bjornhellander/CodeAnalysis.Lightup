// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SymbolEqualityComparer. Added in version 3.8.0.0.</summary>
    public readonly partial struct SymbolEqualityComparerWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SymbolEqualityComparer";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper DefaultGetterDelegate();
        private delegate Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper IncludeNullabilityGetterDelegate();

        private delegate System.Boolean EqualsDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.ISymbol? x, Microsoft.CodeAnalysis.ISymbol? y);
        private delegate System.Int32 GetHashCodeDelegate1(System.Object? _obj, Microsoft.CodeAnalysis.ISymbol? obj);

        private static readonly DefaultGetterDelegate DefaultGetterFunc;
        private static readonly IncludeNullabilityGetterDelegate IncludeNullabilityGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly GetHashCodeDelegate1 GetHashCodeFunc1;

        private readonly System.Object? wrappedObject;

        static SymbolEqualityComparerWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            DefaultGetterFunc = CommonLightupHelper.CreateStaticReadAccessor<DefaultGetterDelegate>(WrappedType, nameof(Default));
            IncludeNullabilityGetterFunc = CommonLightupHelper.CreateStaticReadAccessor<IncludeNullabilityGetterDelegate>(WrappedType, nameof(IncludeNullability));

            EqualsFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "xISymbol", "yISymbol");
            GetHashCodeFunc1 = CommonLightupHelper.CreateInstanceMethodAccessor<GetHashCodeDelegate1>(WrappedType, "GetHashCode", "objISymbol");
        }

        private SymbolEqualityComparerWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Field added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper Default
        {
            get => DefaultGetterFunc();
        }

        /// <summary>Field added in version 3.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper IncludeNullability
        {
            get => IncludeNullabilityGetterFunc();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SymbolEqualityComparerWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new SymbolEqualityComparerWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.ISymbol? x, Microsoft.CodeAnalysis.ISymbol? y)
            => EqualsFunc0(wrappedObject, x, y);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly System.Int32 GetHashCode(Microsoft.CodeAnalysis.ISymbol? obj)
            => GetHashCodeFunc1(wrappedObject, obj);
    }
}
