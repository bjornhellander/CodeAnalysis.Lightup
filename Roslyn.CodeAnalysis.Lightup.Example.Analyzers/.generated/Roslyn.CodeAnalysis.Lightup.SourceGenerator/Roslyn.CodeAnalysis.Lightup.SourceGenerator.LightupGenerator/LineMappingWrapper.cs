// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.LineMapping. Added in version 4.0.0.0.</summary>
    public readonly partial struct LineMappingWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.LineMapping";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate LineMappingWrapper ConstructorDelegate0(Microsoft.CodeAnalysis.Text.LinePositionSpan span, System.Nullable<System.Int32> characterOffset, Microsoft.CodeAnalysis.FileLinePositionSpan mappedSpan);

        private delegate System.Nullable<System.Int32> CharacterOffsetGetterDelegate(System.Object? _obj);
        private delegate System.Boolean IsHiddenGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.FileLinePositionSpan MappedSpanGetterDelegate(System.Object? _obj);
        private delegate Microsoft.CodeAnalysis.Text.LinePositionSpan SpanGetterDelegate(System.Object? _obj);

        private delegate System.Boolean EqualsDelegate0(System.Object? _obj, Microsoft.CodeAnalysis.Lightup.LineMappingWrapper other);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly CharacterOffsetGetterDelegate CharacterOffsetGetterFunc;
        private static readonly IsHiddenGetterDelegate IsHiddenGetterFunc;
        private static readonly MappedSpanGetterDelegate MappedSpanGetterFunc;
        private static readonly SpanGetterDelegate SpanGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly System.Object? wrappedObject;

        static LineMappingWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "spanLinePositionSpan", "characterOffsetNullable`1", "mappedSpanFileLinePositionSpan");

            CharacterOffsetGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<CharacterOffsetGetterDelegate>(WrappedType, nameof(CharacterOffset));
            IsHiddenGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsHiddenGetterDelegate>(WrappedType, nameof(IsHidden));
            MappedSpanGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<MappedSpanGetterDelegate>(WrappedType, nameof(MappedSpan));
            SpanGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<SpanGetterDelegate>(WrappedType, nameof(Span));

            EqualsFunc0 = CommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "otherLineMapping");
        }

        private LineMappingWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.0.0.0.</summary>
        public static LineMappingWrapper Create(Microsoft.CodeAnalysis.Text.LinePositionSpan span, System.Nullable<System.Int32> characterOffset, Microsoft.CodeAnalysis.FileLinePositionSpan mappedSpan)
            => ConstructorFunc0(span, characterOffset, mappedSpan);

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly System.Nullable<System.Int32> CharacterOffset
        {
            get => CharacterOffsetGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly System.Boolean IsHidden
        {
            get => IsHiddenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.FileLinePositionSpan MappedSpan
        {
            get => MappedSpanGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.Text.LinePositionSpan Span
        {
            get => SpanGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static LineMappingWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new LineMappingWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly System.Boolean Equals(Microsoft.CodeAnalysis.Lightup.LineMappingWrapper other)
            => EqualsFunc0(wrappedObject, other);
    }
}
