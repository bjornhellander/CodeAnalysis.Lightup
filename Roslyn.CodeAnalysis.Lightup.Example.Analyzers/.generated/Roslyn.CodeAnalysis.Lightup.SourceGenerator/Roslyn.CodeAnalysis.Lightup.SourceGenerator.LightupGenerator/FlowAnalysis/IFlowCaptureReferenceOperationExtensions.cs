// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.FlowAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation.</summary>
    public static partial class IFlowCaptureReferenceOperationExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation";

        private delegate System.Boolean IsInitializationGetterDelegate(Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation? _obj);

        private static readonly IsInitializationGetterDelegate IsInitializationGetterFunc;

        static IFlowCaptureReferenceOperationExtensions()
        {
            var wrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            IsInitializationGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<IsInitializationGetterDelegate>(wrappedType, nameof(IsInitialization));
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public static System.Boolean IsInitialization(this Microsoft.CodeAnalysis.FlowAnalysis.IFlowCaptureReferenceOperation _obj)
            => IsInitializationGetterFunc(_obj);
    }
}
