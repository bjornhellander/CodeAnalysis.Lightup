// <auto-generated/>
#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.</summary>
    public static partial class UsingDirectiveSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax";

        private delegate Microsoft.CodeAnalysis.SyntaxToken GlobalKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax NamespaceOrTypeGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken UnsafeKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UpdateDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax? alias, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax? alias, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax namespaceOrType, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithGlobalKeywordDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithNamespaceOrTypeDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax namespaceOrType);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithUnsafeKeywordDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword);

        private static readonly GlobalKeywordGetterDelegate GlobalKeywordGetterFunc;
        private static readonly NamespaceOrTypeGetterDelegate NamespaceOrTypeGetterFunc;
        private static readonly UnsafeKeywordGetterDelegate UnsafeKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithGlobalKeywordDelegate2 WithGlobalKeywordFunc2;
        private static readonly WithNamespaceOrTypeDelegate3 WithNamespaceOrTypeFunc3;
        private static readonly WithUnsafeKeywordDelegate4 WithUnsafeKeywordFunc4;

        static UsingDirectiveSyntaxExtensions()
        {
            var wrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            GlobalKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<GlobalKeywordGetterDelegate>(wrappedType, nameof(GlobalKeyword));
            NamespaceOrTypeGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<NamespaceOrTypeGetterDelegate>(wrappedType, nameof(NamespaceOrType));
            UnsafeKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<UnsafeKeywordGetterDelegate>(wrappedType, nameof(UnsafeKeyword));

            UpdateFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "globalKeywordSyntaxToken", "usingKeywordSyntaxToken", "staticKeywordSyntaxToken", "aliasNameEqualsSyntax", "nameNameSyntax", "semicolonTokenSyntaxToken");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(wrappedType, "Update", "globalKeywordSyntaxToken", "usingKeywordSyntaxToken", "staticKeywordSyntaxToken", "unsafeKeywordSyntaxToken", "aliasNameEqualsSyntax", "namespaceOrTypeTypeSyntax", "semicolonTokenSyntaxToken");
            WithGlobalKeywordFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithGlobalKeywordDelegate2>(wrappedType, "WithGlobalKeyword", "globalKeywordSyntaxToken");
            WithNamespaceOrTypeFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithNamespaceOrTypeDelegate3>(wrappedType, "WithNamespaceOrType", "namespaceOrTypeTypeSyntax");
            WithUnsafeKeywordFunc4 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithUnsafeKeywordDelegate4>(wrappedType, "WithUnsafeKeyword", "unsafeKeywordSyntaxToken");
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxToken GlobalKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj)
            => GlobalKeywordGetterFunc(_obj);

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax NamespaceOrType(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj)
            => NamespaceOrTypeGetterFunc(_obj);

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxToken UnsafeKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj)
            => UnsafeKeywordGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax? alias, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => UpdateFunc0(_obj, globalKeyword, usingKeyword, staticKeyword, alias, name, semicolonToken);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword, Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax? alias, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax namespaceOrType, Microsoft.CodeAnalysis.SyntaxToken semicolonToken)
            => UpdateFunc1(_obj, globalKeyword, usingKeyword, staticKeyword, unsafeKeyword, alias, namespaceOrType, semicolonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithGlobalKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken globalKeyword)
            => WithGlobalKeywordFunc2(_obj, globalKeyword);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithNamespaceOrType(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax namespaceOrType)
            => WithNamespaceOrTypeFunc3(_obj, namespaceOrType);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax WithUnsafeKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword)
            => WithUnsafeKeywordFunc4(_obj, unsafeKeyword);
    }
}
