// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.SlicePatternSyntax. Added in version 4.4.0.0.</summary>
    public readonly partial struct SlicePatternSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SlicePatternSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken DotDotTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? PatternGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken dotDotToken, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? pattern);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper WithDotDotTokenDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken dotDotToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper WithPatternDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? pattern);

        private static readonly DotDotTokenGetterDelegate DotDotTokenGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithDotDotTokenDelegate2 WithDotDotTokenFunc2;
        private static readonly WithPatternDelegate3 WithPatternFunc3;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? wrappedObject;

        static SlicePatternSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            DotDotTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<DotDotTokenGetterDelegate>(WrappedType, nameof(DotDotToken));
            PatternGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));

            AcceptFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "dotDotTokenSyntaxToken", "patternPatternSyntax");
            WithDotDotTokenFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithDotDotTokenDelegate2>(WrappedType, "WithDotDotToken", "dotDotTokenSyntaxToken");
            WithPatternFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithPatternDelegate3>(WrappedType, "WithPattern", "patternPatternSyntax");
        }

        private SlicePatternSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken DotDotToken
        {
            get => DotDotTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? Pattern
        {
            get => PatternGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax?(SlicePatternSyntaxWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SlicePatternSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax>(obj, WrappedType);
            return new SlicePatternSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken dotDotToken, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? pattern)
            => UpdateFunc1(wrappedObject, dotDotToken, pattern);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper WithDotDotToken(Microsoft.CodeAnalysis.SyntaxToken dotDotToken)
            => WithDotDotTokenFunc2(wrappedObject, dotDotToken);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper WithPattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax? pattern)
            => WithPatternFunc3(wrappedObject, pattern);
    }
}
