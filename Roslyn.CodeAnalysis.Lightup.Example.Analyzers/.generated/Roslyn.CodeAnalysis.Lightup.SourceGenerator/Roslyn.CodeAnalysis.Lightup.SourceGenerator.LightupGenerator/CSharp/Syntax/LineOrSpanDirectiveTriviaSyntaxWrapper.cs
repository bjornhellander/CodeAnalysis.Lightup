// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.LineOrSpanDirectiveTriviaSyntax. Added in version 4.0.0.0.</summary>
    public readonly partial struct LineOrSpanDirectiveTriviaSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LineOrSpanDirectiveTriviaSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken FileGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken LineKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithEndOfDirectiveTokenDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithFileDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken file);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithHashTokenDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken hashToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithLineKeywordDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken lineKeyword);

        private static readonly FileGetterDelegate FileGetterFunc;
        private static readonly LineKeywordGetterDelegate LineKeywordGetterFunc;

        private static readonly WithEndOfDirectiveTokenDelegate0 WithEndOfDirectiveTokenFunc0;
        private static readonly WithFileDelegate1 WithFileFunc1;
        private static readonly WithHashTokenDelegate2 WithHashTokenFunc2;
        private static readonly WithLineKeywordDelegate3 WithLineKeywordFunc3;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? wrappedObject;

        static LineOrSpanDirectiveTriviaSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            FileGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<FileGetterDelegate>(WrappedType, nameof(File));
            LineKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<LineKeywordGetterDelegate>(WrappedType, nameof(LineKeyword));

            WithEndOfDirectiveTokenFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithEndOfDirectiveTokenDelegate0>(WrappedType, "WithEndOfDirectiveToken", "endOfDirectiveTokenSyntaxToken");
            WithFileFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithFileDelegate1>(WrappedType, "WithFile", "fileSyntaxToken");
            WithHashTokenFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithHashTokenDelegate2>(WrappedType, "WithHashToken", "hashTokenSyntaxToken");
            WithLineKeywordFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithLineKeywordDelegate3>(WrappedType, "WithLineKeyword", "lineKeywordSyntaxToken");
        }

        private LineOrSpanDirectiveTriviaSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken File
        {
            get => FileGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken LineKeyword
        {
            get => LineKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax?(LineOrSpanDirectiveTriviaSyntaxWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static LineOrSpanDirectiveTriviaSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax>(obj, WrappedType);
            return new LineOrSpanDirectiveTriviaSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken)
            => WithEndOfDirectiveTokenFunc0(wrappedObject, endOfDirectiveToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithFile(Microsoft.CodeAnalysis.SyntaxToken file)
            => WithFileFunc1(wrappedObject, file);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken)
            => WithHashTokenFunc2(wrappedObject, hashToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineOrSpanDirectiveTriviaSyntaxWrapper WithLineKeyword(Microsoft.CodeAnalysis.SyntaxToken lineKeyword)
            => WithLineKeywordFunc3(wrappedObject, lineKeyword);
    }
}
