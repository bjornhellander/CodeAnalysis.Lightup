// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionColonSyntax. Added in version 4.0.0.0.</summary>
    public readonly partial struct BaseExpressionColonSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionColonSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken ColonTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax ExpressionGetterDelegate(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper WithColonTokenDelegate0(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.SyntaxToken colonToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper WithExpressionDelegate1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);

        private static readonly ColonTokenGetterDelegate ColonTokenGetterFunc;
        private static readonly ExpressionGetterDelegate ExpressionGetterFunc;

        private static readonly WithColonTokenDelegate0 WithColonTokenFunc0;
        private static readonly WithExpressionDelegate1 WithExpressionFunc1;

        private readonly Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? wrappedObject;

        static BaseExpressionColonSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ColonTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ColonTokenGetterDelegate>(WrappedType, nameof(ColonToken));
            ExpressionGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ExpressionGetterDelegate>(WrappedType, nameof(Expression));

            WithColonTokenFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithColonTokenDelegate0>(WrappedType, "WithColonToken", "colonTokenSyntaxToken");
            WithExpressionFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithExpressionDelegate1>(WrappedType, "WithExpression", "expressionExpressionSyntax");
        }

        private BaseExpressionColonSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken ColonToken
        {
            get => ColonTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax Expression
        {
            get => ExpressionGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?(BaseExpressionColonSyntaxWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static BaseExpressionColonSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode>(obj, WrappedType);
            return new BaseExpressionColonSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper WithColonToken(Microsoft.CodeAnalysis.SyntaxToken colonToken)
            => WithColonTokenFunc0(wrappedObject, colonToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression)
            => WithExpressionFunc1(wrappedObject, expression);
    }
}
