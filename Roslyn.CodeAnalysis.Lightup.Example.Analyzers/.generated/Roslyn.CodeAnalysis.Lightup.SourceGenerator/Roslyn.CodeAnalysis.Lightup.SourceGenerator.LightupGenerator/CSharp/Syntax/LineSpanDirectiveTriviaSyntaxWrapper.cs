// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.LineSpanDirectiveTriviaSyntax. Added in version 4.0.0.0.</summary>
    public readonly partial struct LineSpanDirectiveTriviaSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.LineSpanDirectiveTriviaSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken CharacterOffsetGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper EndGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken FileGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken HashTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate System.Boolean IsActiveGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken LineKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.SyntaxToken MinusTokenGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper StartGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken lineKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper start, Microsoft.CodeAnalysis.SyntaxToken minusToken, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper end, Microsoft.CodeAnalysis.SyntaxToken characterOffset, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, System.Boolean isActive);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithCharacterOffsetDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken characterOffset);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithEndDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper end);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithEndOfDirectiveTokenDelegate4(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithFileDelegate5(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken file);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithHashTokenDelegate6(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken hashToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithIsActiveDelegate7(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, System.Boolean isActive);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithLineKeywordDelegate8(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken lineKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithMinusTokenDelegate9(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken minusToken);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithStartDelegate10(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper start);

        private static readonly CharacterOffsetGetterDelegate CharacterOffsetGetterFunc;
        private static readonly EndGetterDelegate EndGetterFunc;
        private static readonly EndOfDirectiveTokenGetterDelegate EndOfDirectiveTokenGetterFunc;
        private static readonly FileGetterDelegate FileGetterFunc;
        private static readonly HashTokenGetterDelegate HashTokenGetterFunc;
        private static readonly IsActiveGetterDelegate IsActiveGetterFunc;
        private static readonly LineKeywordGetterDelegate LineKeywordGetterFunc;
        private static readonly MinusTokenGetterDelegate MinusTokenGetterFunc;
        private static readonly StartGetterDelegate StartGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithCharacterOffsetDelegate2 WithCharacterOffsetFunc2;
        private static readonly WithEndDelegate3 WithEndFunc3;
        private static readonly WithEndOfDirectiveTokenDelegate4 WithEndOfDirectiveTokenFunc4;
        private static readonly WithFileDelegate5 WithFileFunc5;
        private static readonly WithHashTokenDelegate6 WithHashTokenFunc6;
        private static readonly WithIsActiveDelegate7 WithIsActiveFunc7;
        private static readonly WithLineKeywordDelegate8 WithLineKeywordFunc8;
        private static readonly WithMinusTokenDelegate9 WithMinusTokenFunc9;
        private static readonly WithStartDelegate10 WithStartFunc10;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? wrappedObject;

        static LineSpanDirectiveTriviaSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            CharacterOffsetGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<CharacterOffsetGetterDelegate>(WrappedType, nameof(CharacterOffset));
            EndGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<EndGetterDelegate>(WrappedType, nameof(End));
            EndOfDirectiveTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<EndOfDirectiveTokenGetterDelegate>(WrappedType, nameof(EndOfDirectiveToken));
            FileGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<FileGetterDelegate>(WrappedType, nameof(File));
            HashTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<HashTokenGetterDelegate>(WrappedType, nameof(HashToken));
            IsActiveGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<IsActiveGetterDelegate>(WrappedType, nameof(IsActive));
            LineKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<LineKeywordGetterDelegate>(WrappedType, nameof(LineKeyword));
            MinusTokenGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<MinusTokenGetterDelegate>(WrappedType, nameof(MinusToken));
            StartGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<StartGetterDelegate>(WrappedType, nameof(Start));

            AcceptFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "hashTokenSyntaxToken", "lineKeywordSyntaxToken", "startLineDirectivePositionSyntax", "minusTokenSyntaxToken", "endLineDirectivePositionSyntax", "characterOffsetSyntaxToken", "fileSyntaxToken", "endOfDirectiveTokenSyntaxToken", "isActiveBoolean");
            WithCharacterOffsetFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithCharacterOffsetDelegate2>(WrappedType, "WithCharacterOffset", "characterOffsetSyntaxToken");
            WithEndFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithEndDelegate3>(WrappedType, "WithEnd", "endLineDirectivePositionSyntax");
            WithEndOfDirectiveTokenFunc4 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithEndOfDirectiveTokenDelegate4>(WrappedType, "WithEndOfDirectiveToken", "endOfDirectiveTokenSyntaxToken");
            WithFileFunc5 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithFileDelegate5>(WrappedType, "WithFile", "fileSyntaxToken");
            WithHashTokenFunc6 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithHashTokenDelegate6>(WrappedType, "WithHashToken", "hashTokenSyntaxToken");
            WithIsActiveFunc7 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithIsActiveDelegate7>(WrappedType, "WithIsActive", "isActiveBoolean");
            WithLineKeywordFunc8 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithLineKeywordDelegate8>(WrappedType, "WithLineKeyword", "lineKeywordSyntaxToken");
            WithMinusTokenFunc9 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithMinusTokenDelegate9>(WrappedType, "WithMinusToken", "minusTokenSyntaxToken");
            WithStartFunc10 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithStartDelegate10>(WrappedType, "WithStart", "startLineDirectivePositionSyntax");
        }

        private LineSpanDirectiveTriviaSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken CharacterOffset
        {
            get => CharacterOffsetGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper End
        {
            get => EndGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveToken
        {
            get => EndOfDirectiveTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken File
        {
            get => FileGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken HashToken
        {
            get => HashTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly System.Boolean IsActive
        {
            get => IsActiveGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken LineKeyword
        {
            get => LineKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken MinusToken
        {
            get => MinusTokenGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper Start
        {
            get => StartGetterFunc(wrappedObject);
        }

        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax?(LineSpanDirectiveTriviaSyntaxWrapper obj)
            => obj.Unwrap();

        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        public static LineSpanDirectiveTriviaSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax>(obj, WrappedType);
            return new LineSpanDirectiveTriviaSyntaxWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken lineKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper start, Microsoft.CodeAnalysis.SyntaxToken minusToken, Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper end, Microsoft.CodeAnalysis.SyntaxToken characterOffset, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, System.Boolean isActive)
            => UpdateFunc1(wrappedObject, hashToken, lineKeyword, start, minusToken, end, characterOffset, file, endOfDirectiveToken, isActive);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithCharacterOffset(Microsoft.CodeAnalysis.SyntaxToken characterOffset)
            => WithCharacterOffsetFunc2(wrappedObject, characterOffset);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithEnd(Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper end)
            => WithEndFunc3(wrappedObject, end);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken)
            => WithEndOfDirectiveTokenFunc4(wrappedObject, endOfDirectiveToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithFile(Microsoft.CodeAnalysis.SyntaxToken file)
            => WithFileFunc5(wrappedObject, file);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken)
            => WithHashTokenFunc6(wrappedObject, hashToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithIsActive(System.Boolean isActive)
            => WithIsActiveFunc7(wrappedObject, isActive);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithLineKeyword(Microsoft.CodeAnalysis.SyntaxToken lineKeyword)
            => WithLineKeywordFunc8(wrappedObject, lineKeyword);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithMinusToken(Microsoft.CodeAnalysis.SyntaxToken minusToken)
            => WithMinusTokenFunc9(wrappedObject, minusToken);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper WithStart(Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper start)
            => WithStartFunc10(wrappedObject, start);
    }
}
