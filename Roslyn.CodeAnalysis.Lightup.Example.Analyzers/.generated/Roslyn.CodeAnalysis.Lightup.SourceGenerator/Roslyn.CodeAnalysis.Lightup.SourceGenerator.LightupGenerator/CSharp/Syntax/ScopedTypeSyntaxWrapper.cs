// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ScopedTypeSyntax. Added in version 4.4.0.0.</summary>
    public readonly partial struct ScopedTypeSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ScopedTypeSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken ScopedKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax TypeGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken scopedKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper WithScopedKeywordDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken scopedKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper WithTypeDelegate3(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? _obj, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);

        private static readonly ScopedKeywordGetterDelegate ScopedKeywordGetterFunc;
        private static readonly TypeGetterDelegate TypeGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithScopedKeywordDelegate2 WithScopedKeywordFunc2;
        private static readonly WithTypeDelegate3 WithTypeFunc3;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? wrappedObject;

        static ScopedTypeSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ScopedKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ScopedKeywordGetterDelegate>(WrappedType, nameof(ScopedKeyword));
            TypeGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<TypeGetterDelegate>(WrappedType, nameof(Type));

            AcceptFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "scopedKeywordSyntaxToken", "typeTypeSyntax");
            WithScopedKeywordFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithScopedKeywordDelegate2>(WrappedType, "WithScopedKeyword", "scopedKeywordSyntaxToken");
            WithTypeFunc3 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithTypeDelegate3>(WrappedType, "WithType", "typeTypeSyntax");
        }

        private ScopedTypeSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken ScopedKeyword
        {
            get => ScopedKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax Type
        {
            get => TypeGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?(ScopedTypeSyntaxWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ScopedTypeSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax>(obj, WrappedType);
            return new ScopedTypeSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken scopedKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type)
            => UpdateFunc1(wrappedObject, scopedKeyword, type);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper WithScopedKeyword(Microsoft.CodeAnalysis.SyntaxToken scopedKeyword)
            => WithScopedKeywordFunc2(wrappedObject, scopedKeyword);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type)
            => WithTypeFunc3(wrappedObject, type);
    }
}
