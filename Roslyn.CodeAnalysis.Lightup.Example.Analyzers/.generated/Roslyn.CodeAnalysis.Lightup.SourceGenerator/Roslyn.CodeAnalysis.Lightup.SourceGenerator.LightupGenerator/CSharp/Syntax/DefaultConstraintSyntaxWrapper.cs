// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax. Added in version 3.8.0.0.</summary>
    public readonly partial struct DefaultConstraintSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.DefaultConstraintSyntax";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.SyntaxToken DefaultKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj);

        private delegate void AcceptDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper UpdateDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken defaultKeyword);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper WithDefaultKeywordDelegate2(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken defaultKeyword);

        private static readonly DefaultKeywordGetterDelegate DefaultKeywordGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithDefaultKeywordDelegate2 WithDefaultKeywordFunc2;

        private readonly Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? wrappedObject;

        static DefaultConstraintSyntaxWrapper()
        {
            WrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            DefaultKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<DefaultKeywordGetterDelegate>(WrappedType, nameof(DefaultKeyword));

            AcceptFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "defaultKeywordSyntaxToken");
            WithDefaultKeywordFunc2 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithDefaultKeywordDelegate2>(WrappedType, "WithDefaultKeyword", "defaultKeywordSyntaxToken");
        }

        private DefaultConstraintSyntaxWrapper(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.SyntaxToken DefaultKeyword
        {
            get => DefaultKeywordGetterFunc(wrappedObject);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax?(DefaultConstraintSyntaxWrapper obj)
            => obj.Unwrap();

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CSharpLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static DefaultConstraintSyntaxWrapper As(System.Object? obj)
        {
            var obj2 = CSharpLightupHelper.As<Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax>(obj, WrappedType);
            return new DefaultConstraintSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly void Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
            => AcceptFunc0(wrappedObject, visitor);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper Update(Microsoft.CodeAnalysis.SyntaxToken defaultKeyword)
            => UpdateFunc1(wrappedObject, defaultKeyword);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper WithDefaultKeyword(Microsoft.CodeAnalysis.SyntaxToken defaultKeyword)
            => WithDefaultKeywordFunc2(wrappedObject, defaultKeyword);
    }
}
