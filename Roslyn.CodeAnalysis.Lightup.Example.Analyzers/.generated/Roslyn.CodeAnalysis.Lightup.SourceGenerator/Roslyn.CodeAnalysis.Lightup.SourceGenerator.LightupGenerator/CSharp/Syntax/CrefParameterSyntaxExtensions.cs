// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.</summary>
    public static partial class CrefParameterSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax";

        private delegate Microsoft.CodeAnalysis.SyntaxToken ReadOnlyKeywordGetterDelegate(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax? _obj);

        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax UpdateDelegate0(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken refKindKeyword, Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);
        private delegate Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax WithReadOnlyKeywordDelegate1(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax? _obj, Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword);

        private static readonly ReadOnlyKeywordGetterDelegate ReadOnlyKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithReadOnlyKeywordDelegate1 WithReadOnlyKeywordFunc1;

        static CrefParameterSyntaxExtensions()
        {
            var wrappedType = CSharpLightupHelper.FindType(WrappedTypeName);

            ReadOnlyKeywordGetterFunc = CSharpLightupHelper.CreateInstanceGetAccessor<ReadOnlyKeywordGetterDelegate>(wrappedType, nameof(ReadOnlyKeyword));

            UpdateFunc0 = CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "refKindKeywordSyntaxToken", "readOnlyKeywordSyntaxToken", "typeTypeSyntax");
            WithReadOnlyKeywordFunc1 = CSharpLightupHelper.CreateInstanceMethodAccessor<WithReadOnlyKeywordDelegate1>(wrappedType, "WithReadOnlyKeyword", "readOnlyKeywordSyntaxToken");
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.SyntaxToken ReadOnlyKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax _obj)
            => ReadOnlyKeywordGetterFunc(_obj);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax Update(this Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken refKindKeyword, Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type)
            => UpdateFunc0(_obj, refKindKeyword, readOnlyKeyword, type);

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax WithReadOnlyKeyword(this Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax _obj, Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword)
            => WithReadOnlyKeywordFunc1(_obj, readOnlyKeyword);
    }
}
