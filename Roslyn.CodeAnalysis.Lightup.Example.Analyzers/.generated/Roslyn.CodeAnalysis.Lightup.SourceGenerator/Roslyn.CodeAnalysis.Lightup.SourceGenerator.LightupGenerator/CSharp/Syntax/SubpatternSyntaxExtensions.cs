// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax.</summary>
    public static partial class SubpatternSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax";

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper ExpressionColonGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon, global::Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax WithExpressionColonDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon);

        private static readonly ExpressionColonGetterDelegate ExpressionColonGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithExpressionColonDelegate1 WithExpressionColonFunc1;

        static SubpatternSyntaxExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ExpressionColonGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ExpressionColonGetterDelegate>(wrappedType, nameof(ExpressionColon));

            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "expressionColonBaseExpressionColonSyntax", "patternPatternSyntax");
            WithExpressionColonFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithExpressionColonDelegate1>(wrappedType, "WithExpressionColon", "expressionColonBaseExpressionColonSyntax");
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper ExpressionColon(this global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj)
            => ExpressionColonGetterFunc(_obj);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax Update(this global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon, global::Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern)
            => UpdateFunc0(_obj, expressionColon, pattern);

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax WithExpressionColon(this global::Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BaseExpressionColonSyntaxWrapper expressionColon)
            => WithExpressionColonFunc1(_obj, expressionColon);
    }
}
