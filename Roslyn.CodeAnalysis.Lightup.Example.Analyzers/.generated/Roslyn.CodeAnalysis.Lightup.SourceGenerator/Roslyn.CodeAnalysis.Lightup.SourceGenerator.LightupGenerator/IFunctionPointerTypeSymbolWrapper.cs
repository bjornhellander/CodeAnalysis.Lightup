// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IFunctionPointerTypeSymbol. Added in version 3.8.0.0.</summary>
    public readonly partial struct IFunctionPointerTypeSymbolWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IFunctionPointerTypeSymbol";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate Microsoft.CodeAnalysis.IMethodSymbol SignatureGetterDelegate(Microsoft.CodeAnalysis.ITypeSymbol? _obj);

        private static readonly SignatureGetterDelegate SignatureGetterFunc;

        private readonly Microsoft.CodeAnalysis.ITypeSymbol? wrappedObject;

        static IFunctionPointerTypeSymbolWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            SignatureGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<SignatureGetterDelegate>(WrappedType, nameof(Signature));
        }

        private IFunctionPointerTypeSymbolWrapper(Microsoft.CodeAnalysis.ITypeSymbol? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly Microsoft.CodeAnalysis.IMethodSymbol Signature
        {
            get => SignatureGetterFunc(wrappedObject);
        }

        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        public static IFunctionPointerTypeSymbolWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<Microsoft.CodeAnalysis.ITypeSymbol>(obj, WrappedType);
            return new IFunctionPointerTypeSymbolWrapper(obj2);
        }

        public Microsoft.CodeAnalysis.ITypeSymbol? Unwrap()
            => wrappedObject;
    }
}
