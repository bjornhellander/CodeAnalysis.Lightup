// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

// <auto-generated/>

#nullable enable

using Microsoft.CodeAnalysis.Lightup;

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IImportScope. Added in version 4.4.0.0.</summary>
    public readonly partial struct IImportScopeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IImportScope";

        private static readonly System.Type? WrappedType; // NOTE: Used via reflection

        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol> AliasesGetterDelegate(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol> ExternAliasesGetterDelegate(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.ImportedNamespaceOrTypeWrapper> ImportsGetterDelegate(System.Object? _obj);
        private delegate System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.ImportedXmlNamespaceWrapper> XmlNamespacesGetterDelegate(System.Object? _obj);

        private static readonly AliasesGetterDelegate AliasesGetterFunc;
        private static readonly ExternAliasesGetterDelegate ExternAliasesGetterFunc;
        private static readonly ImportsGetterDelegate ImportsGetterFunc;
        private static readonly XmlNamespacesGetterDelegate XmlNamespacesGetterFunc;

        private readonly System.Object? wrappedObject;

        static IImportScopeWrapper()
        {
            WrappedType = CommonLightupHelper.FindType(WrappedTypeName);

            AliasesGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<AliasesGetterDelegate>(WrappedType, nameof(Aliases));
            ExternAliasesGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<ExternAliasesGetterDelegate>(WrappedType, nameof(ExternAliases));
            ImportsGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<ImportsGetterDelegate>(WrappedType, nameof(Imports));
            XmlNamespacesGetterFunc = CommonLightupHelper.CreateInstanceGetAccessor<XmlNamespacesGetterDelegate>(WrappedType, nameof(XmlNamespaces));
        }

        private IImportScopeWrapper(System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol> Aliases
        {
            get => AliasesGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol> ExternAliases
        {
            get => ExternAliasesGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.ImportedNamespaceOrTypeWrapper> Imports
        {
            get => ImportsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Lightup.ImportedXmlNamespaceWrapper> XmlNamespaces
        {
            get => XmlNamespacesGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(System.Object? obj)
            => CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static IImportScopeWrapper As(System.Object? obj)
        {
            var obj2 = CommonLightupHelper.As<System.Object>(obj, WrappedType);
            return new IImportScopeWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public System.Object? Unwrap()
            => wrappedObject;
    }
}
