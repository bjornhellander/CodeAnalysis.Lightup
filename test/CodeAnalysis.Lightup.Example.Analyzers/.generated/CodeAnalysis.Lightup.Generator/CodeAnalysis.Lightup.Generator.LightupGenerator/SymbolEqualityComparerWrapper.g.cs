// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SymbolEqualityComparer. Added in version 3.3.0.0.</summary>
    public partial struct SymbolEqualityComparerWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SymbolEqualityComparer";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper DefaultGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper IncludeNullabilityGetterDelegate();

        private delegate global::System.Boolean EqualsDelegate0(global::System.Object? _obj, global::Microsoft.CodeAnalysis.ISymbol? x, global::Microsoft.CodeAnalysis.ISymbol? y);
        private delegate global::System.Int32 GetHashCodeDelegate1(global::System.Object? _obj, global::Microsoft.CodeAnalysis.ISymbol? obj);

        private static readonly DefaultGetterDelegate DefaultGetterFunc;
        private static readonly IncludeNullabilityGetterDelegate IncludeNullabilityGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly GetHashCodeDelegate1 GetHashCodeFunc1;

        private readonly global::System.Object wrappedObject;

        static SymbolEqualityComparerWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DefaultGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticReadAccessor<DefaultGetterDelegate>(WrappedType, nameof(Default));
            IncludeNullabilityGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticReadAccessor<IncludeNullabilityGetterDelegate>(WrappedType, nameof(IncludeNullability));

            EqualsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "xISymbol", "yISymbol");
            GetHashCodeFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetHashCodeDelegate1>(WrappedType, "GetHashCode", "objISymbol");
        }

        private SymbolEqualityComparerWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Field added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper Default
        {
            get { return DefaultGetterFunc(); }
        }

        /// <summary>Field added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.SymbolEqualityComparerWrapper IncludeNullability
        {
            get { return IncludeNullabilityGetterFunc(); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static SymbolEqualityComparerWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new SymbolEqualityComparerWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public global::System.Boolean Equals(global::Microsoft.CodeAnalysis.ISymbol? x, global::Microsoft.CodeAnalysis.ISymbol? y)
        {
            return EqualsFunc0(wrappedObject, x, y);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public global::System.Int32 GetHashCode(global::Microsoft.CodeAnalysis.ISymbol? obj)
        {
            return GetHashCodeFunc1(wrappedObject, obj);
        }
    }
}
