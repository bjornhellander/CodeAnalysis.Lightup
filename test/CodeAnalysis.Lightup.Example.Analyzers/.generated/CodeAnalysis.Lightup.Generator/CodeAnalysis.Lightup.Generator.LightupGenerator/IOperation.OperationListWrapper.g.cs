// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
public partial struct IOperationWrapper {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList. Added in version 4.2.0.0.</summary>
    public partial struct OperationListWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Int32 CountGetterDelegate(global::System.Object _obj);

        private delegate global::System.Boolean AnyDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper FirstDelegate1(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper.EnumeratorWrapper GetEnumeratorDelegate2(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper LastDelegate3(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper.ReversedWrapper ReverseDelegate4(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> ToImmutableArrayDelegate5(global::System.Object _obj);

        private static readonly CountGetterDelegate CountGetterFunc;

        private static readonly AnyDelegate0 AnyFunc0;
        private static readonly FirstDelegate1 FirstFunc1;
        private static readonly GetEnumeratorDelegate2 GetEnumeratorFunc2;
        private static readonly LastDelegate3 LastFunc3;
        private static readonly ReverseDelegate4 ReverseFunc4;
        private static readonly ToImmutableArrayDelegate5 ToImmutableArrayFunc5;

        private readonly global::System.Object wrappedObject;

        static OperationListWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CountGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CountGetterDelegate>(WrappedType, nameof(Count));

            AnyFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<AnyDelegate0>(WrappedType, "Any");
            FirstFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<FirstDelegate1>(WrappedType, "First");
            GetEnumeratorFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetEnumeratorDelegate2>(WrappedType, "GetEnumerator");
            LastFunc3 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<LastDelegate3>(WrappedType, "Last");
            ReverseFunc4 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ReverseDelegate4>(WrappedType, "Reverse");
            ToImmutableArrayFunc5 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ToImmutableArrayDelegate5>(WrappedType, "ToImmutableArray");
        }

        private OperationListWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.2.0.0.</summary>
        public global::System.Int32 Count
        {
            get { return CountGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static OperationListWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new OperationListWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::System.Boolean Any()
        {
            return AnyFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper First()
        {
            return FirstFunc1(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper.EnumeratorWrapper GetEnumerator()
        {
            return GetEnumeratorFunc2(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper Last()
        {
            return LastFunc3(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper.ReversedWrapper Reverse()
        {
            return ReverseFunc4(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> ToImmutableArray()
        {
            return ToImmutableArrayFunc5(wrappedObject);
        }
    }
}
}
