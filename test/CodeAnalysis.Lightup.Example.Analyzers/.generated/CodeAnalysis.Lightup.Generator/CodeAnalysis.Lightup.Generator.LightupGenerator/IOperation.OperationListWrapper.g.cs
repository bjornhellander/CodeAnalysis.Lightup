// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
public partial class IOperationEx {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList. Added in version 4.2.0.0.</summary>
    public partial struct OperationListWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Int32 CountGetterDelegate(global::System.Object _obj);

        private delegate global::System.Boolean AnyDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation FirstDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper.EnumeratorWrapper GetEnumeratorDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation LastDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper.ReversedWrapper ReverseDelegate0(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> ToImmutableArrayDelegate0(global::System.Object _obj);

        private static readonly CountGetterDelegate CountGetterFunc;

        private static readonly AnyDelegate0 AnyFunc0;
        private static readonly FirstDelegate0 FirstFunc0;
        private static readonly GetEnumeratorDelegate0 GetEnumeratorFunc0;
        private static readonly LastDelegate0 LastFunc0;
        private static readonly ReverseDelegate0 ReverseFunc0;
        private static readonly ToImmutableArrayDelegate0 ToImmutableArrayFunc0;

        private readonly global::System.Object wrappedObject;

        static OperationListWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CountGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CountGetterDelegate>(WrappedType, nameof(Count));

            AnyFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<AnyDelegate0>(WrappedType, "Any");
            FirstFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<FirstDelegate0>(WrappedType, "First");
            GetEnumeratorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetEnumeratorDelegate0>(WrappedType, "GetEnumerator");
            LastFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<LastDelegate0>(WrappedType, "Last");
            ReverseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ReverseDelegate0>(WrappedType, "Reverse");
            ToImmutableArrayFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ToImmutableArrayDelegate0>(WrappedType, "ToImmutableArray");
        }

        private OperationListWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.2.0.0.</summary>
        public global::System.Int32 Count
        {
            get { return CountGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static OperationListWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new OperationListWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::System.Boolean Any()
        {
            return AnyFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation First()
        {
            return FirstFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper.EnumeratorWrapper GetEnumerator()
        {
            return GetEnumeratorFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation Last()
        {
            return LastFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper.ReversedWrapper Reverse()
        {
            return ReverseFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> ToImmutableArray()
        {
            return ToImmutableArrayFunc0(wrappedObject);
        }
    }
}
}
