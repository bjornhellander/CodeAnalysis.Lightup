// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IDiscardSymbol. Added in version 2.0.0.0.</summary>
    public partial struct IDiscardSymbolWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IDiscardSymbol";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx NullableAnnotationGetterDelegate(global::Microsoft.CodeAnalysis.ISymbol _obj);
        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol TypeGetterDelegate(global::Microsoft.CodeAnalysis.ISymbol _obj);

        private static readonly NullableAnnotationGetterDelegate NullableAnnotationGetterFunc;
        private static readonly TypeGetterDelegate TypeGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.ISymbol wrappedObject;

        static IDiscardSymbolWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            NullableAnnotationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<NullableAnnotationGetterDelegate>(WrappedType, nameof(NullableAnnotation));
            TypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<TypeGetterDelegate>(WrappedType, nameof(Type));
        }

        private IDiscardSymbolWrapper(global::Microsoft.CodeAnalysis.ISymbol obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx NullableAnnotation
        {
            get { return NullableAnnotationGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ITypeSymbol Type
        {
            get { return TypeGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.ISymbol? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IDiscardSymbolWrapper Wrap(global::Microsoft.CodeAnalysis.ISymbol obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.ISymbol>(obj, WrappedType);
            return new IDiscardSymbolWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.ISymbol Unwrap()
        {
            return wrappedObject;
        }
    }
}
