// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IOperation. Added in version 1.2.0.0.</summary>
    public partial struct IOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper ChildOperationsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> ChildrenGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Optional<global::System.Object> ConstantValueGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsImplicitGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.OperationKindEx KindGetterDelegate(global::System.Object _obj);
        private delegate global::System.String LanguageGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper? ParentGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.SemanticModel? SemanticModelGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode SyntaxGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol? TypeGetterDelegate(global::System.Object _obj);

        private delegate void AcceptDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.OperationVisitorWrapper visitor);

        private static readonly ChildOperationsGetterDelegate ChildOperationsGetterFunc;
        private static readonly ChildrenGetterDelegate ChildrenGetterFunc;
        private static readonly ConstantValueGetterDelegate ConstantValueGetterFunc;
        private static readonly IsImplicitGetterDelegate IsImplicitGetterFunc;
        private static readonly KindGetterDelegate KindGetterFunc;
        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly ParentGetterDelegate ParentGetterFunc;
        private static readonly SemanticModelGetterDelegate SemanticModelGetterFunc;
        private static readonly SyntaxGetterDelegate SyntaxGetterFunc;
        private static readonly TypeGetterDelegate TypeGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;

        private readonly global::System.Object wrappedObject;

        static IOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ChildOperationsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ChildOperationsGetterDelegate>(WrappedType, nameof(ChildOperations));
            ChildrenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ChildrenGetterDelegate>(WrappedType, nameof(Children));
            ConstantValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConstantValueGetterDelegate>(WrappedType, nameof(ConstantValue));
            IsImplicitGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsImplicitGetterDelegate>(WrappedType, nameof(IsImplicit));
            KindGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<KindGetterDelegate>(WrappedType, nameof(Kind));
            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(WrappedType, nameof(Language));
            ParentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ParentGetterDelegate>(WrappedType, nameof(Parent));
            SemanticModelGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SemanticModelGetterDelegate>(WrappedType, nameof(SemanticModel));
            SyntaxGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SyntaxGetterDelegate>(WrappedType, nameof(Syntax));
            TypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<TypeGetterDelegate>(WrappedType, nameof(Type));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorOperationVisitor");
        }

        private IOperationWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper.OperationListWrapper ChildOperations
        {
            get { return ChildOperationsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> Children
        {
            get { return ChildrenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Optional<global::System.Object> ConstantValue
        {
            get { return ConstantValueGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsImplicit
        {
            get { return IsImplicitGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.OperationKindEx Kind
        {
            get { return KindGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.String Language
        {
            get { return LanguageGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper? Parent
        {
            get { return ParentGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SemanticModel? SemanticModel
        {
            get { return SemanticModelGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxNode Syntax
        {
            get { return SyntaxGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ITypeSymbol? Type
        {
            get { return TypeGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IOperationWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new IOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void Accept(global::Microsoft.CodeAnalysis.Operations.Lightup.OperationVisitorWrapper visitor)
        {
            AcceptFunc0(wrappedObject, visitor);
        }
    }
}
