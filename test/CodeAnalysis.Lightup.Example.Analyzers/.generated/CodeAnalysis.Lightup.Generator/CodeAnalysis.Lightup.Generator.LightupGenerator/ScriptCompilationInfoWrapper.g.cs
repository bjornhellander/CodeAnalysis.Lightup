// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.ScriptCompilationInfo. Added in version 1.1.0.0.</summary>
    public partial struct ScriptCompilationInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ScriptCompilationInfo";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Type? GlobalsTypeGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Compilation? PreviousScriptCompilationGetterDelegate(global::System.Object _obj);
        private delegate global::System.Type ReturnTypeGetterDelegate(global::System.Object _obj);

        private delegate global::Microsoft.CodeAnalysis.Lightup.ScriptCompilationInfoWrapper WithPreviousScriptCompilationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Compilation? compilation);

        private static readonly GlobalsTypeGetterDelegate GlobalsTypeGetterFunc;
        private static readonly PreviousScriptCompilationGetterDelegate PreviousScriptCompilationGetterFunc;
        private static readonly ReturnTypeGetterDelegate ReturnTypeGetterFunc;

        private static readonly WithPreviousScriptCompilationDelegate0 WithPreviousScriptCompilationFunc0;

        private readonly global::System.Object wrappedObject;

        static ScriptCompilationInfoWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            GlobalsTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<GlobalsTypeGetterDelegate>(WrappedType, nameof(GlobalsType));
            PreviousScriptCompilationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<PreviousScriptCompilationGetterDelegate>(WrappedType, nameof(PreviousScriptCompilation));
            ReturnTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ReturnTypeGetterDelegate>(WrappedType, nameof(ReturnType));

            WithPreviousScriptCompilationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithPreviousScriptCompilationDelegate0>(WrappedType, "WithPreviousScriptCompilation", "compilationCompilation");
        }

        private ScriptCompilationInfoWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Type? GlobalsType
        {
            get { return GlobalsTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Compilation? PreviousScriptCompilation
        {
            get { return PreviousScriptCompilationGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Type ReturnType
        {
            get { return ReturnTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static ScriptCompilationInfoWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new ScriptCompilationInfoWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.ScriptCompilationInfoWrapper WithPreviousScriptCompilation(global::Microsoft.CodeAnalysis.Compilation? compilation)
        {
            return WithPreviousScriptCompilationFunc0(wrappedObject, compilation);
        }
    }
}
