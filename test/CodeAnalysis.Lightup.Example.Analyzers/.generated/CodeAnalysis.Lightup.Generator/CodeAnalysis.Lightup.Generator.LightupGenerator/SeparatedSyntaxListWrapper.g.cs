
// <auto-generated/>
#pragma warning disable CS1591
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    public struct SeparatedSyntaxListWrapper<TNode>
    {
        private static readonly global::System.Type? WrappedType; // NOTE: Possibly used via reflection

        private delegate int CountDelegate(object obj);
        private delegate SeparatedSyntaxListWrapper<TNode> AddRangeDelegate(object obj, global::System.Collections.Generic.IEnumerable<TNode> arg1);

        private static readonly CountDelegate CountAccessor;
        private static readonly AddRangeDelegate AddRangeAccessor;

        private readonly object wrappedObject;

        static SeparatedSyntaxListWrapper()
        {
            var wrapperNodeType = typeof(TNode);
            var wrappedNodeTypeField = wrapperNodeType.GetField("WrappedType", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);
            var wrappedNodeType = (global::System.Type)wrappedNodeTypeField.GetValue(null);
            WrappedType = wrappedNodeType != null ? typeof(SeparatedSyntaxList<>).MakeGenericType(wrappedNodeType) : null;

            CountAccessor = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<CountDelegate>(WrappedType, nameof(Count));
            AddRangeAccessor = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AddRangeDelegate>(WrappedType, nameof(AddRange), "nodesIEnumerable`1");
        }

        private SeparatedSyntaxListWrapper(object obj)
        {
            wrappedObject = obj;
        }

        public int Count
        {
            get { return CountAccessor(wrappedObject); }
        }

        public int SeparatorCount
        {
            get { throw new global::System.NotImplementedException(); }
        }

        public global::Microsoft.CodeAnalysis.Text.TextSpan FullSpan
        {
             get { throw new global::System.NotImplementedException(); }
        }

        public global::Microsoft.CodeAnalysis.Text.TextSpan Span
        {
             get { throw new global::System.NotImplementedException(); }
        }

        public TNode this[int index]
        {
             get { throw new global::System.NotImplementedException(); }
        }

        public static implicit operator SeparatedSyntaxListWrapper<SyntaxNode>(SeparatedSyntaxListWrapper<TNode> nodes)
        {
             throw new global::System.NotImplementedException();
        }

        public static implicit operator SeparatedSyntaxListWrapper<TNode>(SeparatedSyntaxListWrapper<SyntaxNode> nodes)
        {
             throw new global::System.NotImplementedException();
        }

        public static bool Is(object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        public static SeparatedSyntaxListWrapper<TNode> Wrap(object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<object>(obj, WrappedType);
            return new SeparatedSyntaxListWrapper<TNode>(obj2);
        }

        public object Unwrap()
        {
             return wrappedObject;
        }

        public global::Microsoft.CodeAnalysis.SyntaxToken GetSeparator(int index)
        {
             throw new global::System.NotImplementedException();
        }

        public global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxToken> GetSeparators()
        {
             throw new global::System.NotImplementedException();
        }

        public override string ToString()
        {
             throw new global::System.NotImplementedException();
        }

        public string ToFullString()
        {
             throw new global::System.NotImplementedException();
        }

        public TNode First()
        {
             throw new global::System.NotImplementedException();
        }

        public TNode FirstOrDefault()
        {
            throw new global::System.NotImplementedException();
        }

        public TNode Last()
        {
             throw new global::System.NotImplementedException();
        }

        public TNode LastOrDefault()
        {
             throw new global::System.NotImplementedException();
        }

        public bool Contains(TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public int IndexOf(TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public int IndexOf(global::System.Func<TNode, bool> predicate)
        {
             throw new global::System.NotImplementedException();
        }

        public int LastIndexOf(TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public int LastIndexOf(global::System.Func<TNode, bool> predicate)
        {
             throw new global::System.NotImplementedException();
        }

        public bool Any()
        {
             throw new global::System.NotImplementedException();
        }

        public SyntaxNodeOrTokenList GetWithSeparators()
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> Add(TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> AddRange(global::System.Collections.Generic.IEnumerable<TNode> nodes)
        {
             return AddRangeAccessor(wrappedObject, nodes);
        }

        public SeparatedSyntaxListWrapper<TNode> Insert(int index, TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> InsertRange(int index, global::System.Collections.Generic.IEnumerable<TNode> nodes)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> RemoveAt(int index)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> Remove(TNode node)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> Replace(TNode nodeInList, TNode newNode)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> ReplaceRange(TNode nodeInList, global::System.Collections.Generic.IEnumerable<TNode> newNodes)
        {
             throw new global::System.NotImplementedException();
        }

        public SeparatedSyntaxListWrapper<TNode> ReplaceSeparator(global::Microsoft.CodeAnalysis.SyntaxToken separatorToken, global::Microsoft.CodeAnalysis.SyntaxToken newSeparator)
        {
             throw new global::System.NotImplementedException();
        }
    }
}
