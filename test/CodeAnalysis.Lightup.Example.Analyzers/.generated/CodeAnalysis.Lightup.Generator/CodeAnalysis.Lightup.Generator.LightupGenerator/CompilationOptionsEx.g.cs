// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CompilationOptions.</summary>
    public static partial class CompilationOptionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOptions";

        private delegate global::System.String LanguageGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx MetadataImportOptionsGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptionsGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? SyntaxTreeOptionsProviderGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);

        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithConcurrentBuildDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean concurrent);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyContainerDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyContainer);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyFileDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyFile);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoPublicKeyDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithDelaySignDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Nullable<global::System.Boolean> delaySign);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithMainTypeNameDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? mainTypeName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithMetadataImportOptionsDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithModuleNameDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? moduleName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithOverflowChecksDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean checkOverflow);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithScriptClassNameDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String scriptClassName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithSyntaxTreeOptionsProviderDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider);

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly MetadataImportOptionsGetterDelegate MetadataImportOptionsGetterFunc;
        private static readonly NullableContextOptionsGetterDelegate NullableContextOptionsGetterFunc;
        private static readonly SyntaxTreeOptionsProviderGetterDelegate SyntaxTreeOptionsProviderGetterFunc;

        private static readonly WithConcurrentBuildDelegate0 WithConcurrentBuildFunc0;
        private static readonly WithCryptoKeyContainerDelegate0 WithCryptoKeyContainerFunc0;
        private static readonly WithCryptoKeyFileDelegate0 WithCryptoKeyFileFunc0;
        private static readonly WithCryptoPublicKeyDelegate0 WithCryptoPublicKeyFunc0;
        private static readonly WithDelaySignDelegate0 WithDelaySignFunc0;
        private static readonly WithMainTypeNameDelegate0 WithMainTypeNameFunc0;
        private static readonly WithMetadataImportOptionsDelegate0 WithMetadataImportOptionsFunc0;
        private static readonly WithModuleNameDelegate0 WithModuleNameFunc0;
        private static readonly WithOverflowChecksDelegate0 WithOverflowChecksFunc0;
        private static readonly WithScriptClassNameDelegate0 WithScriptClassNameFunc0;
        private static readonly WithSyntaxTreeOptionsProviderDelegate0 WithSyntaxTreeOptionsProviderFunc0;

        static CompilationOptionsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(wrappedType, nameof(Language));
            MetadataImportOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MetadataImportOptionsGetterDelegate>(wrappedType, nameof(MetadataImportOptions));
            NullableContextOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<NullableContextOptionsGetterDelegate>(wrappedType, nameof(NullableContextOptions));
            SyntaxTreeOptionsProviderGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SyntaxTreeOptionsProviderGetterDelegate>(wrappedType, nameof(SyntaxTreeOptionsProvider));

            WithConcurrentBuildFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithConcurrentBuildDelegate0>(wrappedType, "WithConcurrentBuild", "concurrentBoolean");
            WithCryptoKeyContainerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoKeyContainerDelegate0>(wrappedType, "WithCryptoKeyContainer", "cryptoKeyContainerString");
            WithCryptoKeyFileFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoKeyFileDelegate0>(wrappedType, "WithCryptoKeyFile", "cryptoKeyFileString");
            WithCryptoPublicKeyFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoPublicKeyDelegate0>(wrappedType, "WithCryptoPublicKey", "cryptoPublicKeyImmutableArray`1");
            WithDelaySignFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithDelaySignDelegate0>(wrappedType, "WithDelaySign", "delaySignNullable`1");
            WithMainTypeNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithMainTypeNameDelegate0>(wrappedType, "WithMainTypeName", "mainTypeNameString");
            WithMetadataImportOptionsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithMetadataImportOptionsDelegate0>(wrappedType, "WithMetadataImportOptions", "valueMetadataImportOptions");
            WithModuleNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithModuleNameDelegate0>(wrappedType, "WithModuleName", "moduleNameString");
            WithOverflowChecksFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithOverflowChecksDelegate0>(wrappedType, "WithOverflowChecks", "checkOverflowBoolean");
            WithScriptClassNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithScriptClassNameDelegate0>(wrappedType, "WithScriptClassName", "scriptClassNameString");
            WithSyntaxTreeOptionsProviderFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithSyntaxTreeOptionsProviderDelegate0>(wrappedType, "WithSyntaxTreeOptionsProvider", "providerSyntaxTreeOptionsProvider");
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public static global::System.String Language(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return LanguageGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx MetadataImportOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return MetadataImportOptionsGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return NullableContextOptionsGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? SyntaxTreeOptionsProvider(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return SyntaxTreeOptionsProviderGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithConcurrentBuild(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean concurrent)
        {
            return WithConcurrentBuildFunc0(_obj, concurrent);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyContainer(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyContainer)
        {
            return WithCryptoKeyContainerFunc0(_obj, cryptoKeyContainer);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyFile(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyFile)
        {
            return WithCryptoKeyFileFunc0(_obj, cryptoKeyFile);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoPublicKey(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey)
        {
            return WithCryptoPublicKeyFunc0(_obj, cryptoPublicKey);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithDelaySign(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Nullable<global::System.Boolean> delaySign)
        {
            return WithDelaySignFunc0(_obj, delaySign);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithMainTypeName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? mainTypeName)
        {
            return WithMainTypeNameFunc0(_obj, mainTypeName);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithMetadataImportOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value)
        {
            return WithMetadataImportOptionsFunc0(_obj, value);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithModuleName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? moduleName)
        {
            return WithModuleNameFunc0(_obj, moduleName);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithOverflowChecks(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean checkOverflow)
        {
            return WithOverflowChecksFunc0(_obj, checkOverflow);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithScriptClassName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String scriptClassName)
        {
            return WithScriptClassNameFunc0(_obj, scriptClassName);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithSyntaxTreeOptionsProvider(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider)
        {
            return WithSyntaxTreeOptionsProviderFunc0(_obj, provider);
        }
    }
}
