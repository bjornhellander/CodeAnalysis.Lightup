// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CompilationOptions.</summary>
    public static partial class CompilationOptionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOptions";

        private delegate global::System.String LanguageGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx MetadataImportOptionsGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptionsGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::System.Boolean PublicSignGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? SyntaxTreeOptionsProviderGetterDelegate(global::Microsoft.CodeAnalysis.CompilationOptions _obj);

        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithConcurrentBuildDelegate0(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean concurrent);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyContainerDelegate1(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyContainer);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyFileDelegate2(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyFile);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoPublicKeyDelegate3(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithDelaySignDelegate4(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Nullable<global::System.Boolean> delaySign);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithMainTypeNameDelegate5(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? mainTypeName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithMetadataImportOptionsDelegate6(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithModuleNameDelegate7(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? moduleName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithOverflowChecksDelegate8(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean checkOverflow);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithPublicSignDelegate9(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean publicSign);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithScriptClassNameDelegate10(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String scriptClassName);
        private delegate global::Microsoft.CodeAnalysis.CompilationOptions WithSyntaxTreeOptionsProviderDelegate11(global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider);

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly MetadataImportOptionsGetterDelegate MetadataImportOptionsGetterFunc;
        private static readonly NullableContextOptionsGetterDelegate NullableContextOptionsGetterFunc;
        private static readonly PublicSignGetterDelegate PublicSignGetterFunc;
        private static readonly SyntaxTreeOptionsProviderGetterDelegate SyntaxTreeOptionsProviderGetterFunc;

        private static readonly WithConcurrentBuildDelegate0 WithConcurrentBuildFunc0;
        private static readonly WithCryptoKeyContainerDelegate1 WithCryptoKeyContainerFunc1;
        private static readonly WithCryptoKeyFileDelegate2 WithCryptoKeyFileFunc2;
        private static readonly WithCryptoPublicKeyDelegate3 WithCryptoPublicKeyFunc3;
        private static readonly WithDelaySignDelegate4 WithDelaySignFunc4;
        private static readonly WithMainTypeNameDelegate5 WithMainTypeNameFunc5;
        private static readonly WithMetadataImportOptionsDelegate6 WithMetadataImportOptionsFunc6;
        private static readonly WithModuleNameDelegate7 WithModuleNameFunc7;
        private static readonly WithOverflowChecksDelegate8 WithOverflowChecksFunc8;
        private static readonly WithPublicSignDelegate9 WithPublicSignFunc9;
        private static readonly WithScriptClassNameDelegate10 WithScriptClassNameFunc10;
        private static readonly WithSyntaxTreeOptionsProviderDelegate11 WithSyntaxTreeOptionsProviderFunc11;

        static CompilationOptionsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(wrappedType, nameof(Language));
            MetadataImportOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MetadataImportOptionsGetterDelegate>(wrappedType, nameof(MetadataImportOptions));
            NullableContextOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<NullableContextOptionsGetterDelegate>(wrappedType, nameof(NullableContextOptions));
            PublicSignGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<PublicSignGetterDelegate>(wrappedType, nameof(PublicSign));
            SyntaxTreeOptionsProviderGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SyntaxTreeOptionsProviderGetterDelegate>(wrappedType, nameof(SyntaxTreeOptionsProvider));

            WithConcurrentBuildFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithConcurrentBuildDelegate0>(wrappedType, "WithConcurrentBuild", "concurrentBoolean");
            WithCryptoKeyContainerFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoKeyContainerDelegate1>(wrappedType, "WithCryptoKeyContainer", "cryptoKeyContainerString");
            WithCryptoKeyFileFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoKeyFileDelegate2>(wrappedType, "WithCryptoKeyFile", "cryptoKeyFileString");
            WithCryptoPublicKeyFunc3 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithCryptoPublicKeyDelegate3>(wrappedType, "WithCryptoPublicKey", "cryptoPublicKeyImmutableArray`1");
            WithDelaySignFunc4 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithDelaySignDelegate4>(wrappedType, "WithDelaySign", "delaySignNullable`1");
            WithMainTypeNameFunc5 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithMainTypeNameDelegate5>(wrappedType, "WithMainTypeName", "mainTypeNameString");
            WithMetadataImportOptionsFunc6 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithMetadataImportOptionsDelegate6>(wrappedType, "WithMetadataImportOptions", "valueMetadataImportOptions");
            WithModuleNameFunc7 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithModuleNameDelegate7>(wrappedType, "WithModuleName", "moduleNameString");
            WithOverflowChecksFunc8 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithOverflowChecksDelegate8>(wrappedType, "WithOverflowChecks", "checkOverflowBoolean");
            WithPublicSignFunc9 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithPublicSignDelegate9>(wrappedType, "WithPublicSign", "publicSignBoolean");
            WithScriptClassNameFunc10 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithScriptClassNameDelegate10>(wrappedType, "WithScriptClassName", "scriptClassNameString");
            WithSyntaxTreeOptionsProviderFunc11 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithSyntaxTreeOptionsProviderDelegate11>(wrappedType, "WithSyntaxTreeOptionsProvider", "providerSyntaxTreeOptionsProvider");
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public static global::System.String Language(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return LanguageGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx MetadataImportOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return MetadataImportOptionsGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return NullableContextOptionsGetterFunc(_obj);
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public static global::System.Boolean PublicSign(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return PublicSignGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? SyntaxTreeOptionsProvider(this global::Microsoft.CodeAnalysis.CompilationOptions _obj)
        {
            return SyntaxTreeOptionsProviderGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithConcurrentBuild(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean concurrent)
        {
            return WithConcurrentBuildFunc0(_obj, concurrent);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyContainer(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyContainer)
        {
            return WithCryptoKeyContainerFunc1(_obj, cryptoKeyContainer);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoKeyFile(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? cryptoKeyFile)
        {
            return WithCryptoKeyFileFunc2(_obj, cryptoKeyFile);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithCryptoPublicKey(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey)
        {
            return WithCryptoPublicKeyFunc3(_obj, cryptoPublicKey);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithDelaySign(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Nullable<global::System.Boolean> delaySign)
        {
            return WithDelaySignFunc4(_obj, delaySign);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithMainTypeName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? mainTypeName)
        {
            return WithMainTypeNameFunc5(_obj, mainTypeName);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithMetadataImportOptions(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value)
        {
            return WithMetadataImportOptionsFunc6(_obj, value);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithModuleName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String? moduleName)
        {
            return WithModuleNameFunc7(_obj, moduleName);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithOverflowChecks(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean checkOverflow)
        {
            return WithOverflowChecksFunc8(_obj, checkOverflow);
        }

        /// <summary>Method added in version 1.2.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithPublicSign(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.Boolean publicSign)
        {
            return WithPublicSignFunc9(_obj, publicSign);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithScriptClassName(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::System.String scriptClassName)
        {
            return WithScriptClassNameFunc10(_obj, scriptClassName);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CompilationOptions WithSyntaxTreeOptionsProvider(this global::Microsoft.CodeAnalysis.CompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider)
        {
            return WithSyntaxTreeOptionsProviderFunc11(_obj, provider);
        }
    }
}
