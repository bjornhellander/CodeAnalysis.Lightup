// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxNode.</summary>
    public static partial class SyntaxNodeEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxNode";

        private delegate global::System.Boolean ContainsDirectiveDelegate0(global::Microsoft.CodeAnalysis.SyntaxNode _obj, global::System.Int32 rawKind);
        private delegate global::System.Boolean IsIncrementallyIdenticalToDelegate1(global::Microsoft.CodeAnalysis.SyntaxNode _obj, global::Microsoft.CodeAnalysis.SyntaxNode? other);

        private static readonly ContainsDirectiveDelegate0 ContainsDirectiveFunc0;
        private static readonly IsIncrementallyIdenticalToDelegate1 IsIncrementallyIdenticalToFunc1;

        static SyntaxNodeEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ContainsDirectiveFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ContainsDirectiveDelegate0>(wrappedType, "ContainsDirective", "rawKindInt32");
            IsIncrementallyIdenticalToFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<IsIncrementallyIdenticalToDelegate1>(wrappedType, "IsIncrementallyIdenticalTo", "otherSyntaxNode");
        }

        /// <summary>Method added in version 4.5.0.0.</summary>
        public static global::System.Boolean ContainsDirective(this global::Microsoft.CodeAnalysis.SyntaxNode _obj, global::System.Int32 rawKind)
        {
            return ContainsDirectiveFunc0(_obj, rawKind);
        }

        /// <summary>Method added in version 3.10.0.0.</summary>
        public static global::System.Boolean IsIncrementallyIdenticalTo(this global::Microsoft.CodeAnalysis.SyntaxNode _obj, global::Microsoft.CodeAnalysis.SyntaxNode? other)
        {
            return IsIncrementallyIdenticalToFunc1(_obj, other);
        }
    }
}
