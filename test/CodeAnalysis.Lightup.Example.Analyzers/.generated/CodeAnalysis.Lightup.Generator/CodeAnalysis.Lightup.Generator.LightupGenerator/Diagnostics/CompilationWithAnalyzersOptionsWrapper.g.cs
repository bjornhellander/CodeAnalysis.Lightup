// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions. Added in version 1.1.0.0.</summary>
    public partial struct CompilationWithAnalyzersOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions";

        private static readonly global::System.Type? WrappedType;

        private delegate CompilationWithAnalyzersOptionsWrapper ConstructorDelegate0(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime);
        private delegate CompilationWithAnalyzersOptionsWrapper ConstructorDelegate1(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime, global::System.Boolean reportSuppressedDiagnostics);
        private delegate CompilationWithAnalyzersOptionsWrapper ConstructorDelegate2(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime, global::System.Boolean reportSuppressedDiagnostics, global::System.Func<global::System.Exception, global::System.Boolean>? analyzerExceptionFilter);

        private delegate global::System.Func<global::System.Exception, global::System.Boolean>? AnalyzerExceptionFilterGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean ConcurrentAnalysisGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean LogAnalyzerExecutionTimeGetterDelegate(global::System.Object _obj);
        private delegate global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? OnAnalyzerExceptionGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? OptionsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean ReportSuppressedDiagnosticsGetterDelegate(global::System.Object _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;
        private static readonly ConstructorDelegate1 ConstructorFunc1;
        private static readonly ConstructorDelegate2 ConstructorFunc2;

        private static readonly AnalyzerExceptionFilterGetterDelegate AnalyzerExceptionFilterGetterFunc;
        private static readonly ConcurrentAnalysisGetterDelegate ConcurrentAnalysisGetterFunc;
        private static readonly LogAnalyzerExecutionTimeGetterDelegate LogAnalyzerExecutionTimeGetterFunc;
        private static readonly OnAnalyzerExceptionGetterDelegate OnAnalyzerExceptionGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;
        private static readonly ReportSuppressedDiagnosticsGetterDelegate ReportSuppressedDiagnosticsGetterFunc;

        private readonly global::System.Object wrappedObject;

        static CompilationWithAnalyzersOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "optionsAnalyzerOptions", "onAnalyzerExceptionAction`3", "concurrentAnalysisBoolean", "logAnalyzerExecutionTimeBoolean");
            ConstructorFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate1>(WrappedType, "optionsAnalyzerOptions", "onAnalyzerExceptionAction`3", "concurrentAnalysisBoolean", "logAnalyzerExecutionTimeBoolean", "reportSuppressedDiagnosticsBoolean");
            ConstructorFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate2>(WrappedType, "optionsAnalyzerOptions", "onAnalyzerExceptionAction`3", "concurrentAnalysisBoolean", "logAnalyzerExecutionTimeBoolean", "reportSuppressedDiagnosticsBoolean", "analyzerExceptionFilterFunc`2");

            AnalyzerExceptionFilterGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AnalyzerExceptionFilterGetterDelegate>(WrappedType, nameof(AnalyzerExceptionFilter));
            ConcurrentAnalysisGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConcurrentAnalysisGetterDelegate>(WrappedType, nameof(ConcurrentAnalysis));
            LogAnalyzerExecutionTimeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LogAnalyzerExecutionTimeGetterDelegate>(WrappedType, nameof(LogAnalyzerExecutionTime));
            OnAnalyzerExceptionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OnAnalyzerExceptionGetterDelegate>(WrappedType, nameof(OnAnalyzerException));
            OptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));
            ReportSuppressedDiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ReportSuppressedDiagnosticsGetterDelegate>(WrappedType, nameof(ReportSuppressedDiagnostics));
        }

        private CompilationWithAnalyzersOptionsWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 1.1.0.0.</summary>
        public static CompilationWithAnalyzersOptionsWrapper Create(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime)
        {
            return ConstructorFunc0(options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime);
        }

        /// <summary>Constructor added in version 1.1.0.0.</summary>
        public static CompilationWithAnalyzersOptionsWrapper Create(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime, global::System.Boolean reportSuppressedDiagnostics)
        {
            return ConstructorFunc1(options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime, reportSuppressedDiagnostics);
        }

        /// <summary>Constructor added in version 1.2.0.0.</summary>
        public static CompilationWithAnalyzersOptionsWrapper Create(global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options, global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? onAnalyzerException, global::System.Boolean concurrentAnalysis, global::System.Boolean logAnalyzerExecutionTime, global::System.Boolean reportSuppressedDiagnostics, global::System.Func<global::System.Exception, global::System.Boolean>? analyzerExceptionFilter)
        {
            return ConstructorFunc2(options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime, reportSuppressedDiagnostics, analyzerExceptionFilter);
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::System.Func<global::System.Exception, global::System.Boolean>? AnalyzerExceptionFilter
        {
            get { return AnalyzerExceptionFilterGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Boolean ConcurrentAnalysis
        {
            get { return ConcurrentAnalysisGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Boolean LogAnalyzerExecutionTime
        {
            get { return LogAnalyzerExecutionTimeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Action<global::System.Exception, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostic>? OnAnalyzerException
        {
            get { return OnAnalyzerExceptionGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? Options
        {
            get { return OptionsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Boolean ReportSuppressedDiagnostics
        {
            get { return ReportSuppressedDiagnosticsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static CompilationWithAnalyzersOptionsWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new CompilationWithAnalyzersOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
