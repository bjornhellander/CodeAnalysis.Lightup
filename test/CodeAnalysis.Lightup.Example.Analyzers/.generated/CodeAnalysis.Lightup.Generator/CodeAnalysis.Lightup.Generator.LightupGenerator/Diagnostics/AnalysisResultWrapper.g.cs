// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.AnalysisResult. Added in version 1.3.0.0.</summary>
    public partial struct AnalysisResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalysisResult";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.AdditionalText, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> AdditionalFileDiagnosticsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> AnalyzersGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostics.Telemetry.Lightup.AnalyzerTelemetryInfoWrapper> AnalyzerTelemetryInfoGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>> CompilationDiagnosticsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.SyntaxTree, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> SemanticDiagnosticsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.SyntaxTree, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> SyntaxDiagnosticsGetterDelegate(global::System.Object _obj);

        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> GetAllDiagnosticsDelegate0(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> GetAllDiagnosticsDelegate1(global::System.Object _obj, global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer);

        private static readonly AdditionalFileDiagnosticsGetterDelegate AdditionalFileDiagnosticsGetterFunc;
        private static readonly AnalyzersGetterDelegate AnalyzersGetterFunc;
        private static readonly AnalyzerTelemetryInfoGetterDelegate AnalyzerTelemetryInfoGetterFunc;
        private static readonly CompilationDiagnosticsGetterDelegate CompilationDiagnosticsGetterFunc;
        private static readonly SemanticDiagnosticsGetterDelegate SemanticDiagnosticsGetterFunc;
        private static readonly SyntaxDiagnosticsGetterDelegate SyntaxDiagnosticsGetterFunc;

        private static readonly GetAllDiagnosticsDelegate0 GetAllDiagnosticsFunc0;
        private static readonly GetAllDiagnosticsDelegate1 GetAllDiagnosticsFunc1;

        private readonly global::System.Object wrappedObject;

        static AnalysisResultWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            AdditionalFileDiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AdditionalFileDiagnosticsGetterDelegate>(WrappedType, nameof(AdditionalFileDiagnostics));
            AnalyzersGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AnalyzersGetterDelegate>(WrappedType, nameof(Analyzers));
            AnalyzerTelemetryInfoGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AnalyzerTelemetryInfoGetterDelegate>(WrappedType, nameof(AnalyzerTelemetryInfo));
            CompilationDiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CompilationDiagnosticsGetterDelegate>(WrappedType, nameof(CompilationDiagnostics));
            SemanticDiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SemanticDiagnosticsGetterDelegate>(WrappedType, nameof(SemanticDiagnostics));
            SyntaxDiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SyntaxDiagnosticsGetterDelegate>(WrappedType, nameof(SyntaxDiagnostics));

            GetAllDiagnosticsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetAllDiagnosticsDelegate0>(WrappedType, "GetAllDiagnostics");
            GetAllDiagnosticsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetAllDiagnosticsDelegate1>(WrappedType, "GetAllDiagnostics", "analyzerDiagnosticAnalyzer");
        }

        private AnalysisResultWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.AdditionalText, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> AdditionalFileDiagnostics
        {
            get { return AdditionalFileDiagnosticsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> Analyzers
        {
            get { return AnalyzersGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::Microsoft.CodeAnalysis.Diagnostics.Telemetry.Lightup.AnalyzerTelemetryInfoWrapper> AnalyzerTelemetryInfo
        {
            get { return AnalyzerTelemetryInfoGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>> CompilationDiagnostics
        {
            get { return CompilationDiagnosticsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.SyntaxTree, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> SemanticDiagnostics
        {
            get { return SemanticDiagnosticsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.SyntaxTree, global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic>>> SyntaxDiagnostics
        {
            get { return SyntaxDiagnosticsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static AnalysisResultWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new AnalysisResultWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> GetAllDiagnostics()
        {
            return GetAllDiagnosticsFunc0(wrappedObject);
        }

        /// <summary>Method added in version 1.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> GetAllDiagnostics(global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer)
        {
            return GetAllDiagnosticsFunc1(wrappedObject, analyzer);
        }
    }
}
