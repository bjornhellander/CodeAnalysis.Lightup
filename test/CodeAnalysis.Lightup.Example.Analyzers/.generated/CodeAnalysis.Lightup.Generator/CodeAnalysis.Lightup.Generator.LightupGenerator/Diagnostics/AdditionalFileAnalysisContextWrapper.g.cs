// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext. Added in version 3.8.0.0.</summary>
    public partial struct AdditionalFileAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AdditionalFileAnalysisContext";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.AdditionalText AdditionalFileGetterDelegate(global::System.Object? _obj);
        private delegate global::System.Threading.CancellationToken CancellationTokenGetterDelegate(global::System.Object? _obj);
        private delegate global::Microsoft.CodeAnalysis.Compilation CompilationGetterDelegate(global::System.Object? _obj);
        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.Text.TextSpan> FilterSpanGetterDelegate(global::System.Object? _obj);
        private delegate global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions OptionsGetterDelegate(global::System.Object? _obj);

        private delegate void ReportDiagnosticDelegate0(global::System.Object? _obj, global::Microsoft.CodeAnalysis.Diagnostic diagnostic);

        private static readonly AdditionalFileGetterDelegate AdditionalFileGetterFunc;
        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly FilterSpanGetterDelegate FilterSpanGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;

        private static readonly ReportDiagnosticDelegate0 ReportDiagnosticFunc0;

        private readonly global::System.Object wrappedObject;

        static AdditionalFileAnalysisContextWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            AdditionalFileGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AdditionalFileGetterDelegate>(WrappedType, nameof(AdditionalFile));
            CancellationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CompilationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CompilationGetterDelegate>(WrappedType, nameof(Compilation));
            FilterSpanGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FilterSpanGetterDelegate>(WrappedType, nameof(FilterSpan));
            OptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));

            ReportDiagnosticFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ReportDiagnosticDelegate0>(WrappedType, "ReportDiagnostic", "diagnosticDiagnostic");
        }

        private AdditionalFileAnalysisContextWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.AdditionalText AdditionalFile
        {
            get { return AdditionalFileGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.Threading.CancellationToken CancellationToken
        {
            get { return CancellationTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Compilation Compilation
        {
            get { return CompilationGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.7.0.0.</summary>
        public global::System.Nullable<global::Microsoft.CodeAnalysis.Text.TextSpan> FilterSpan
        {
            get { return FilterSpanGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options
        {
            get { return OptionsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static AdditionalFileAnalysisContextWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new AdditionalFileAnalysisContextWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public void ReportDiagnostic(global::Microsoft.CodeAnalysis.Diagnostic diagnostic)
        {
            ReportDiagnosticFunc0(wrappedObject, diagnostic);
        }
    }
}
