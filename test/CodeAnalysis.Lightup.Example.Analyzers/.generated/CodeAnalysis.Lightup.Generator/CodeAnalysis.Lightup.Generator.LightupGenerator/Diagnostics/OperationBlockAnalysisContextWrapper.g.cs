// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext. Added in version 1.2.0.0.</summary>
    public partial struct OperationBlockAnalysisContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext";

        private static readonly global::System.Type? WrappedType;

        private delegate OperationBlockAnalysisContextWrapper ConstructorDelegate0(global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> operationBlocks, global::Microsoft.CodeAnalysis.ISymbol owningSymbol, global::Microsoft.CodeAnalysis.Compilation compilation, global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, global::System.Func<global::Microsoft.CodeAnalysis.Diagnostic, global::System.Boolean> isSupportedDiagnostic, global::System.Threading.CancellationToken cancellationToken);

        private delegate global::System.Threading.CancellationToken CancellationTokenGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Compilation CompilationGetterDelegate(global::System.Object _obj);
        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.Text.TextSpan> FilterSpanGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxTree FilterTreeGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsGeneratedCodeGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> OperationBlocksGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions OptionsGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.ISymbol OwningSymbolGetterDelegate(global::System.Object _obj);

        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowGraphWrapper GetControlFlowGraphDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper operationBlock);
        private delegate void ReportDiagnosticDelegate1(global::System.Object _obj, global::Microsoft.CodeAnalysis.Diagnostic diagnostic);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CompilationGetterDelegate CompilationGetterFunc;
        private static readonly FilterSpanGetterDelegate FilterSpanGetterFunc;
        private static readonly FilterTreeGetterDelegate FilterTreeGetterFunc;
        private static readonly IsGeneratedCodeGetterDelegate IsGeneratedCodeGetterFunc;
        private static readonly OperationBlocksGetterDelegate OperationBlocksGetterFunc;
        private static readonly OptionsGetterDelegate OptionsGetterFunc;
        private static readonly OwningSymbolGetterDelegate OwningSymbolGetterFunc;

        private static readonly GetControlFlowGraphDelegate0 GetControlFlowGraphFunc0;
        private static readonly ReportDiagnosticDelegate1 ReportDiagnosticFunc1;

        private readonly global::System.Object wrappedObject;

        static OperationBlockAnalysisContextWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "operationBlocksImmutableArray`1", "owningSymbolISymbol", "compilationCompilation", "optionsAnalyzerOptions", "reportDiagnosticAction`1", "isSupportedDiagnosticFunc`2", "cancellationTokenCancellationToken");

            CancellationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CompilationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CompilationGetterDelegate>(WrappedType, nameof(Compilation));
            FilterSpanGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FilterSpanGetterDelegate>(WrappedType, nameof(FilterSpan));
            FilterTreeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FilterTreeGetterDelegate>(WrappedType, nameof(FilterTree));
            IsGeneratedCodeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsGeneratedCodeGetterDelegate>(WrappedType, nameof(IsGeneratedCode));
            OperationBlocksGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OperationBlocksGetterDelegate>(WrappedType, nameof(OperationBlocks));
            OptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OptionsGetterDelegate>(WrappedType, nameof(Options));
            OwningSymbolGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OwningSymbolGetterDelegate>(WrappedType, nameof(OwningSymbol));

            GetControlFlowGraphFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetControlFlowGraphDelegate0>(WrappedType, "GetControlFlowGraph", "operationBlockIOperation");
            ReportDiagnosticFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ReportDiagnosticDelegate1>(WrappedType, "ReportDiagnostic", "diagnosticDiagnostic");
        }

        private OperationBlockAnalysisContextWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 1.2.0.0.</summary>
        public static OperationBlockAnalysisContextWrapper Create(global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> operationBlocks, global::Microsoft.CodeAnalysis.ISymbol owningSymbol, global::Microsoft.CodeAnalysis.Compilation compilation, global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, global::System.Action<global::Microsoft.CodeAnalysis.Diagnostic> reportDiagnostic, global::System.Func<global::Microsoft.CodeAnalysis.Diagnostic, global::System.Boolean> isSupportedDiagnostic, global::System.Threading.CancellationToken cancellationToken)
        {
            return ConstructorFunc0(operationBlocks, owningSymbol, compilation, options, reportDiagnostic, isSupportedDiagnostic, cancellationToken);
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::System.Threading.CancellationToken CancellationToken
        {
            get { return CancellationTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Compilation Compilation
        {
            get { return CompilationGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.7.0.0.</summary>
        public global::System.Nullable<global::Microsoft.CodeAnalysis.Text.TextSpan> FilterSpan
        {
            get { return FilterSpanGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.7.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxTree FilterTree
        {
            get { return FilterTreeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public global::System.Boolean IsGeneratedCode
        {
            get { return IsGeneratedCodeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper> OperationBlocks
        {
            get { return OperationBlocksGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options
        {
            get { return OptionsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.2.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ISymbol OwningSymbol
        {
            get { return OwningSymbolGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static OperationBlockAnalysisContextWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new OperationBlockAnalysisContextWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowGraphWrapper GetControlFlowGraph(global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper operationBlock)
        {
            return GetControlFlowGraphFunc0(wrappedObject, operationBlock);
        }

        /// <summary>Method added in version 1.2.0.0.</summary>
        public void ReportDiagnostic(global::Microsoft.CodeAnalysis.Diagnostic diagnostic)
        {
            ReportDiagnosticFunc1(wrappedObject, diagnostic);
        }
    }
}
