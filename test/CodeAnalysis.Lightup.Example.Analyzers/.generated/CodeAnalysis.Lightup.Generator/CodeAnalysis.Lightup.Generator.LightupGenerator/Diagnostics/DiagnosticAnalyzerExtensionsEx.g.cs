// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.</summary>
    public static partial class DiagnosticAnalyzerExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions";

        private delegate global::Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers WithAnalyzersDelegate0(global::Microsoft.CodeAnalysis.Compilation compilation, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options);

        private static readonly WithAnalyzersDelegate0 WithAnalyzersFunc0;

        static DiagnosticAnalyzerExtensionsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            WithAnalyzersFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<WithAnalyzersDelegate0>(wrappedType, "WithAnalyzers", "compilationCompilation", "analyzersImmutableArray`1", "optionsAnalyzerOptions");
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers WithAnalyzers(this global::Microsoft.CodeAnalysis.Compilation compilation, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer> analyzers, global::Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions? options)
        {
            return WithAnalyzersFunc0(compilation, analyzers, options);
        }
    }
}
