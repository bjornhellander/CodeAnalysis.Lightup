// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Diagnostics.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions. Added in version 3.8.0.0.</summary>
    public partial struct AnalyzerConfigOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Diagnostics.AnalyzerConfigOptions";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.StringComparer KeyComparerGetterDelegate();

        private delegate global::System.Collections.Generic.IEnumerable<global::System.String> KeysGetterDelegate(global::System.Object? _obj);

        private delegate global::System.Boolean TryGetValueDelegate0(global::System.Object? _obj, global::System.String key, out global::System.String? value);

        private static readonly KeyComparerGetterDelegate KeyComparerGetterFunc;

        private static readonly KeysGetterDelegate KeysGetterFunc;

        private static readonly TryGetValueDelegate0 TryGetValueFunc0;

        private readonly global::System.Object? wrappedObject;

        static AnalyzerConfigOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            KeyComparerGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticGetAccessor<KeyComparerGetterDelegate>(WrappedType, nameof(KeyComparer));

            KeysGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<KeysGetterDelegate>(WrappedType, nameof(Keys));

            TryGetValueFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<TryGetValueDelegate0>(WrappedType, "TryGetValue", "keyString", "valueString&");
        }

        private AnalyzerConfigOptionsWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::System.StringComparer KeyComparer
        {
            get { return KeyComparerGetterFunc(); }
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public global::System.Collections.Generic.IEnumerable<global::System.String> Keys
        {
            get { return KeysGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AnalyzerConfigOptionsWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new AnalyzerConfigOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::System.Boolean TryGetValue(global::System.String key, out global::System.String? value)
        {
            return TryGetValueFunc0(wrappedObject, key, out value);
        }
    }
}
