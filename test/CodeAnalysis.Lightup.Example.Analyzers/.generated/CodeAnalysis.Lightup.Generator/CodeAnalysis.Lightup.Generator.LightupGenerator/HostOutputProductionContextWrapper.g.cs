// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.HostOutputProductionContext. Added in version 4.12.0.0.</summary>
    public partial struct HostOutputProductionContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.HostOutputProductionContext";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Threading.CancellationToken CancellationTokenGetterDelegate(global::System.Object _obj);

        private delegate void AddOutputDelegate0(global::System.Object _obj, global::System.String name, global::System.Object value);

        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;

        private static readonly AddOutputDelegate0 AddOutputFunc0;

        private readonly global::System.Object wrappedObject;

        static HostOutputProductionContextWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CancellationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));

            AddOutputFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<AddOutputDelegate0>(WrappedType, "AddOutput", "nameString", "valueObject");
        }

        private HostOutputProductionContextWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.12.0.0.</summary>
        public global::System.Threading.CancellationToken CancellationToken
        {
            get { return CancellationTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static HostOutputProductionContextWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new HostOutputProductionContextWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.12.0.0.</summary>
        public void AddOutput(global::System.String name, global::System.Object value)
        {
            AddOutputFunc0(wrappedObject, name, value);
        }
    }
}
