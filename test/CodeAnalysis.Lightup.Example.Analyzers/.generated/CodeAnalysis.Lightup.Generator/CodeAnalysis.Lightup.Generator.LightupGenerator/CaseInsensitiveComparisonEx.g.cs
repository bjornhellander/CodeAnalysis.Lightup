// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CaseInsensitiveComparison.</summary>
    public static partial class CaseInsensitiveComparisonEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CaseInsensitiveComparison";

        private delegate global::System.Int32 CompareDelegate0(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right);
        private delegate global::System.Boolean EqualsDelegate0(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right);
        private delegate global::System.Boolean StartsWithDelegate0(global::System.String value, global::System.String possibleStart);

        private static readonly CompareDelegate0 CompareFunc0;
        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly StartsWithDelegate0 StartsWithFunc0;

        static CaseInsensitiveComparisonEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CompareFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<CompareDelegate0>(wrappedType, "Compare", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
            EqualsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<EqualsDelegate0>(wrappedType, "Equals", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
            StartsWithFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<StartsWithDelegate0>(wrappedType, "StartsWith", "valueString", "possibleStartString");
        }

        /// <summary>Method added in version 3.9.0.0.</summary>
        public static global::System.Int32 Compare(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right)
        {
            return CompareFunc0(left, right);
        }

        /// <summary>Method added in version 3.9.0.0.</summary>
        public static global::System.Boolean Equals(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right)
        {
            return EqualsFunc0(left, right);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::System.Boolean StartsWith(global::System.String value, global::System.String possibleStart)
        {
            return StartsWithFunc0(value, possibleStart);
        }
    }
}
