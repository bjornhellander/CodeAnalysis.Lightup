// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
public partial class IOperationExtensions {
public partial struct OperationListWrapper {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.IOperation+OperationList+Enumerator. Added in version 4.4.0.0.</summary>
    public partial struct EnumeratorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation+OperationList+Enumerator";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IOperation CurrentGetterDelegate(global::System.Object? _obj);

        private delegate global::System.Boolean MoveNextDelegate0(global::System.Object? _obj);
        private delegate void ResetDelegate1(global::System.Object? _obj);

        private static readonly CurrentGetterDelegate CurrentGetterFunc;

        private static readonly MoveNextDelegate0 MoveNextFunc0;
        private static readonly ResetDelegate1 ResetFunc1;

        private readonly global::System.Object? wrappedObject;

        static EnumeratorWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CurrentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CurrentGetterDelegate>(WrappedType, nameof(Current));

            MoveNextFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<MoveNextDelegate0>(WrappedType, "MoveNext");
            ResetFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ResetDelegate1>(WrappedType, "Reset");
        }

        private EnumeratorWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation Current
        {
            get => CurrentGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static EnumeratorWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new EnumeratorWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 4.4.0.0.</summary>
        public global::System.Boolean MoveNext()
            => MoveNextFunc0(wrappedObject);

        /// <summary>Method added in version 4.4.0.0.</summary>
        public void Reset()
            => ResetFunc1(wrappedObject);
    }
}
}
}
