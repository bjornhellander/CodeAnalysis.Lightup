// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IMethodSymbol.</summary>
    public static partial class IMethodSymbolEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IMethodSymbol";

        private delegate global::System.Reflection.Metadata.SignatureCallingConvention CallingConventionGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Boolean IsConditionalGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Boolean IsInitOnlyGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Boolean IsPartialDefinitionGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Boolean IsReadOnlyGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Reflection.MethodImplAttributes MethodImplementationFlagsGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReceiverNullableAnnotationGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReturnNullableAnnotationGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotationsGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> UnmanagedCallingConventionTypesGetterDelegate(global::Microsoft.CodeAnalysis.IMethodSymbol _obj);

        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol ConstructDelegate0(global::Microsoft.CodeAnalysis.IMethodSymbol _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations);

        private static readonly CallingConventionGetterDelegate CallingConventionGetterFunc;
        private static readonly IsConditionalGetterDelegate IsConditionalGetterFunc;
        private static readonly IsInitOnlyGetterDelegate IsInitOnlyGetterFunc;
        private static readonly IsPartialDefinitionGetterDelegate IsPartialDefinitionGetterFunc;
        private static readonly IsReadOnlyGetterDelegate IsReadOnlyGetterFunc;
        private static readonly MethodImplementationFlagsGetterDelegate MethodImplementationFlagsGetterFunc;
        private static readonly ReceiverNullableAnnotationGetterDelegate ReceiverNullableAnnotationGetterFunc;
        private static readonly ReturnNullableAnnotationGetterDelegate ReturnNullableAnnotationGetterFunc;
        private static readonly TypeArgumentNullableAnnotationsGetterDelegate TypeArgumentNullableAnnotationsGetterFunc;
        private static readonly UnmanagedCallingConventionTypesGetterDelegate UnmanagedCallingConventionTypesGetterFunc;

        private static readonly ConstructDelegate0 ConstructFunc0;

        static IMethodSymbolEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CallingConventionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<CallingConventionGetterDelegate>(wrappedType, nameof(CallingConvention));
            IsConditionalGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsConditionalGetterDelegate>(wrappedType, nameof(IsConditional));
            IsInitOnlyGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsInitOnlyGetterDelegate>(wrappedType, nameof(IsInitOnly));
            IsPartialDefinitionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsPartialDefinitionGetterDelegate>(wrappedType, nameof(IsPartialDefinition));
            IsReadOnlyGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsReadOnlyGetterDelegate>(wrappedType, nameof(IsReadOnly));
            MethodImplementationFlagsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MethodImplementationFlagsGetterDelegate>(wrappedType, nameof(MethodImplementationFlags));
            ReceiverNullableAnnotationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ReceiverNullableAnnotationGetterDelegate>(wrappedType, nameof(ReceiverNullableAnnotation));
            ReturnNullableAnnotationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ReturnNullableAnnotationGetterDelegate>(wrappedType, nameof(ReturnNullableAnnotation));
            TypeArgumentNullableAnnotationsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<TypeArgumentNullableAnnotationsGetterDelegate>(wrappedType, nameof(TypeArgumentNullableAnnotations));
            UnmanagedCallingConventionTypesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<UnmanagedCallingConventionTypesGetterDelegate>(wrappedType, nameof(UnmanagedCallingConventionTypes));

            ConstructFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ConstructDelegate0>(wrappedType, "Construct", "typeArgumentsImmutableArray`1", "typeArgumentNullableAnnotationsImmutableArray`1");
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::System.Reflection.Metadata.SignatureCallingConvention CallingConvention(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return CallingConventionGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.4.0.0.</summary>
        public static global::System.Boolean IsConditional(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return IsConditionalGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.7.0.0.</summary>
        public static global::System.Boolean IsInitOnly(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return IsInitOnlyGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.10.0.0.</summary>
        public static global::System.Boolean IsPartialDefinition(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return IsPartialDefinitionGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.1.0.0.</summary>
        public static global::System.Boolean IsReadOnly(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return IsReadOnlyGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.10.0.0.</summary>
        public static global::System.Reflection.MethodImplAttributes MethodImplementationFlags(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return MethodImplementationFlagsGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReceiverNullableAnnotation(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return ReceiverNullableAnnotationGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx ReturnNullableAnnotation(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return ReturnNullableAnnotationGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.3.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> TypeArgumentNullableAnnotations(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return TypeArgumentNullableAnnotationsGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> UnmanagedCallingConventionTypes(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj)
        {
            return UnmanagedCallingConventionTypesGetterFunc(_obj);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol Construct(this global::Microsoft.CodeAnalysis.IMethodSymbol _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> typeArguments, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> typeArgumentNullableAnnotations)
        {
            return ConstructFunc0(_obj, typeArguments, typeArgumentNullableAnnotations);
        }
    }
}
