// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IOperation.</summary>
    public static partial class IOperationEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IOperation";

        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper ChildOperationsGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> ChildrenGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);
        private delegate global::System.Boolean IsImplicitGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);
        private delegate global::System.String LanguageGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation? ParentGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);
        private delegate global::Microsoft.CodeAnalysis.SemanticModel? SemanticModelGetterDelegate(global::Microsoft.CodeAnalysis.IOperation _obj);

        private delegate void AcceptDelegate0(global::Microsoft.CodeAnalysis.IOperation _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.OperationVisitorWrapper visitor);

        private static readonly ChildOperationsGetterDelegate ChildOperationsGetterFunc;
        private static readonly ChildrenGetterDelegate ChildrenGetterFunc;
        private static readonly IsImplicitGetterDelegate IsImplicitGetterFunc;
        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly ParentGetterDelegate ParentGetterFunc;
        private static readonly SemanticModelGetterDelegate SemanticModelGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;

        static IOperationEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ChildOperationsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ChildOperationsGetterDelegate>(wrappedType, nameof(ChildOperations));
            ChildrenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ChildrenGetterDelegate>(wrappedType, nameof(Children));
            IsImplicitGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsImplicitGetterDelegate>(wrappedType, nameof(IsImplicit));
            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(wrappedType, nameof(Language));
            ParentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ParentGetterDelegate>(wrappedType, nameof(Parent));
            SemanticModelGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SemanticModelGetterDelegate>(wrappedType, nameof(SemanticModel));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(wrappedType, "Accept", "visitorOperationVisitor");
        }

        /// <summary>Property added in version 4.2.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.IOperationEx.OperationListWrapper ChildOperations(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return ChildOperationsGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> Children(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return ChildrenGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::System.Boolean IsImplicit(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return IsImplicitGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::System.String Language(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return LanguageGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IOperation? Parent(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return ParentGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SemanticModel? SemanticModel(this global::Microsoft.CodeAnalysis.IOperation _obj)
        {
            return SemanticModelGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static void Accept(this global::Microsoft.CodeAnalysis.IOperation _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.OperationVisitorWrapper visitor)
        {
            AcceptFunc0(_obj, visitor);
        }
    }
}
