// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult. Added in version 3.8.0.0.</summary>
    public partial struct AnalyzerConfigOptionsResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfigOptionsResult";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::System.String> AnalyzerOptionsGetterDelegate(global::System.Object? _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> DiagnosticsGetterDelegate(global::System.Object? _obj);
        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> TreeOptionsGetterDelegate(global::System.Object? _obj);

        private static readonly AnalyzerOptionsGetterDelegate AnalyzerOptionsGetterFunc;
        private static readonly DiagnosticsGetterDelegate DiagnosticsGetterFunc;
        private static readonly TreeOptionsGetterDelegate TreeOptionsGetterFunc;

        private readonly global::System.Object? wrappedObject;

        static AnalyzerConfigOptionsResultWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            AnalyzerOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AnalyzerOptionsGetterDelegate>(WrappedType, nameof(AnalyzerOptions));
            DiagnosticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<DiagnosticsGetterDelegate>(WrappedType, nameof(Diagnostics));
            TreeOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<TreeOptionsGetterDelegate>(WrappedType, nameof(TreeOptions));
        }

        private AnalyzerConfigOptionsResultWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::System.String> AnalyzerOptions
        {
            get => AnalyzerOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Diagnostic> Diagnostics
        {
            get => DiagnosticsGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> TreeOptions
        {
            get => TreeOptionsGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static AnalyzerConfigOptionsResultWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new AnalyzerConfigOptionsResultWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
            => wrappedObject;
    }
}
