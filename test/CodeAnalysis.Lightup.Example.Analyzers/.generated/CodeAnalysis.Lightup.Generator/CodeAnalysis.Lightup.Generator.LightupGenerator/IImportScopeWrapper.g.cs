// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.IImportScope. Added in version 4.3.0.0.</summary>
    public partial struct IImportScopeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.IImportScope";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IAliasSymbol> AliasesGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IAliasSymbol> ExternAliasesGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.ImportedNamespaceOrTypeWrapper> ImportsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.ImportedXmlNamespaceWrapper> XmlNamespacesGetterDelegate(global::System.Object _obj);

        private static readonly AliasesGetterDelegate AliasesGetterFunc;
        private static readonly ExternAliasesGetterDelegate ExternAliasesGetterFunc;
        private static readonly ImportsGetterDelegate ImportsGetterFunc;
        private static readonly XmlNamespacesGetterDelegate XmlNamespacesGetterFunc;

        private readonly global::System.Object wrappedObject;

        static IImportScopeWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            AliasesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AliasesGetterDelegate>(WrappedType, nameof(Aliases));
            ExternAliasesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ExternAliasesGetterDelegate>(WrappedType, nameof(ExternAliases));
            ImportsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ImportsGetterDelegate>(WrappedType, nameof(Imports));
            XmlNamespacesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<XmlNamespacesGetterDelegate>(WrappedType, nameof(XmlNamespaces));
        }

        private IImportScopeWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IAliasSymbol> Aliases
        {
            get { return AliasesGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IAliasSymbol> ExternAliases
        {
            get { return ExternAliasesGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.ImportedNamespaceOrTypeWrapper> Imports
        {
            get { return ImportsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.ImportedXmlNamespaceWrapper> XmlNamespaces
        {
            get { return XmlNamespacesGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IImportScopeWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new IImportScopeWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
