// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxTree.</summary>
    public static partial class SyntaxTreeExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTree";

        private delegate global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> DiagnosticOptionsGetterDelegate(global::Microsoft.CodeAnalysis.SyntaxTree _obj);

        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappingsDelegate0(global::Microsoft.CodeAnalysis.SyntaxTree _obj, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.SyntaxTree WithDiagnosticOptionsDelegate1(global::Microsoft.CodeAnalysis.SyntaxTree _obj, global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> options);

        private static readonly DiagnosticOptionsGetterDelegate DiagnosticOptionsGetterFunc;

        private static readonly GetLineMappingsDelegate0 GetLineMappingsFunc0;
        private static readonly WithDiagnosticOptionsDelegate1 WithDiagnosticOptionsFunc1;

        static SyntaxTreeExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DiagnosticOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<DiagnosticOptionsGetterDelegate>(wrappedType, nameof(DiagnosticOptions));

            GetLineMappingsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetLineMappingsDelegate0>(wrappedType, "GetLineMappings", "cancellationTokenCancellationToken");
            WithDiagnosticOptionsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<WithDiagnosticOptionsDelegate1>(wrappedType, "WithDiagnosticOptions", "optionsImmutableDictionary`2");
        }

        /// <summary>Property added in version 3.1.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> DiagnosticOptions(this global::Microsoft.CodeAnalysis.SyntaxTree _obj)
        {
            return DiagnosticOptionsGetterFunc(_obj);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.LineMappingWrapper> GetLineMappings(this global::Microsoft.CodeAnalysis.SyntaxTree _obj, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetLineMappingsFunc0(_obj, cancellationToken);
        }

        /// <summary>Method added in version 3.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxTree WithDiagnosticOptions(this global::Microsoft.CodeAnalysis.SyntaxTree _obj, global::System.Collections.Immutable.ImmutableDictionary<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic> options)
        {
            return WithDiagnosticOptionsFunc1(_obj, options);
        }
    }
}
