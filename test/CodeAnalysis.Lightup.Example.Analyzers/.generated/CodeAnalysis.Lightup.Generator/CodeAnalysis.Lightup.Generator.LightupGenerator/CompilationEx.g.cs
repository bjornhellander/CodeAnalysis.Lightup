// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Compilation.</summary>
    public static partial class CompilationEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Compilation";

        private delegate global::Microsoft.CodeAnalysis.Operations.CommonConversion ClassifyCommonConversionDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination);
        private delegate global::System.Boolean ContainsSymbolsWithNameDelegate1(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbolDelegate2(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbolDelegate3(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol elementType, global::System.Int32 rank, global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate4(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol operandType);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate5(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol leftType, global::Microsoft.CodeAnalysis.ITypeSymbol rightType);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbolDelegate6(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.RefKind returnRefKind, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.RefKind> parameterRefKinds, global::System.Reflection.Metadata.SignatureCallingConvention callingConvention, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbolDelegate7(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Boolean signed);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate8(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate9(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifferenceDelegate10(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, global::System.Func<global::Microsoft.CodeAnalysis.ISymbol, global::System.Boolean> isAddedSymbol, global::System.IO.Stream metadataStream, global::System.IO.Stream ilStream, global::System.IO.Stream pdbStream, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModelDelegate11(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithNameDelegate12(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataNameDelegate13(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String fullyQualifiedMetadataName);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferencesDelegate14(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Boolean HasImplicitConversionDelegate15(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol? fromType, global::Microsoft.CodeAnalysis.ITypeSymbol? toType);
        private delegate global::System.Boolean IsSymbolAccessibleWithinDelegate16(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ISymbol symbol, global::Microsoft.CodeAnalysis.ISymbol within, global::Microsoft.CodeAnalysis.ITypeSymbol? throughType);
        private delegate global::System.Boolean SupportsRuntimeCapabilityDelegate17(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability);

        private static readonly ClassifyCommonConversionDelegate0 ClassifyCommonConversionFunc0;
        private static readonly ContainsSymbolsWithNameDelegate1 ContainsSymbolsWithNameFunc1;
        private static readonly CreateAnonymousTypeSymbolDelegate2 CreateAnonymousTypeSymbolFunc2;
        private static readonly CreateArrayTypeSymbolDelegate3 CreateArrayTypeSymbolFunc3;
        private static readonly CreateBuiltinOperatorDelegate4 CreateBuiltinOperatorFunc4;
        private static readonly CreateBuiltinOperatorDelegate5 CreateBuiltinOperatorFunc5;
        private static readonly CreateFunctionPointerTypeSymbolDelegate6 CreateFunctionPointerTypeSymbolFunc6;
        private static readonly CreateNativeIntegerTypeSymbolDelegate7 CreateNativeIntegerTypeSymbolFunc7;
        private static readonly CreateTupleTypeSymbolDelegate8 CreateTupleTypeSymbolFunc8;
        private static readonly CreateTupleTypeSymbolDelegate9 CreateTupleTypeSymbolFunc9;
        private static readonly EmitDifferenceDelegate10 EmitDifferenceFunc10;
        private static readonly GetSemanticModelDelegate11 GetSemanticModelFunc11;
        private static readonly GetSymbolsWithNameDelegate12 GetSymbolsWithNameFunc12;
        private static readonly GetTypesByMetadataNameDelegate13 GetTypesByMetadataNameFunc13;
        private static readonly GetUsedAssemblyReferencesDelegate14 GetUsedAssemblyReferencesFunc14;
        private static readonly HasImplicitConversionDelegate15 HasImplicitConversionFunc15;
        private static readonly IsSymbolAccessibleWithinDelegate16 IsSymbolAccessibleWithinFunc16;
        private static readonly SupportsRuntimeCapabilityDelegate17 SupportsRuntimeCapabilityFunc17;

        static CompilationEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ClassifyCommonConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ClassifyCommonConversionDelegate0>(wrappedType, "ClassifyCommonConversion", "sourceITypeSymbol", "destinationITypeSymbol");
            ContainsSymbolsWithNameFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ContainsSymbolsWithNameDelegate1>(wrappedType, "ContainsSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            CreateAnonymousTypeSymbolFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateAnonymousTypeSymbolDelegate2>(wrappedType, "CreateAnonymousTypeSymbol", "memberTypesImmutableArray`1", "memberNamesImmutableArray`1", "memberIsReadOnlyImmutableArray`1", "memberLocationsImmutableArray`1", "memberNullableAnnotationsImmutableArray`1");
            CreateArrayTypeSymbolFunc3 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateArrayTypeSymbolDelegate3>(wrappedType, "CreateArrayTypeSymbol", "elementTypeITypeSymbol", "rankInt32", "elementNullableAnnotationNullableAnnotation");
            CreateBuiltinOperatorFunc4 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate4>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "operandTypeITypeSymbol");
            CreateBuiltinOperatorFunc5 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate5>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "leftTypeITypeSymbol", "rightTypeITypeSymbol");
            CreateFunctionPointerTypeSymbolFunc6 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateFunctionPointerTypeSymbolDelegate6>(wrappedType, "CreateFunctionPointerTypeSymbol", "returnTypeITypeSymbol", "returnRefKindRefKind", "parameterTypesImmutableArray`1", "parameterRefKindsImmutableArray`1", "callingConventionSignatureCallingConvention", "callingConventionTypesImmutableArray`1");
            CreateNativeIntegerTypeSymbolFunc7 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateNativeIntegerTypeSymbolDelegate7>(wrappedType, "CreateNativeIntegerTypeSymbol", "signedBoolean");
            CreateTupleTypeSymbolFunc8 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate8>(wrappedType, "CreateTupleTypeSymbol", "elementTypesImmutableArray`1", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            CreateTupleTypeSymbolFunc9 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate9>(wrappedType, "CreateTupleTypeSymbol", "underlyingTypeINamedTypeSymbol", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            EmitDifferenceFunc10 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<EmitDifferenceDelegate10>(wrappedType, "EmitDifference", "baselineEmitBaseline", "editsIEnumerable`1", "isAddedSymbolFunc`2", "metadataStreamStream", "ilStreamStream", "pdbStreamStream", "cancellationTokenCancellationToken");
            GetSemanticModelFunc11 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetSemanticModelDelegate11>(wrappedType, "GetSemanticModel", "syntaxTreeSyntaxTree", "optionsSemanticModelOptions");
            GetSymbolsWithNameFunc12 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetSymbolsWithNameDelegate12>(wrappedType, "GetSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            GetTypesByMetadataNameFunc13 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetTypesByMetadataNameDelegate13>(wrappedType, "GetTypesByMetadataName", "fullyQualifiedMetadataNameString");
            GetUsedAssemblyReferencesFunc14 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate14>(wrappedType, "GetUsedAssemblyReferences", "cancellationTokenCancellationToken");
            HasImplicitConversionFunc15 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<HasImplicitConversionDelegate15>(wrappedType, "HasImplicitConversion", "fromTypeITypeSymbol", "toTypeITypeSymbol");
            IsSymbolAccessibleWithinFunc16 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<IsSymbolAccessibleWithinDelegate16>(wrappedType, "IsSymbolAccessibleWithin", "symbolISymbol", "withinISymbol", "throughTypeITypeSymbol");
            SupportsRuntimeCapabilityFunc17 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<SupportsRuntimeCapabilityDelegate17>(wrappedType, "SupportsRuntimeCapability", "capabilityRuntimeCapability");
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Operations.CommonConversion ClassifyCommonConversion(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination)
        {
            return ClassifyCommonConversionFunc0(_obj, source, destination);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Boolean ContainsSymbolsWithName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return ContainsSymbolsWithNameFunc1(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations)
        {
            return CreateAnonymousTypeSymbolFunc2(_obj, memberTypes, memberNames, memberIsReadOnly, memberLocations, memberNullableAnnotations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol elementType, global::System.Int32 rank, global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation)
        {
            return CreateArrayTypeSymbolFunc3(_obj, elementType, rank, elementNullableAnnotation);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol operandType)
        {
            return CreateBuiltinOperatorFunc4(_obj, name, returnType, operandType);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol leftType, global::Microsoft.CodeAnalysis.ITypeSymbol rightType)
        {
            return CreateBuiltinOperatorFunc5(_obj, name, returnType, leftType, rightType);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.RefKind returnRefKind, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.RefKind> parameterRefKinds, global::System.Reflection.Metadata.SignatureCallingConvention callingConvention, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes)
        {
            return CreateFunctionPointerTypeSymbolFunc6(_obj, returnType, returnRefKind, parameterTypes, parameterRefKinds, callingConvention, callingConventionTypes);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Boolean signed)
        {
            return CreateNativeIntegerTypeSymbolFunc7(_obj, signed);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
        {
            return CreateTupleTypeSymbolFunc8(_obj, elementTypes, elementNames, elementLocations, elementNullableAnnotations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
        {
            return CreateTupleTypeSymbolFunc9(_obj, underlyingType, elementNames, elementLocations, elementNullableAnnotations);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifference(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, global::System.Func<global::Microsoft.CodeAnalysis.ISymbol, global::System.Boolean> isAddedSymbol, global::System.IO.Stream metadataStream, global::System.IO.Stream ilStream, global::System.IO.Stream pdbStream, global::System.Threading.CancellationToken cancellationToken)
        {
            return EmitDifferenceFunc10(_obj, baseline, edits, isAddedSymbol, metadataStream, ilStream, pdbStream, cancellationToken);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModel(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options)
        {
            return GetSemanticModelFunc11(_obj, syntaxTree, options);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetSymbolsWithNameFunc12(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String fullyQualifiedMetadataName)
        {
            return GetTypesByMetadataNameFunc13(_obj, fullyQualifiedMetadataName);
        }

        /// <summary>Method added in version 3.10.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferences(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetUsedAssemblyReferencesFunc14(_obj, cancellationToken);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Boolean HasImplicitConversion(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol? fromType, global::Microsoft.CodeAnalysis.ITypeSymbol? toType)
        {
            return HasImplicitConversionFunc15(_obj, fromType, toType);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::System.Boolean IsSymbolAccessibleWithin(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ISymbol symbol, global::Microsoft.CodeAnalysis.ISymbol within, global::Microsoft.CodeAnalysis.ITypeSymbol? throughType)
        {
            return IsSymbolAccessibleWithinFunc16(_obj, symbol, within, throughType);
        }

        /// <summary>Method added in version 4.6.0.0.</summary>
        public static global::System.Boolean SupportsRuntimeCapability(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability)
        {
            return SupportsRuntimeCapabilityFunc17(_obj, capability);
        }
    }
}
