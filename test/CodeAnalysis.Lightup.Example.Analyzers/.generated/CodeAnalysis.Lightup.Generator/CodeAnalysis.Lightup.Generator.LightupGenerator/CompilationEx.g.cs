// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Compilation.</summary>
    public static partial class CompilationEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Compilation";

        private delegate global::System.String? GetRequiredLanguageVersionDelegate0(global::Microsoft.CodeAnalysis.Diagnostic diagnostic);

        private delegate global::Microsoft.CodeAnalysis.Operations.Lightup.CommonConversionWrapper ClassifyCommonConversionDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination);
        private delegate global::System.Boolean ContainsSymbolsWithNameDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbolDelegate1(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol elementType, global::System.Int32 rank, global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol operandType);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperatorDelegate1(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol leftType, global::Microsoft.CodeAnalysis.ITypeSymbol rightType);
        private delegate global::Microsoft.CodeAnalysis.INamespaceSymbol CreateErrorNamespaceSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamespaceSymbol container, global::System.String name);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.RefKind returnRefKind, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.RefKind> parameterRefKinds, global::System.Reflection.Metadata.SignatureCallingConvention callingConvention, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Boolean signed);
        private delegate global::Microsoft.CodeAnalysis.IPreprocessingSymbol CreatePreprocessingSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate1(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate2(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbolDelegate3(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations);
        private delegate global::Microsoft.CodeAnalysis.Emit.EmitResult EmitDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.IO.Stream peStream, global::System.IO.Stream? pdbStream, global::System.IO.Stream? xmlDocumentationStream, global::System.IO.Stream? win32Resources, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ResourceDescription>? manifestResources, global::Microsoft.CodeAnalysis.Emit.EmitOptions options, global::Microsoft.CodeAnalysis.IMethodSymbol? debugEntryPoint, global::System.IO.Stream? sourceLinkStream, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.EmbeddedTextWrapper>? embeddedTexts, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.Emit.EmitResult EmitDelegate1(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.IO.Stream peStream, global::System.IO.Stream? pdbStream, global::System.IO.Stream? xmlDocumentationStream, global::System.IO.Stream? win32Resources, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ResourceDescription>? manifestResources, global::Microsoft.CodeAnalysis.Emit.EmitOptions? options, global::Microsoft.CodeAnalysis.IMethodSymbol? debugEntryPoint, global::System.IO.Stream? sourceLinkStream, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.EmbeddedTextWrapper>? embeddedTexts, global::System.IO.Stream? metadataPEStream, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifferenceDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, global::System.Func<global::Microsoft.CodeAnalysis.ISymbol, global::System.Boolean> isAddedSymbol, global::System.IO.Stream metadataStream, global::System.IO.Stream ilStream, global::System.IO.Stream pdbStream, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModelDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithNameDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataNameDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String fullyQualifiedMetadataName);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.AssemblyIdentity> GetUnreferencedAssemblyIdentitiesDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Diagnostic diagnostic);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferencesDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Boolean HasImplicitConversionDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol? fromType, global::Microsoft.CodeAnalysis.ITypeSymbol? toType);
        private delegate global::System.Boolean IsSymbolAccessibleWithinDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ISymbol symbol, global::Microsoft.CodeAnalysis.ISymbol within, global::Microsoft.CodeAnalysis.ITypeSymbol? throughType);
        private delegate global::System.Boolean SupportsRuntimeCapabilityDelegate0(global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability);

        private static readonly GetRequiredLanguageVersionDelegate0 GetRequiredLanguageVersionFunc0;

        private static readonly ClassifyCommonConversionDelegate0 ClassifyCommonConversionFunc0;
        private static readonly ContainsSymbolsWithNameDelegate0 ContainsSymbolsWithNameFunc0;
        private static readonly CreateAnonymousTypeSymbolDelegate0 CreateAnonymousTypeSymbolFunc0;
        private static readonly CreateAnonymousTypeSymbolDelegate1 CreateAnonymousTypeSymbolFunc1;
        private static readonly CreateArrayTypeSymbolDelegate0 CreateArrayTypeSymbolFunc0;
        private static readonly CreateBuiltinOperatorDelegate0 CreateBuiltinOperatorFunc0;
        private static readonly CreateBuiltinOperatorDelegate1 CreateBuiltinOperatorFunc1;
        private static readonly CreateErrorNamespaceSymbolDelegate0 CreateErrorNamespaceSymbolFunc0;
        private static readonly CreateFunctionPointerTypeSymbolDelegate0 CreateFunctionPointerTypeSymbolFunc0;
        private static readonly CreateNativeIntegerTypeSymbolDelegate0 CreateNativeIntegerTypeSymbolFunc0;
        private static readonly CreatePreprocessingSymbolDelegate0 CreatePreprocessingSymbolFunc0;
        private static readonly CreateTupleTypeSymbolDelegate0 CreateTupleTypeSymbolFunc0;
        private static readonly CreateTupleTypeSymbolDelegate1 CreateTupleTypeSymbolFunc1;
        private static readonly CreateTupleTypeSymbolDelegate2 CreateTupleTypeSymbolFunc2;
        private static readonly CreateTupleTypeSymbolDelegate3 CreateTupleTypeSymbolFunc3;
        private static readonly EmitDelegate0 EmitFunc0;
        private static readonly EmitDelegate1 EmitFunc1;
        private static readonly EmitDifferenceDelegate0 EmitDifferenceFunc0;
        private static readonly GetSemanticModelDelegate0 GetSemanticModelFunc0;
        private static readonly GetSymbolsWithNameDelegate0 GetSymbolsWithNameFunc0;
        private static readonly GetTypesByMetadataNameDelegate0 GetTypesByMetadataNameFunc0;
        private static readonly GetUnreferencedAssemblyIdentitiesDelegate0 GetUnreferencedAssemblyIdentitiesFunc0;
        private static readonly GetUsedAssemblyReferencesDelegate0 GetUsedAssemblyReferencesFunc0;
        private static readonly HasImplicitConversionDelegate0 HasImplicitConversionFunc0;
        private static readonly IsSymbolAccessibleWithinDelegate0 IsSymbolAccessibleWithinFunc0;
        private static readonly SupportsRuntimeCapabilityDelegate0 SupportsRuntimeCapabilityFunc0;

        static CompilationEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            GetRequiredLanguageVersionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetRequiredLanguageVersionDelegate0>(wrappedType, "GetRequiredLanguageVersion", "diagnosticDiagnostic");

            ClassifyCommonConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ClassifyCommonConversionDelegate0>(wrappedType, "ClassifyCommonConversion", "sourceITypeSymbol", "destinationITypeSymbol");
            ContainsSymbolsWithNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<ContainsSymbolsWithNameDelegate0>(wrappedType, "ContainsSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            CreateAnonymousTypeSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateAnonymousTypeSymbolDelegate0>(wrappedType, "CreateAnonymousTypeSymbol", "memberTypesImmutableArray`1", "memberNamesImmutableArray`1", "memberIsReadOnlyImmutableArray`1", "memberLocationsImmutableArray`1");
            CreateAnonymousTypeSymbolFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateAnonymousTypeSymbolDelegate1>(wrappedType, "CreateAnonymousTypeSymbol", "memberTypesImmutableArray`1", "memberNamesImmutableArray`1", "memberIsReadOnlyImmutableArray`1", "memberLocationsImmutableArray`1", "memberNullableAnnotationsImmutableArray`1");
            CreateArrayTypeSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateArrayTypeSymbolDelegate0>(wrappedType, "CreateArrayTypeSymbol", "elementTypeITypeSymbol", "rankInt32", "elementNullableAnnotationNullableAnnotation");
            CreateBuiltinOperatorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate0>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "operandTypeITypeSymbol");
            CreateBuiltinOperatorFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateBuiltinOperatorDelegate1>(wrappedType, "CreateBuiltinOperator", "nameString", "returnTypeITypeSymbol", "leftTypeITypeSymbol", "rightTypeITypeSymbol");
            CreateErrorNamespaceSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateErrorNamespaceSymbolDelegate0>(wrappedType, "CreateErrorNamespaceSymbol", "containerINamespaceSymbol", "nameString");
            CreateFunctionPointerTypeSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateFunctionPointerTypeSymbolDelegate0>(wrappedType, "CreateFunctionPointerTypeSymbol", "returnTypeITypeSymbol", "returnRefKindRefKind", "parameterTypesImmutableArray`1", "parameterRefKindsImmutableArray`1", "callingConventionSignatureCallingConvention", "callingConventionTypesImmutableArray`1");
            CreateNativeIntegerTypeSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateNativeIntegerTypeSymbolDelegate0>(wrappedType, "CreateNativeIntegerTypeSymbol", "signedBoolean");
            CreatePreprocessingSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreatePreprocessingSymbolDelegate0>(wrappedType, "CreatePreprocessingSymbol", "nameString");
            CreateTupleTypeSymbolFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate0>(wrappedType, "CreateTupleTypeSymbol", "elementTypesImmutableArray`1", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1");
            CreateTupleTypeSymbolFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate1>(wrappedType, "CreateTupleTypeSymbol", "underlyingTypeINamedTypeSymbol", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1");
            CreateTupleTypeSymbolFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate2>(wrappedType, "CreateTupleTypeSymbol", "elementTypesImmutableArray`1", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            CreateTupleTypeSymbolFunc3 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<CreateTupleTypeSymbolDelegate3>(wrappedType, "CreateTupleTypeSymbol", "underlyingTypeINamedTypeSymbol", "elementNamesImmutableArray`1", "elementLocationsImmutableArray`1", "elementNullableAnnotationsImmutableArray`1");
            EmitFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<EmitDelegate0>(wrappedType, "Emit", "peStreamStream", "pdbStreamStream", "xmlDocumentationStreamStream", "win32ResourcesStream", "manifestResourcesIEnumerable`1", "optionsEmitOptions", "debugEntryPointIMethodSymbol", "sourceLinkStreamStream", "embeddedTextsIEnumerable`1", "cancellationTokenCancellationToken");
            EmitFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<EmitDelegate1>(wrappedType, "Emit", "peStreamStream", "pdbStreamStream", "xmlDocumentationStreamStream", "win32ResourcesStream", "manifestResourcesIEnumerable`1", "optionsEmitOptions", "debugEntryPointIMethodSymbol", "sourceLinkStreamStream", "embeddedTextsIEnumerable`1", "metadataPEStreamStream", "cancellationTokenCancellationToken");
            EmitDifferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<EmitDifferenceDelegate0>(wrappedType, "EmitDifference", "baselineEmitBaseline", "editsIEnumerable`1", "isAddedSymbolFunc`2", "metadataStreamStream", "ilStreamStream", "pdbStreamStream", "cancellationTokenCancellationToken");
            GetSemanticModelFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetSemanticModelDelegate0>(wrappedType, "GetSemanticModel", "syntaxTreeSyntaxTree", "optionsSemanticModelOptions");
            GetSymbolsWithNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetSymbolsWithNameDelegate0>(wrappedType, "GetSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            GetTypesByMetadataNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetTypesByMetadataNameDelegate0>(wrappedType, "GetTypesByMetadataName", "fullyQualifiedMetadataNameString");
            GetUnreferencedAssemblyIdentitiesFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetUnreferencedAssemblyIdentitiesDelegate0>(wrappedType, "GetUnreferencedAssemblyIdentities", "diagnosticDiagnostic");
            GetUsedAssemblyReferencesFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate0>(wrappedType, "GetUsedAssemblyReferences", "cancellationTokenCancellationToken");
            HasImplicitConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<HasImplicitConversionDelegate0>(wrappedType, "HasImplicitConversion", "fromTypeITypeSymbol", "toTypeITypeSymbol");
            IsSymbolAccessibleWithinFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<IsSymbolAccessibleWithinDelegate0>(wrappedType, "IsSymbolAccessibleWithin", "symbolISymbol", "withinISymbol", "throughTypeITypeSymbol");
            SupportsRuntimeCapabilityFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<SupportsRuntimeCapabilityDelegate0>(wrappedType, "SupportsRuntimeCapability", "capabilityRuntimeCapability");
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::System.String? GetRequiredLanguageVersion(global::Microsoft.CodeAnalysis.Diagnostic diagnostic)
        {
            return GetRequiredLanguageVersionFunc0(diagnostic);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Operations.Lightup.CommonConversionWrapper ClassifyCommonConversion(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination)
        {
            return ClassifyCommonConversionFunc0(_obj, source, destination);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Boolean ContainsSymbolsWithName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return ContainsSymbolsWithNameFunc0(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations)
        {
            return CreateAnonymousTypeSymbolFunc0(_obj, memberTypes, memberNames, memberIsReadOnly, memberLocations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateAnonymousTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> memberTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> memberNames, global::System.Collections.Immutable.ImmutableArray<global::System.Boolean> memberIsReadOnly, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> memberLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> memberNullableAnnotations)
        {
            return CreateAnonymousTypeSymbolFunc1(_obj, memberTypes, memberNames, memberIsReadOnly, memberLocations, memberNullableAnnotations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IArrayTypeSymbol CreateArrayTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol elementType, global::System.Int32 rank, global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx elementNullableAnnotation)
        {
            return CreateArrayTypeSymbolFunc0(_obj, elementType, rank, elementNullableAnnotation);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol operandType)
        {
            return CreateBuiltinOperatorFunc0(_obj, name, returnType, operandType);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol CreateBuiltinOperator(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.ITypeSymbol leftType, global::Microsoft.CodeAnalysis.ITypeSymbol rightType)
        {
            return CreateBuiltinOperatorFunc1(_obj, name, returnType, leftType, rightType);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamespaceSymbol CreateErrorNamespaceSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamespaceSymbol container, global::System.String name)
        {
            return CreateErrorNamespaceSymbolFunc0(_obj, container, name);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.IFunctionPointerTypeSymbolWrapper CreateFunctionPointerTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol returnType, global::Microsoft.CodeAnalysis.RefKind returnRefKind, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> parameterTypes, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.RefKind> parameterRefKinds, global::System.Reflection.Metadata.SignatureCallingConvention callingConvention, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> callingConventionTypes)
        {
            return CreateFunctionPointerTypeSymbolFunc0(_obj, returnType, returnRefKind, parameterTypes, parameterRefKinds, callingConvention, callingConventionTypes);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateNativeIntegerTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Boolean signed)
        {
            return CreateNativeIntegerTypeSymbolFunc0(_obj, signed);
        }

        /// <summary>Method added in version 4.13.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IPreprocessingSymbol CreatePreprocessingSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name)
        {
            return CreatePreprocessingSymbolFunc0(_obj, name);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations)
        {
            return CreateTupleTypeSymbolFunc0(_obj, elementTypes, elementNames, elementLocations);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations)
        {
            return CreateTupleTypeSymbolFunc1(_obj, underlyingType, elementNames, elementLocations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
        {
            return CreateTupleTypeSymbolFunc2(_obj, elementTypes, elementNames, elementLocations, elementNullableAnnotations);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.INamedTypeSymbol CreateTupleTypeSymbol(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, global::System.Collections.Immutable.ImmutableArray<global::System.String> elementNames, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Location> elementLocations, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Lightup.NullableAnnotationEx> elementNullableAnnotations)
        {
            return CreateTupleTypeSymbolFunc3(_obj, underlyingType, elementNames, elementLocations, elementNullableAnnotations);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.EmitResult Emit(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.IO.Stream peStream, global::System.IO.Stream? pdbStream, global::System.IO.Stream? xmlDocumentationStream, global::System.IO.Stream? win32Resources, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ResourceDescription>? manifestResources, global::Microsoft.CodeAnalysis.Emit.EmitOptions options, global::Microsoft.CodeAnalysis.IMethodSymbol? debugEntryPoint, global::System.IO.Stream? sourceLinkStream, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.EmbeddedTextWrapper>? embeddedTexts, global::System.Threading.CancellationToken cancellationToken)
        {
            return EmitFunc0(_obj, peStream, pdbStream, xmlDocumentationStream, win32Resources, manifestResources, options, debugEntryPoint, sourceLinkStream, embeddedTexts, cancellationToken);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.EmitResult Emit(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.IO.Stream peStream, global::System.IO.Stream? pdbStream, global::System.IO.Stream? xmlDocumentationStream, global::System.IO.Stream? win32Resources, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ResourceDescription>? manifestResources, global::Microsoft.CodeAnalysis.Emit.EmitOptions? options, global::Microsoft.CodeAnalysis.IMethodSymbol? debugEntryPoint, global::System.IO.Stream? sourceLinkStream, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Lightup.EmbeddedTextWrapper>? embeddedTexts, global::System.IO.Stream? metadataPEStream, global::System.Threading.CancellationToken cancellationToken)
        {
            return EmitFunc1(_obj, peStream, pdbStream, xmlDocumentationStream, win32Resources, manifestResources, options, debugEntryPoint, sourceLinkStream, embeddedTexts, metadataPEStream, cancellationToken);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.EmitDifferenceResult EmitDifference(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Emit.EmitBaseline baseline, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.Emit.SemanticEdit> edits, global::System.Func<global::Microsoft.CodeAnalysis.ISymbol, global::System.Boolean> isAddedSymbol, global::System.IO.Stream metadataStream, global::System.IO.Stream ilStream, global::System.IO.Stream pdbStream, global::System.Threading.CancellationToken cancellationToken)
        {
            return EmitDifferenceFunc0(_obj, baseline, edits, isAddedSymbol, metadataStream, ilStream, pdbStream, cancellationToken);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModel(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options)
        {
            return GetSemanticModelFunc0(_obj, syntaxTree, options);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetSymbolsWithNameFunc0(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 4.2.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.INamedTypeSymbol> GetTypesByMetadataName(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.String fullyQualifiedMetadataName)
        {
            return GetTypesByMetadataNameFunc0(_obj, fullyQualifiedMetadataName);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.AssemblyIdentity> GetUnreferencedAssemblyIdentities(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Diagnostic diagnostic)
        {
            return GetUnreferencedAssemblyIdentitiesFunc0(_obj, diagnostic);
        }

        /// <summary>Method added in version 3.10.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferences(this global::Microsoft.CodeAnalysis.Compilation _obj, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetUsedAssemblyReferencesFunc0(_obj, cancellationToken);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Boolean HasImplicitConversion(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol? fromType, global::Microsoft.CodeAnalysis.ITypeSymbol? toType)
        {
            return HasImplicitConversionFunc0(_obj, fromType, toType);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::System.Boolean IsSymbolAccessibleWithin(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.ISymbol symbol, global::Microsoft.CodeAnalysis.ISymbol within, global::Microsoft.CodeAnalysis.ITypeSymbol? throughType)
        {
            return IsSymbolAccessibleWithinFunc0(_obj, symbol, within, throughType);
        }

        /// <summary>Method added in version 4.6.0.0.</summary>
        public static global::System.Boolean SupportsRuntimeCapability(this global::Microsoft.CodeAnalysis.Compilation _obj, global::Microsoft.CodeAnalysis.Lightup.RuntimeCapabilityEx capability)
        {
            return SupportsRuntimeCapabilityFunc0(_obj, capability);
        }
    }
}
