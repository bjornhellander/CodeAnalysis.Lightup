// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IImplicitIndexerReferenceOperation. Added in version 4.1.0.0.</summary>
    public partial struct IImplicitIndexerReferenceOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IImplicitIndexerReferenceOperation";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper ArgumentGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.ISymbol IndexerSymbolGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper InstanceGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.ISymbol LengthSymbolGetterDelegate(global::System.Object _obj);

        private static readonly ArgumentGetterDelegate ArgumentGetterFunc;
        private static readonly IndexerSymbolGetterDelegate IndexerSymbolGetterFunc;
        private static readonly InstanceGetterDelegate InstanceGetterFunc;
        private static readonly LengthSymbolGetterDelegate LengthSymbolGetterFunc;

        private readonly global::System.Object wrappedObject;

        static IImplicitIndexerReferenceOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ArgumentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ArgumentGetterDelegate>(WrappedType, nameof(Argument));
            IndexerSymbolGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IndexerSymbolGetterDelegate>(WrappedType, nameof(IndexerSymbol));
            InstanceGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<InstanceGetterDelegate>(WrappedType, nameof(Instance));
            LengthSymbolGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LengthSymbolGetterDelegate>(WrappedType, nameof(LengthSymbol));
        }

        private IImplicitIndexerReferenceOperationWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper Argument
        {
            get { return ArgumentGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ISymbol IndexerSymbol
        {
            get { return IndexerSymbolGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper Instance
        {
            get { return InstanceGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ISymbol LengthSymbol
        {
            get { return LengthSymbolGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IImplicitIndexerReferenceOperationWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new IImplicitIndexerReferenceOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
