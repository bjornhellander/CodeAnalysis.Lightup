// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IDiscardPatternOperation. Added in version 3.0.0.0.</summary>
    public partial struct IDiscardPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IDiscardPatternOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private readonly global::Microsoft.CodeAnalysis.Operations.IPatternOperation wrappedObject;

        static IDiscardPatternOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);
        }

        private IDiscardPatternOperationWrapper(global::Microsoft.CodeAnalysis.Operations.IPatternOperation obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IDiscardPatternOperationWrapper Wrap(global::Microsoft.CodeAnalysis.Operations.IPatternOperation obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new IDiscardPatternOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IPatternOperation Unwrap()
        {
            return wrappedObject;
        }
    }
}
