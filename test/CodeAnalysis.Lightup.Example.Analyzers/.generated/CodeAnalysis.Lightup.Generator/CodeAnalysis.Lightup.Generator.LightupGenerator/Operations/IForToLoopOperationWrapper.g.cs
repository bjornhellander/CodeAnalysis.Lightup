// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IForToLoopOperation. Added in version 2.6.0.0.</summary>
    public partial struct IForToLoopOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IForToLoopOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IOperation InitialValueGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsCheckedGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation LimitValueGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation LoopControlVariableGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> NextVariablesGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IOperation StepValueGetterDelegate(global::System.Object _obj);

        private static readonly InitialValueGetterDelegate InitialValueGetterFunc;
        private static readonly IsCheckedGetterDelegate IsCheckedGetterFunc;
        private static readonly LimitValueGetterDelegate LimitValueGetterFunc;
        private static readonly LoopControlVariableGetterDelegate LoopControlVariableGetterFunc;
        private static readonly NextVariablesGetterDelegate NextVariablesGetterFunc;
        private static readonly StepValueGetterDelegate StepValueGetterFunc;

        private readonly global::System.Object wrappedObject;

        static IForToLoopOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            InitialValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<InitialValueGetterDelegate>(WrappedType, nameof(InitialValue));
            IsCheckedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsCheckedGetterDelegate>(WrappedType, nameof(IsChecked));
            LimitValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LimitValueGetterDelegate>(WrappedType, nameof(LimitValue));
            LoopControlVariableGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LoopControlVariableGetterDelegate>(WrappedType, nameof(LoopControlVariable));
            NextVariablesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<NextVariablesGetterDelegate>(WrappedType, nameof(NextVariables));
            StepValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<StepValueGetterDelegate>(WrappedType, nameof(StepValue));
        }

        private IForToLoopOperationWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation InitialValue
        {
            get { return InitialValueGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Boolean IsChecked
        {
            get { return IsCheckedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation LimitValue
        {
            get { return LimitValueGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation LoopControlVariable
        {
            get { return LoopControlVariableGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> NextVariables
        {
            get { return NextVariablesGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation StepValue
        {
            get { return StepValueGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IForToLoopOperationWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new IForToLoopOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
