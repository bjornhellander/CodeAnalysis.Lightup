// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation. Added in version 2.6.0.0.</summary>
    public partial struct IIncrementOrDecrementOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToTypeGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsCheckedGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsLiftedGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsPostfixGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol? OperatorMethodGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper TargetGetterDelegate(global::System.Object _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly IsCheckedGetterDelegate IsCheckedGetterFunc;
        private static readonly IsLiftedGetterDelegate IsLiftedGetterFunc;
        private static readonly IsPostfixGetterDelegate IsPostfixGetterFunc;
        private static readonly OperatorMethodGetterDelegate OperatorMethodGetterFunc;
        private static readonly TargetGetterDelegate TargetGetterFunc;

        private readonly global::System.Object wrappedObject;

        static IIncrementOrDecrementOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(WrappedType, nameof(ConstrainedToType));
            IsCheckedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsCheckedGetterDelegate>(WrappedType, nameof(IsChecked));
            IsLiftedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsLiftedGetterDelegate>(WrappedType, nameof(IsLifted));
            IsPostfixGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsPostfixGetterDelegate>(WrappedType, nameof(IsPostfix));
            OperatorMethodGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OperatorMethodGetterDelegate>(WrappedType, nameof(OperatorMethod));
            TargetGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<TargetGetterDelegate>(WrappedType, nameof(Target));
        }

        private IIncrementOrDecrementOperationWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToType
        {
            get { return ConstrainedToTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsChecked
        {
            get { return IsCheckedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsLifted
        {
            get { return IsLiftedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsPostfix
        {
            get { return IsPostfixGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IMethodSymbol? OperatorMethod
        {
            get { return OperatorMethodGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.IOperationWrapper Target
        {
            get { return TargetGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IIncrementOrDecrementOperationWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new IIncrementOrDecrementOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
