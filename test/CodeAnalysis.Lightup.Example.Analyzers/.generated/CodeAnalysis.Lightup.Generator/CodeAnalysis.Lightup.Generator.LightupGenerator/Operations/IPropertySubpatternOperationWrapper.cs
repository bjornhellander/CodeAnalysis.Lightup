// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IPropertySubpatternOperation. Added in version 3.8.0.0.</summary>
    public partial struct IPropertySubpatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IPropertySubpatternOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IOperation MemberGetterDelegate(global::Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate global::Microsoft.CodeAnalysis.Operations.IPatternOperation PatternGetterDelegate(global::Microsoft.CodeAnalysis.IOperation? _obj);

        private static readonly MemberGetterDelegate MemberGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.IOperation? wrappedObject;

        static IPropertySubpatternOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            MemberGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MemberGetterDelegate>(WrappedType, nameof(Member));
            PatternGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));
        }

        private IPropertySubpatternOperationWrapper(global::Microsoft.CodeAnalysis.IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation Member
        {
            get { return MemberGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IPatternOperation Pattern
        {
            get { return PatternGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static IPropertySubpatternOperationWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::Microsoft.CodeAnalysis.IOperation>(obj, WrappedType);
            return new IPropertySubpatternOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.IOperation? Unwrap()
        {
            return wrappedObject;
        }
    }
}
