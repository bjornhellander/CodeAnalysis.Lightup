// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation. Added in version 4.9.0.0.</summary>
    public partial struct ICollectionExpressionOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ICollectionExpressionOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol? ConstructMethodGetterDelegate(global::Microsoft.CodeAnalysis.IOperation? _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> ElementsGetterDelegate(global::Microsoft.CodeAnalysis.IOperation? _obj);

        private static readonly ConstructMethodGetterDelegate ConstructMethodGetterFunc;
        private static readonly ElementsGetterDelegate ElementsGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.IOperation? wrappedObject;

        static ICollectionExpressionOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructMethodGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConstructMethodGetterDelegate>(WrappedType, nameof(ConstructMethod));
            ElementsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ElementsGetterDelegate>(WrappedType, nameof(Elements));
        }

        private ICollectionExpressionOperationWrapper(global::Microsoft.CodeAnalysis.IOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IMethodSymbol? ConstructMethod
        {
            get { return ConstructMethodGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> Elements
        {
            get { return ElementsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ICollectionExpressionOperationWrapper Wrap(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.IOperation>(obj, WrappedType);
            return new ICollectionExpressionOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.IOperation? Unwrap()
        {
            return wrappedObject;
        }
    }
}
