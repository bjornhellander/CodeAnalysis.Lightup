// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IInterpolatedStringAppendOperation. Added in version 4.1.0.0.</summary>
    public partial struct IInterpolatedStringAppendOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IInterpolatedStringAppendOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IOperation AppendCallGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation _obj);

        private static readonly AppendCallGetterDelegate AppendCallGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation wrappedObject;

        static IInterpolatedStringAppendOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            AppendCallGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<AppendCallGetterDelegate>(WrappedType, nameof(AppendCall));
        }

        private IInterpolatedStringAppendOperationWrapper(global::Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation AppendCall
        {
            get { return AppendCallGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IInterpolatedStringAppendOperationWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation>(obj, WrappedType);
            return new IInterpolatedStringAppendOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IInterpolatedStringContentOperation Unwrap()
        {
            return wrappedObject;
        }
    }
}
