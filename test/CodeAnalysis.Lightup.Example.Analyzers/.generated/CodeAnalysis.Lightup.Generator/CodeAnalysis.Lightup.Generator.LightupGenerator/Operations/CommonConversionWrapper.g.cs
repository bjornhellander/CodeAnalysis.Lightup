// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Operations.CommonConversion. Added in version 2.6.0.0.</summary>
    public partial struct CommonConversionWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.CommonConversion";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToTypeGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean ExistsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsIdentityGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsImplicitGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsNullableGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsNumericGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsReferenceGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsUserDefinedGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol? MethodSymbolGetterDelegate(global::System.Object _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly ExistsGetterDelegate ExistsGetterFunc;
        private static readonly IsIdentityGetterDelegate IsIdentityGetterFunc;
        private static readonly IsImplicitGetterDelegate IsImplicitGetterFunc;
        private static readonly IsNullableGetterDelegate IsNullableGetterFunc;
        private static readonly IsNumericGetterDelegate IsNumericGetterFunc;
        private static readonly IsReferenceGetterDelegate IsReferenceGetterFunc;
        private static readonly IsUserDefinedGetterDelegate IsUserDefinedGetterFunc;
        private static readonly MethodSymbolGetterDelegate MethodSymbolGetterFunc;

        private readonly global::System.Object wrappedObject;

        static CommonConversionWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(WrappedType, nameof(ConstrainedToType));
            ExistsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ExistsGetterDelegate>(WrappedType, nameof(Exists));
            IsIdentityGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsIdentityGetterDelegate>(WrappedType, nameof(IsIdentity));
            IsImplicitGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsImplicitGetterDelegate>(WrappedType, nameof(IsImplicit));
            IsNullableGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsNullableGetterDelegate>(WrappedType, nameof(IsNullable));
            IsNumericGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsNumericGetterDelegate>(WrappedType, nameof(IsNumeric));
            IsReferenceGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsReferenceGetterDelegate>(WrappedType, nameof(IsReference));
            IsUserDefinedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsUserDefinedGetterDelegate>(WrappedType, nameof(IsUserDefined));
            MethodSymbolGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MethodSymbolGetterDelegate>(WrappedType, nameof(MethodSymbol));
        }

        private CommonConversionWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToType
        {
            get { return ConstrainedToTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean Exists
        {
            get { return ExistsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsIdentity
        {
            get { return IsIdentityGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Boolean IsImplicit
        {
            get { return IsImplicitGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.7.0.0.</summary>
        public global::System.Boolean IsNullable
        {
            get { return IsNullableGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsNumeric
        {
            get { return IsNumericGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsReference
        {
            get { return IsReferenceGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::System.Boolean IsUserDefined
        {
            get { return IsUserDefinedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IMethodSymbol? MethodSymbol
        {
            get { return MethodSymbolGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static CommonConversionWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new CommonConversionWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
