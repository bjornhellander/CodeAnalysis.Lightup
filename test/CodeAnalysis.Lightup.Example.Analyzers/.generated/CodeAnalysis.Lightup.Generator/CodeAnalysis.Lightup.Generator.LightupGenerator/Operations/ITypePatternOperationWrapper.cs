// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.ITypePatternOperation. Added in version 3.8.0.0.</summary>
    public partial struct ITypePatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.ITypePatternOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol MatchedTypeGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly MatchedTypeGetterDelegate MatchedTypeGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static ITypePatternOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            MatchedTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MatchedTypeGetterDelegate>(WrappedType, nameof(MatchedType));
        }

        private ITypePatternOperationWrapper(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ITypeSymbol MatchedType
        {
            get { return MatchedTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ITypePatternOperationWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new ITypePatternOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
        {
            return wrappedObject;
        }
    }
}
