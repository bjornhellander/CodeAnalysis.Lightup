// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Operations.OperationVisitor. Added in version 2.6.0.0.</summary>
    public partial struct OperationVisitorWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationVisitor";

        private static readonly global::System.Type? WrappedType;

        private delegate void DefaultVisitDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.IOperation operation);
        private delegate void VisitDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.IOperation? operation);
        private delegate void VisitAddressOfDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IAddressOfOperationWrapper operation);
        private delegate void VisitAnonymousFunctionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IAnonymousFunctionOperationWrapper operation);
        private delegate void VisitAnonymousObjectCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IAnonymousObjectCreationOperationWrapper operation);
        private delegate void VisitArgumentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IArgumentOperationWrapper operation);
        private delegate void VisitArrayCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayCreationOperationWrapper operation);
        private delegate void VisitArrayElementReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayElementReferenceOperationWrapper operation);
        private delegate void VisitArrayInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayInitializerOperationWrapper operation);
        private delegate void VisitAttributeDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IAttributeOperationWrapper operation);
        private delegate void VisitAwaitDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IAwaitOperationWrapper operation);
        private delegate void VisitBinaryOperatorDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IBinaryOperationWrapper operation);
        private delegate void VisitBinaryPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IBinaryPatternOperationWrapper operation);
        private delegate void VisitBlockDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IBlockOperationWrapper operation);
        private delegate void VisitBranchDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IBranchOperationWrapper operation);
        private delegate void VisitCatchClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICatchClauseOperationWrapper operation);
        private delegate void VisitCaughtExceptionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ICaughtExceptionOperationWrapper operation);
        private delegate void VisitCoalesceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICoalesceOperationWrapper operation);
        private delegate void VisitCoalesceAssignmentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICoalesceAssignmentOperationWrapper operation);
        private delegate void VisitCollectionElementInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICollectionElementInitializerOperationWrapper operation);
        private delegate void VisitCollectionExpressionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICollectionExpressionOperationWrapper operation);
        private delegate void VisitCompoundAssignmentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ICompoundAssignmentOperationWrapper operation);
        private delegate void VisitConditionalDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalOperationWrapper operation);
        private delegate void VisitConditionalAccessDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalAccessOperationWrapper operation);
        private delegate void VisitConditionalAccessInstanceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalAccessInstanceOperationWrapper operation);
        private delegate void VisitConstantPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConstantPatternOperationWrapper operation);
        private delegate void VisitConstructorBodyOperationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConstructorBodyOperationWrapper operation);
        private delegate void VisitConversionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IConversionOperationWrapper operation);
        private delegate void VisitDeclarationExpressionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDeclarationExpressionOperationWrapper operation);
        private delegate void VisitDeclarationPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDeclarationPatternOperationWrapper operation);
        private delegate void VisitDeconstructionAssignmentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDeconstructionAssignmentOperationWrapper operation);
        private delegate void VisitDefaultCaseClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDefaultCaseClauseOperationWrapper operation);
        private delegate void VisitDefaultValueDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDefaultValueOperationWrapper operation);
        private delegate void VisitDelegateCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDelegateCreationOperationWrapper operation);
        private delegate void VisitDiscardOperationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDiscardOperationWrapper operation);
        private delegate void VisitDiscardPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDiscardPatternOperationWrapper operation);
        private delegate void VisitDynamicIndexerAccessDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper operation);
        private delegate void VisitDynamicInvocationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper operation);
        private delegate void VisitDynamicMemberReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicMemberReferenceOperationWrapper operation);
        private delegate void VisitDynamicObjectCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper operation);
        private delegate void VisitEmptyDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IEmptyOperationWrapper operation);
        private delegate void VisitEndDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IEndOperationWrapper operation);
        private delegate void VisitEventAssignmentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IEventAssignmentOperationWrapper operation);
        private delegate void VisitEventReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IEventReferenceOperationWrapper operation);
        private delegate void VisitExpressionStatementDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IExpressionStatementOperationWrapper operation);
        private delegate void VisitFieldInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IFieldInitializerOperationWrapper operation);
        private delegate void VisitFieldReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IFieldReferenceOperationWrapper operation);
        private delegate void VisitFlowAnonymousFunctionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowAnonymousFunctionOperationWrapper operation);
        private delegate void VisitFlowCaptureDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowCaptureOperationWrapper operation);
        private delegate void VisitFlowCaptureReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowCaptureReferenceOperationWrapper operation);
        private delegate void VisitForEachLoopDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IForEachLoopOperationWrapper operation);
        private delegate void VisitForLoopDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IForLoopOperationWrapper operation);
        private delegate void VisitForToLoopDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IForToLoopOperationWrapper operation);
        private delegate void VisitFunctionPointerInvocationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper operation);
        private delegate void VisitImplicitIndexerReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IImplicitIndexerReferenceOperationWrapper operation);
        private delegate void VisitIncrementOrDecrementDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IIncrementOrDecrementOperationWrapper operation);
        private delegate void VisitInlineArrayAccessDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInlineArrayAccessOperationWrapper operation);
        private delegate void VisitInstanceReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInstanceReferenceOperationWrapper operation);
        private delegate void VisitInterpolatedStringDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringOperationWrapper operation);
        private delegate void VisitInterpolatedStringAdditionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAdditionOperationWrapper operation);
        private delegate void VisitInterpolatedStringAppendDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAppendOperationWrapper operation);
        private delegate void VisitInterpolatedStringHandlerArgumentPlaceholderDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper operation);
        private delegate void VisitInterpolatedStringHandlerCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerCreationOperationWrapper operation);
        private delegate void VisitInterpolatedStringTextDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringTextOperationWrapper operation);
        private delegate void VisitInterpolationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolationOperationWrapper operation);
        private delegate void VisitInvalidDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInvalidOperationWrapper operation);
        private delegate void VisitInvocationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IInvocationOperationWrapper operation);
        private delegate void VisitIsNullDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IIsNullOperationWrapper operation);
        private delegate void VisitIsPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IIsPatternOperationWrapper operation);
        private delegate void VisitIsTypeDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IIsTypeOperationWrapper operation);
        private delegate void VisitLabeledDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ILabeledOperationWrapper operation);
        private delegate void VisitListPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IListPatternOperationWrapper operation);
        private delegate void VisitLiteralDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ILiteralOperationWrapper operation);
        private delegate void VisitLocalFunctionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ILocalFunctionOperationWrapper operation);
        private delegate void VisitLocalReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ILocalReferenceOperationWrapper operation);
        private delegate void VisitLockDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ILockOperationWrapper operation);
        private delegate void VisitMemberInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IMemberInitializerOperationWrapper operation);
        private delegate void VisitMethodBodyOperationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IMethodBodyOperationWrapper operation);
        private delegate void VisitMethodReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IMethodReferenceOperationWrapper operation);
        private delegate void VisitNameOfDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.INameOfOperationWrapper operation);
        private delegate void VisitNegatedPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.INegatedPatternOperationWrapper operation);
        private delegate void VisitObjectCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IObjectCreationOperationWrapper operation);
        private delegate void VisitObjectOrCollectionInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IObjectOrCollectionInitializerOperationWrapper operation);
        private delegate void VisitOmittedArgumentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IOmittedArgumentOperationWrapper operation);
        private delegate void VisitParameterInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IParameterInitializerOperationWrapper operation);
        private delegate void VisitParameterReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IParameterReferenceOperationWrapper operation);
        private delegate void VisitParenthesizedDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IParenthesizedOperationWrapper operation);
        private delegate void VisitPatternCaseClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IPatternCaseClauseOperationWrapper operation);
        private delegate void VisitPropertyInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertyInitializerOperationWrapper operation);
        private delegate void VisitPropertyReferenceDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertyReferenceOperationWrapper operation);
        private delegate void VisitPropertySubpatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper operation);
        private delegate void VisitRaiseEventDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRaiseEventOperationWrapper operation);
        private delegate void VisitRangeCaseClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRangeCaseClauseOperationWrapper operation);
        private delegate void VisitRangeOperationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRangeOperationWrapper operation);
        private delegate void VisitRecursivePatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRecursivePatternOperationWrapper operation);
        private delegate void VisitReDimDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IReDimOperationWrapper operation);
        private delegate void VisitReDimClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IReDimClauseOperationWrapper operation);
        private delegate void VisitRelationalCaseClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRelationalCaseClauseOperationWrapper operation);
        private delegate void VisitRelationalPatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IRelationalPatternOperationWrapper operation);
        private delegate void VisitReturnDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IReturnOperationWrapper operation);
        private delegate void VisitSimpleAssignmentDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISimpleAssignmentOperationWrapper operation);
        private delegate void VisitSingleValueCaseClauseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISingleValueCaseClauseOperationWrapper operation);
        private delegate void VisitSizeOfDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISizeOfOperationWrapper operation);
        private delegate void VisitSlicePatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISlicePatternOperationWrapper operation);
        private delegate void VisitSpreadDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISpreadOperationWrapper operation);
        private delegate void VisitStaticLocalInitializationSemaphoreDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IStaticLocalInitializationSemaphoreOperationWrapper operation);
        private delegate void VisitStopDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IStopOperationWrapper operation);
        private delegate void VisitSwitchDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchOperationWrapper operation);
        private delegate void VisitSwitchCaseDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchCaseOperationWrapper operation);
        private delegate void VisitSwitchExpressionDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchExpressionOperationWrapper operation);
        private delegate void VisitSwitchExpressionArmDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchExpressionArmOperationWrapper operation);
        private delegate void VisitThrowDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IThrowOperationWrapper operation);
        private delegate void VisitTranslatedQueryDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITranslatedQueryOperationWrapper operation);
        private delegate void VisitTryDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITryOperationWrapper operation);
        private delegate void VisitTupleDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITupleOperationWrapper operation);
        private delegate void VisitTupleBinaryOperatorDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITupleBinaryOperationWrapper operation);
        private delegate void VisitTypeOfDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITypeOfOperationWrapper operation);
        private delegate void VisitTypeParameterObjectCreationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITypeParameterObjectCreationOperationWrapper operation);
        private delegate void VisitTypePatternDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.ITypePatternOperationWrapper operation);
        private delegate void VisitUnaryOperatorDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IUnaryOperationWrapper operation);
        private delegate void VisitUsingDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IUsingOperationWrapper operation);
        private delegate void VisitUsingDeclarationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IUsingDeclarationOperationWrapper operation);
        private delegate void VisitUtf8StringDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IUtf8StringOperationWrapper operation);
        private delegate void VisitVariableDeclarationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationOperationWrapper operation);
        private delegate void VisitVariableDeclarationGroupDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationGroupOperationWrapper operation);
        private delegate void VisitVariableDeclaratorDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclaratorOperationWrapper operation);
        private delegate void VisitVariableInitializerDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableInitializerOperationWrapper operation);
        private delegate void VisitWhileLoopDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IWhileLoopOperationWrapper operation);
        private delegate void VisitWithDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Operations.Lightup.IWithOperationWrapper operation);

        private static readonly DefaultVisitDelegate0 DefaultVisitFunc0;
        private static readonly VisitDelegate0 VisitFunc0;
        private static readonly VisitAddressOfDelegate0 VisitAddressOfFunc0;
        private static readonly VisitAnonymousFunctionDelegate0 VisitAnonymousFunctionFunc0;
        private static readonly VisitAnonymousObjectCreationDelegate0 VisitAnonymousObjectCreationFunc0;
        private static readonly VisitArgumentDelegate0 VisitArgumentFunc0;
        private static readonly VisitArrayCreationDelegate0 VisitArrayCreationFunc0;
        private static readonly VisitArrayElementReferenceDelegate0 VisitArrayElementReferenceFunc0;
        private static readonly VisitArrayInitializerDelegate0 VisitArrayInitializerFunc0;
        private static readonly VisitAttributeDelegate0 VisitAttributeFunc0;
        private static readonly VisitAwaitDelegate0 VisitAwaitFunc0;
        private static readonly VisitBinaryOperatorDelegate0 VisitBinaryOperatorFunc0;
        private static readonly VisitBinaryPatternDelegate0 VisitBinaryPatternFunc0;
        private static readonly VisitBlockDelegate0 VisitBlockFunc0;
        private static readonly VisitBranchDelegate0 VisitBranchFunc0;
        private static readonly VisitCatchClauseDelegate0 VisitCatchClauseFunc0;
        private static readonly VisitCaughtExceptionDelegate0 VisitCaughtExceptionFunc0;
        private static readonly VisitCoalesceDelegate0 VisitCoalesceFunc0;
        private static readonly VisitCoalesceAssignmentDelegate0 VisitCoalesceAssignmentFunc0;
        private static readonly VisitCollectionElementInitializerDelegate0 VisitCollectionElementInitializerFunc0;
        private static readonly VisitCollectionExpressionDelegate0 VisitCollectionExpressionFunc0;
        private static readonly VisitCompoundAssignmentDelegate0 VisitCompoundAssignmentFunc0;
        private static readonly VisitConditionalDelegate0 VisitConditionalFunc0;
        private static readonly VisitConditionalAccessDelegate0 VisitConditionalAccessFunc0;
        private static readonly VisitConditionalAccessInstanceDelegate0 VisitConditionalAccessInstanceFunc0;
        private static readonly VisitConstantPatternDelegate0 VisitConstantPatternFunc0;
        private static readonly VisitConstructorBodyOperationDelegate0 VisitConstructorBodyOperationFunc0;
        private static readonly VisitConversionDelegate0 VisitConversionFunc0;
        private static readonly VisitDeclarationExpressionDelegate0 VisitDeclarationExpressionFunc0;
        private static readonly VisitDeclarationPatternDelegate0 VisitDeclarationPatternFunc0;
        private static readonly VisitDeconstructionAssignmentDelegate0 VisitDeconstructionAssignmentFunc0;
        private static readonly VisitDefaultCaseClauseDelegate0 VisitDefaultCaseClauseFunc0;
        private static readonly VisitDefaultValueDelegate0 VisitDefaultValueFunc0;
        private static readonly VisitDelegateCreationDelegate0 VisitDelegateCreationFunc0;
        private static readonly VisitDiscardOperationDelegate0 VisitDiscardOperationFunc0;
        private static readonly VisitDiscardPatternDelegate0 VisitDiscardPatternFunc0;
        private static readonly VisitDynamicIndexerAccessDelegate0 VisitDynamicIndexerAccessFunc0;
        private static readonly VisitDynamicInvocationDelegate0 VisitDynamicInvocationFunc0;
        private static readonly VisitDynamicMemberReferenceDelegate0 VisitDynamicMemberReferenceFunc0;
        private static readonly VisitDynamicObjectCreationDelegate0 VisitDynamicObjectCreationFunc0;
        private static readonly VisitEmptyDelegate0 VisitEmptyFunc0;
        private static readonly VisitEndDelegate0 VisitEndFunc0;
        private static readonly VisitEventAssignmentDelegate0 VisitEventAssignmentFunc0;
        private static readonly VisitEventReferenceDelegate0 VisitEventReferenceFunc0;
        private static readonly VisitExpressionStatementDelegate0 VisitExpressionStatementFunc0;
        private static readonly VisitFieldInitializerDelegate0 VisitFieldInitializerFunc0;
        private static readonly VisitFieldReferenceDelegate0 VisitFieldReferenceFunc0;
        private static readonly VisitFlowAnonymousFunctionDelegate0 VisitFlowAnonymousFunctionFunc0;
        private static readonly VisitFlowCaptureDelegate0 VisitFlowCaptureFunc0;
        private static readonly VisitFlowCaptureReferenceDelegate0 VisitFlowCaptureReferenceFunc0;
        private static readonly VisitForEachLoopDelegate0 VisitForEachLoopFunc0;
        private static readonly VisitForLoopDelegate0 VisitForLoopFunc0;
        private static readonly VisitForToLoopDelegate0 VisitForToLoopFunc0;
        private static readonly VisitFunctionPointerInvocationDelegate0 VisitFunctionPointerInvocationFunc0;
        private static readonly VisitImplicitIndexerReferenceDelegate0 VisitImplicitIndexerReferenceFunc0;
        private static readonly VisitIncrementOrDecrementDelegate0 VisitIncrementOrDecrementFunc0;
        private static readonly VisitInlineArrayAccessDelegate0 VisitInlineArrayAccessFunc0;
        private static readonly VisitInstanceReferenceDelegate0 VisitInstanceReferenceFunc0;
        private static readonly VisitInterpolatedStringDelegate0 VisitInterpolatedStringFunc0;
        private static readonly VisitInterpolatedStringAdditionDelegate0 VisitInterpolatedStringAdditionFunc0;
        private static readonly VisitInterpolatedStringAppendDelegate0 VisitInterpolatedStringAppendFunc0;
        private static readonly VisitInterpolatedStringHandlerArgumentPlaceholderDelegate0 VisitInterpolatedStringHandlerArgumentPlaceholderFunc0;
        private static readonly VisitInterpolatedStringHandlerCreationDelegate0 VisitInterpolatedStringHandlerCreationFunc0;
        private static readonly VisitInterpolatedStringTextDelegate0 VisitInterpolatedStringTextFunc0;
        private static readonly VisitInterpolationDelegate0 VisitInterpolationFunc0;
        private static readonly VisitInvalidDelegate0 VisitInvalidFunc0;
        private static readonly VisitInvocationDelegate0 VisitInvocationFunc0;
        private static readonly VisitIsNullDelegate0 VisitIsNullFunc0;
        private static readonly VisitIsPatternDelegate0 VisitIsPatternFunc0;
        private static readonly VisitIsTypeDelegate0 VisitIsTypeFunc0;
        private static readonly VisitLabeledDelegate0 VisitLabeledFunc0;
        private static readonly VisitListPatternDelegate0 VisitListPatternFunc0;
        private static readonly VisitLiteralDelegate0 VisitLiteralFunc0;
        private static readonly VisitLocalFunctionDelegate0 VisitLocalFunctionFunc0;
        private static readonly VisitLocalReferenceDelegate0 VisitLocalReferenceFunc0;
        private static readonly VisitLockDelegate0 VisitLockFunc0;
        private static readonly VisitMemberInitializerDelegate0 VisitMemberInitializerFunc0;
        private static readonly VisitMethodBodyOperationDelegate0 VisitMethodBodyOperationFunc0;
        private static readonly VisitMethodReferenceDelegate0 VisitMethodReferenceFunc0;
        private static readonly VisitNameOfDelegate0 VisitNameOfFunc0;
        private static readonly VisitNegatedPatternDelegate0 VisitNegatedPatternFunc0;
        private static readonly VisitObjectCreationDelegate0 VisitObjectCreationFunc0;
        private static readonly VisitObjectOrCollectionInitializerDelegate0 VisitObjectOrCollectionInitializerFunc0;
        private static readonly VisitOmittedArgumentDelegate0 VisitOmittedArgumentFunc0;
        private static readonly VisitParameterInitializerDelegate0 VisitParameterInitializerFunc0;
        private static readonly VisitParameterReferenceDelegate0 VisitParameterReferenceFunc0;
        private static readonly VisitParenthesizedDelegate0 VisitParenthesizedFunc0;
        private static readonly VisitPatternCaseClauseDelegate0 VisitPatternCaseClauseFunc0;
        private static readonly VisitPropertyInitializerDelegate0 VisitPropertyInitializerFunc0;
        private static readonly VisitPropertyReferenceDelegate0 VisitPropertyReferenceFunc0;
        private static readonly VisitPropertySubpatternDelegate0 VisitPropertySubpatternFunc0;
        private static readonly VisitRaiseEventDelegate0 VisitRaiseEventFunc0;
        private static readonly VisitRangeCaseClauseDelegate0 VisitRangeCaseClauseFunc0;
        private static readonly VisitRangeOperationDelegate0 VisitRangeOperationFunc0;
        private static readonly VisitRecursivePatternDelegate0 VisitRecursivePatternFunc0;
        private static readonly VisitReDimDelegate0 VisitReDimFunc0;
        private static readonly VisitReDimClauseDelegate0 VisitReDimClauseFunc0;
        private static readonly VisitRelationalCaseClauseDelegate0 VisitRelationalCaseClauseFunc0;
        private static readonly VisitRelationalPatternDelegate0 VisitRelationalPatternFunc0;
        private static readonly VisitReturnDelegate0 VisitReturnFunc0;
        private static readonly VisitSimpleAssignmentDelegate0 VisitSimpleAssignmentFunc0;
        private static readonly VisitSingleValueCaseClauseDelegate0 VisitSingleValueCaseClauseFunc0;
        private static readonly VisitSizeOfDelegate0 VisitSizeOfFunc0;
        private static readonly VisitSlicePatternDelegate0 VisitSlicePatternFunc0;
        private static readonly VisitSpreadDelegate0 VisitSpreadFunc0;
        private static readonly VisitStaticLocalInitializationSemaphoreDelegate0 VisitStaticLocalInitializationSemaphoreFunc0;
        private static readonly VisitStopDelegate0 VisitStopFunc0;
        private static readonly VisitSwitchDelegate0 VisitSwitchFunc0;
        private static readonly VisitSwitchCaseDelegate0 VisitSwitchCaseFunc0;
        private static readonly VisitSwitchExpressionDelegate0 VisitSwitchExpressionFunc0;
        private static readonly VisitSwitchExpressionArmDelegate0 VisitSwitchExpressionArmFunc0;
        private static readonly VisitThrowDelegate0 VisitThrowFunc0;
        private static readonly VisitTranslatedQueryDelegate0 VisitTranslatedQueryFunc0;
        private static readonly VisitTryDelegate0 VisitTryFunc0;
        private static readonly VisitTupleDelegate0 VisitTupleFunc0;
        private static readonly VisitTupleBinaryOperatorDelegate0 VisitTupleBinaryOperatorFunc0;
        private static readonly VisitTypeOfDelegate0 VisitTypeOfFunc0;
        private static readonly VisitTypeParameterObjectCreationDelegate0 VisitTypeParameterObjectCreationFunc0;
        private static readonly VisitTypePatternDelegate0 VisitTypePatternFunc0;
        private static readonly VisitUnaryOperatorDelegate0 VisitUnaryOperatorFunc0;
        private static readonly VisitUsingDelegate0 VisitUsingFunc0;
        private static readonly VisitUsingDeclarationDelegate0 VisitUsingDeclarationFunc0;
        private static readonly VisitUtf8StringDelegate0 VisitUtf8StringFunc0;
        private static readonly VisitVariableDeclarationDelegate0 VisitVariableDeclarationFunc0;
        private static readonly VisitVariableDeclarationGroupDelegate0 VisitVariableDeclarationGroupFunc0;
        private static readonly VisitVariableDeclaratorDelegate0 VisitVariableDeclaratorFunc0;
        private static readonly VisitVariableInitializerDelegate0 VisitVariableInitializerFunc0;
        private static readonly VisitWhileLoopDelegate0 VisitWhileLoopFunc0;
        private static readonly VisitWithDelegate0 VisitWithFunc0;

        private readonly global::System.Object wrappedObject;

        static OperationVisitorWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DefaultVisitFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<DefaultVisitDelegate0>(WrappedType, "DefaultVisit", "operationIOperation");
            VisitFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDelegate0>(WrappedType, "Visit", "operationIOperation");
            VisitAddressOfFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitAddressOfDelegate0>(WrappedType, "VisitAddressOf", "operationIAddressOfOperation");
            VisitAnonymousFunctionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitAnonymousFunctionDelegate0>(WrappedType, "VisitAnonymousFunction", "operationIAnonymousFunctionOperation");
            VisitAnonymousObjectCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitAnonymousObjectCreationDelegate0>(WrappedType, "VisitAnonymousObjectCreation", "operationIAnonymousObjectCreationOperation");
            VisitArgumentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitArgumentDelegate0>(WrappedType, "VisitArgument", "operationIArgumentOperation");
            VisitArrayCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitArrayCreationDelegate0>(WrappedType, "VisitArrayCreation", "operationIArrayCreationOperation");
            VisitArrayElementReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitArrayElementReferenceDelegate0>(WrappedType, "VisitArrayElementReference", "operationIArrayElementReferenceOperation");
            VisitArrayInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitArrayInitializerDelegate0>(WrappedType, "VisitArrayInitializer", "operationIArrayInitializerOperation");
            VisitAttributeFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitAttributeDelegate0>(WrappedType, "VisitAttribute", "operationIAttributeOperation");
            VisitAwaitFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitAwaitDelegate0>(WrappedType, "VisitAwait", "operationIAwaitOperation");
            VisitBinaryOperatorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitBinaryOperatorDelegate0>(WrappedType, "VisitBinaryOperator", "operationIBinaryOperation");
            VisitBinaryPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitBinaryPatternDelegate0>(WrappedType, "VisitBinaryPattern", "operationIBinaryPatternOperation");
            VisitBlockFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitBlockDelegate0>(WrappedType, "VisitBlock", "operationIBlockOperation");
            VisitBranchFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitBranchDelegate0>(WrappedType, "VisitBranch", "operationIBranchOperation");
            VisitCatchClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCatchClauseDelegate0>(WrappedType, "VisitCatchClause", "operationICatchClauseOperation");
            VisitCaughtExceptionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCaughtExceptionDelegate0>(WrappedType, "VisitCaughtException", "operationICaughtExceptionOperation");
            VisitCoalesceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCoalesceDelegate0>(WrappedType, "VisitCoalesce", "operationICoalesceOperation");
            VisitCoalesceAssignmentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCoalesceAssignmentDelegate0>(WrappedType, "VisitCoalesceAssignment", "operationICoalesceAssignmentOperation");
            VisitCollectionElementInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCollectionElementInitializerDelegate0>(WrappedType, "VisitCollectionElementInitializer", "operationICollectionElementInitializerOperation");
            VisitCollectionExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCollectionExpressionDelegate0>(WrappedType, "VisitCollectionExpression", "operationICollectionExpressionOperation");
            VisitCompoundAssignmentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitCompoundAssignmentDelegate0>(WrappedType, "VisitCompoundAssignment", "operationICompoundAssignmentOperation");
            VisitConditionalFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConditionalDelegate0>(WrappedType, "VisitConditional", "operationIConditionalOperation");
            VisitConditionalAccessFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConditionalAccessDelegate0>(WrappedType, "VisitConditionalAccess", "operationIConditionalAccessOperation");
            VisitConditionalAccessInstanceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConditionalAccessInstanceDelegate0>(WrappedType, "VisitConditionalAccessInstance", "operationIConditionalAccessInstanceOperation");
            VisitConstantPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConstantPatternDelegate0>(WrappedType, "VisitConstantPattern", "operationIConstantPatternOperation");
            VisitConstructorBodyOperationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConstructorBodyOperationDelegate0>(WrappedType, "VisitConstructorBodyOperation", "operationIConstructorBodyOperation");
            VisitConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitConversionDelegate0>(WrappedType, "VisitConversion", "operationIConversionOperation");
            VisitDeclarationExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDeclarationExpressionDelegate0>(WrappedType, "VisitDeclarationExpression", "operationIDeclarationExpressionOperation");
            VisitDeclarationPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDeclarationPatternDelegate0>(WrappedType, "VisitDeclarationPattern", "operationIDeclarationPatternOperation");
            VisitDeconstructionAssignmentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDeconstructionAssignmentDelegate0>(WrappedType, "VisitDeconstructionAssignment", "operationIDeconstructionAssignmentOperation");
            VisitDefaultCaseClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDefaultCaseClauseDelegate0>(WrappedType, "VisitDefaultCaseClause", "operationIDefaultCaseClauseOperation");
            VisitDefaultValueFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDefaultValueDelegate0>(WrappedType, "VisitDefaultValue", "operationIDefaultValueOperation");
            VisitDelegateCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDelegateCreationDelegate0>(WrappedType, "VisitDelegateCreation", "operationIDelegateCreationOperation");
            VisitDiscardOperationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDiscardOperationDelegate0>(WrappedType, "VisitDiscardOperation", "operationIDiscardOperation");
            VisitDiscardPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDiscardPatternDelegate0>(WrappedType, "VisitDiscardPattern", "operationIDiscardPatternOperation");
            VisitDynamicIndexerAccessFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDynamicIndexerAccessDelegate0>(WrappedType, "VisitDynamicIndexerAccess", "operationIDynamicIndexerAccessOperation");
            VisitDynamicInvocationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDynamicInvocationDelegate0>(WrappedType, "VisitDynamicInvocation", "operationIDynamicInvocationOperation");
            VisitDynamicMemberReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDynamicMemberReferenceDelegate0>(WrappedType, "VisitDynamicMemberReference", "operationIDynamicMemberReferenceOperation");
            VisitDynamicObjectCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDynamicObjectCreationDelegate0>(WrappedType, "VisitDynamicObjectCreation", "operationIDynamicObjectCreationOperation");
            VisitEmptyFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitEmptyDelegate0>(WrappedType, "VisitEmpty", "operationIEmptyOperation");
            VisitEndFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitEndDelegate0>(WrappedType, "VisitEnd", "operationIEndOperation");
            VisitEventAssignmentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitEventAssignmentDelegate0>(WrappedType, "VisitEventAssignment", "operationIEventAssignmentOperation");
            VisitEventReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitEventReferenceDelegate0>(WrappedType, "VisitEventReference", "operationIEventReferenceOperation");
            VisitExpressionStatementFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitExpressionStatementDelegate0>(WrappedType, "VisitExpressionStatement", "operationIExpressionStatementOperation");
            VisitFieldInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFieldInitializerDelegate0>(WrappedType, "VisitFieldInitializer", "operationIFieldInitializerOperation");
            VisitFieldReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFieldReferenceDelegate0>(WrappedType, "VisitFieldReference", "operationIFieldReferenceOperation");
            VisitFlowAnonymousFunctionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFlowAnonymousFunctionDelegate0>(WrappedType, "VisitFlowAnonymousFunction", "operationIFlowAnonymousFunctionOperation");
            VisitFlowCaptureFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFlowCaptureDelegate0>(WrappedType, "VisitFlowCapture", "operationIFlowCaptureOperation");
            VisitFlowCaptureReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFlowCaptureReferenceDelegate0>(WrappedType, "VisitFlowCaptureReference", "operationIFlowCaptureReferenceOperation");
            VisitForEachLoopFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitForEachLoopDelegate0>(WrappedType, "VisitForEachLoop", "operationIForEachLoopOperation");
            VisitForLoopFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitForLoopDelegate0>(WrappedType, "VisitForLoop", "operationIForLoopOperation");
            VisitForToLoopFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitForToLoopDelegate0>(WrappedType, "VisitForToLoop", "operationIForToLoopOperation");
            VisitFunctionPointerInvocationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerInvocationDelegate0>(WrappedType, "VisitFunctionPointerInvocation", "operationIFunctionPointerInvocationOperation");
            VisitImplicitIndexerReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitImplicitIndexerReferenceDelegate0>(WrappedType, "VisitImplicitIndexerReference", "operationIImplicitIndexerReferenceOperation");
            VisitIncrementOrDecrementFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitIncrementOrDecrementDelegate0>(WrappedType, "VisitIncrementOrDecrement", "operationIIncrementOrDecrementOperation");
            VisitInlineArrayAccessFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInlineArrayAccessDelegate0>(WrappedType, "VisitInlineArrayAccess", "operationIInlineArrayAccessOperation");
            VisitInstanceReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInstanceReferenceDelegate0>(WrappedType, "VisitInstanceReference", "operationIInstanceReferenceOperation");
            VisitInterpolatedStringFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringDelegate0>(WrappedType, "VisitInterpolatedString", "operationIInterpolatedStringOperation");
            VisitInterpolatedStringAdditionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringAdditionDelegate0>(WrappedType, "VisitInterpolatedStringAddition", "operationIInterpolatedStringAdditionOperation");
            VisitInterpolatedStringAppendFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringAppendDelegate0>(WrappedType, "VisitInterpolatedStringAppend", "operationIInterpolatedStringAppendOperation");
            VisitInterpolatedStringHandlerArgumentPlaceholderFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringHandlerArgumentPlaceholderDelegate0>(WrappedType, "VisitInterpolatedStringHandlerArgumentPlaceholder", "operationIInterpolatedStringHandlerArgumentPlaceholderOperation");
            VisitInterpolatedStringHandlerCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringHandlerCreationDelegate0>(WrappedType, "VisitInterpolatedStringHandlerCreation", "operationIInterpolatedStringHandlerCreationOperation");
            VisitInterpolatedStringTextFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolatedStringTextDelegate0>(WrappedType, "VisitInterpolatedStringText", "operationIInterpolatedStringTextOperation");
            VisitInterpolationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInterpolationDelegate0>(WrappedType, "VisitInterpolation", "operationIInterpolationOperation");
            VisitInvalidFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInvalidDelegate0>(WrappedType, "VisitInvalid", "operationIInvalidOperation");
            VisitInvocationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitInvocationDelegate0>(WrappedType, "VisitInvocation", "operationIInvocationOperation");
            VisitIsNullFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitIsNullDelegate0>(WrappedType, "VisitIsNull", "operationIIsNullOperation");
            VisitIsPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitIsPatternDelegate0>(WrappedType, "VisitIsPattern", "operationIIsPatternOperation");
            VisitIsTypeFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitIsTypeDelegate0>(WrappedType, "VisitIsType", "operationIIsTypeOperation");
            VisitLabeledFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitLabeledDelegate0>(WrappedType, "VisitLabeled", "operationILabeledOperation");
            VisitListPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitListPatternDelegate0>(WrappedType, "VisitListPattern", "operationIListPatternOperation");
            VisitLiteralFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitLiteralDelegate0>(WrappedType, "VisitLiteral", "operationILiteralOperation");
            VisitLocalFunctionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitLocalFunctionDelegate0>(WrappedType, "VisitLocalFunction", "operationILocalFunctionOperation");
            VisitLocalReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitLocalReferenceDelegate0>(WrappedType, "VisitLocalReference", "operationILocalReferenceOperation");
            VisitLockFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitLockDelegate0>(WrappedType, "VisitLock", "operationILockOperation");
            VisitMemberInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitMemberInitializerDelegate0>(WrappedType, "VisitMemberInitializer", "operationIMemberInitializerOperation");
            VisitMethodBodyOperationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitMethodBodyOperationDelegate0>(WrappedType, "VisitMethodBodyOperation", "operationIMethodBodyOperation");
            VisitMethodReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitMethodReferenceDelegate0>(WrappedType, "VisitMethodReference", "operationIMethodReferenceOperation");
            VisitNameOfFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitNameOfDelegate0>(WrappedType, "VisitNameOf", "operationINameOfOperation");
            VisitNegatedPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitNegatedPatternDelegate0>(WrappedType, "VisitNegatedPattern", "operationINegatedPatternOperation");
            VisitObjectCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitObjectCreationDelegate0>(WrappedType, "VisitObjectCreation", "operationIObjectCreationOperation");
            VisitObjectOrCollectionInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitObjectOrCollectionInitializerDelegate0>(WrappedType, "VisitObjectOrCollectionInitializer", "operationIObjectOrCollectionInitializerOperation");
            VisitOmittedArgumentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitOmittedArgumentDelegate0>(WrappedType, "VisitOmittedArgument", "operationIOmittedArgumentOperation");
            VisitParameterInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitParameterInitializerDelegate0>(WrappedType, "VisitParameterInitializer", "operationIParameterInitializerOperation");
            VisitParameterReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitParameterReferenceDelegate0>(WrappedType, "VisitParameterReference", "operationIParameterReferenceOperation");
            VisitParenthesizedFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitParenthesizedDelegate0>(WrappedType, "VisitParenthesized", "operationIParenthesizedOperation");
            VisitPatternCaseClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitPatternCaseClauseDelegate0>(WrappedType, "VisitPatternCaseClause", "operationIPatternCaseClauseOperation");
            VisitPropertyInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitPropertyInitializerDelegate0>(WrappedType, "VisitPropertyInitializer", "operationIPropertyInitializerOperation");
            VisitPropertyReferenceFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitPropertyReferenceDelegate0>(WrappedType, "VisitPropertyReference", "operationIPropertyReferenceOperation");
            VisitPropertySubpatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitPropertySubpatternDelegate0>(WrappedType, "VisitPropertySubpattern", "operationIPropertySubpatternOperation");
            VisitRaiseEventFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRaiseEventDelegate0>(WrappedType, "VisitRaiseEvent", "operationIRaiseEventOperation");
            VisitRangeCaseClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRangeCaseClauseDelegate0>(WrappedType, "VisitRangeCaseClause", "operationIRangeCaseClauseOperation");
            VisitRangeOperationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRangeOperationDelegate0>(WrappedType, "VisitRangeOperation", "operationIRangeOperation");
            VisitRecursivePatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRecursivePatternDelegate0>(WrappedType, "VisitRecursivePattern", "operationIRecursivePatternOperation");
            VisitReDimFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitReDimDelegate0>(WrappedType, "VisitReDim", "operationIReDimOperation");
            VisitReDimClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitReDimClauseDelegate0>(WrappedType, "VisitReDimClause", "operationIReDimClauseOperation");
            VisitRelationalCaseClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRelationalCaseClauseDelegate0>(WrappedType, "VisitRelationalCaseClause", "operationIRelationalCaseClauseOperation");
            VisitRelationalPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitRelationalPatternDelegate0>(WrappedType, "VisitRelationalPattern", "operationIRelationalPatternOperation");
            VisitReturnFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitReturnDelegate0>(WrappedType, "VisitReturn", "operationIReturnOperation");
            VisitSimpleAssignmentFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSimpleAssignmentDelegate0>(WrappedType, "VisitSimpleAssignment", "operationISimpleAssignmentOperation");
            VisitSingleValueCaseClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSingleValueCaseClauseDelegate0>(WrappedType, "VisitSingleValueCaseClause", "operationISingleValueCaseClauseOperation");
            VisitSizeOfFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSizeOfDelegate0>(WrappedType, "VisitSizeOf", "operationISizeOfOperation");
            VisitSlicePatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSlicePatternDelegate0>(WrappedType, "VisitSlicePattern", "operationISlicePatternOperation");
            VisitSpreadFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSpreadDelegate0>(WrappedType, "VisitSpread", "operationISpreadOperation");
            VisitStaticLocalInitializationSemaphoreFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitStaticLocalInitializationSemaphoreDelegate0>(WrappedType, "VisitStaticLocalInitializationSemaphore", "operationIStaticLocalInitializationSemaphoreOperation");
            VisitStopFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitStopDelegate0>(WrappedType, "VisitStop", "operationIStopOperation");
            VisitSwitchFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSwitchDelegate0>(WrappedType, "VisitSwitch", "operationISwitchOperation");
            VisitSwitchCaseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSwitchCaseDelegate0>(WrappedType, "VisitSwitchCase", "operationISwitchCaseOperation");
            VisitSwitchExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSwitchExpressionDelegate0>(WrappedType, "VisitSwitchExpression", "operationISwitchExpressionOperation");
            VisitSwitchExpressionArmFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitSwitchExpressionArmDelegate0>(WrappedType, "VisitSwitchExpressionArm", "operationISwitchExpressionArmOperation");
            VisitThrowFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitThrowDelegate0>(WrappedType, "VisitThrow", "operationIThrowOperation");
            VisitTranslatedQueryFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTranslatedQueryDelegate0>(WrappedType, "VisitTranslatedQuery", "operationITranslatedQueryOperation");
            VisitTryFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTryDelegate0>(WrappedType, "VisitTry", "operationITryOperation");
            VisitTupleFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTupleDelegate0>(WrappedType, "VisitTuple", "operationITupleOperation");
            VisitTupleBinaryOperatorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTupleBinaryOperatorDelegate0>(WrappedType, "VisitTupleBinaryOperator", "operationITupleBinaryOperation");
            VisitTypeOfFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTypeOfDelegate0>(WrappedType, "VisitTypeOf", "operationITypeOfOperation");
            VisitTypeParameterObjectCreationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTypeParameterObjectCreationDelegate0>(WrappedType, "VisitTypeParameterObjectCreation", "operationITypeParameterObjectCreationOperation");
            VisitTypePatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitTypePatternDelegate0>(WrappedType, "VisitTypePattern", "operationITypePatternOperation");
            VisitUnaryOperatorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitUnaryOperatorDelegate0>(WrappedType, "VisitUnaryOperator", "operationIUnaryOperation");
            VisitUsingFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitUsingDelegate0>(WrappedType, "VisitUsing", "operationIUsingOperation");
            VisitUsingDeclarationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitUsingDeclarationDelegate0>(WrappedType, "VisitUsingDeclaration", "operationIUsingDeclarationOperation");
            VisitUtf8StringFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitUtf8StringDelegate0>(WrappedType, "VisitUtf8String", "operationIUtf8StringOperation");
            VisitVariableDeclarationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitVariableDeclarationDelegate0>(WrappedType, "VisitVariableDeclaration", "operationIVariableDeclarationOperation");
            VisitVariableDeclarationGroupFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitVariableDeclarationGroupDelegate0>(WrappedType, "VisitVariableDeclarationGroup", "operationIVariableDeclarationGroupOperation");
            VisitVariableDeclaratorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitVariableDeclaratorDelegate0>(WrappedType, "VisitVariableDeclarator", "operationIVariableDeclaratorOperation");
            VisitVariableInitializerFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitVariableInitializerDelegate0>(WrappedType, "VisitVariableInitializer", "operationIVariableInitializerOperation");
            VisitWhileLoopFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitWhileLoopDelegate0>(WrappedType, "VisitWhileLoop", "operationIWhileLoopOperation");
            VisitWithFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitWithDelegate0>(WrappedType, "VisitWith", "operationIWithOperation");
        }

        private OperationVisitorWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static OperationVisitorWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new OperationVisitorWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void DefaultVisit(global::Microsoft.CodeAnalysis.IOperation operation)
        {
            DefaultVisitFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void Visit(global::Microsoft.CodeAnalysis.IOperation? operation)
        {
            VisitFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitAddressOf(global::Microsoft.CodeAnalysis.Operations.Lightup.IAddressOfOperationWrapper operation)
        {
            VisitAddressOfFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitAnonymousFunction(global::Microsoft.CodeAnalysis.Operations.Lightup.IAnonymousFunctionOperationWrapper operation)
        {
            VisitAnonymousFunctionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitAnonymousObjectCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IAnonymousObjectCreationOperationWrapper operation)
        {
            VisitAnonymousObjectCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitArgument(global::Microsoft.CodeAnalysis.Operations.Lightup.IArgumentOperationWrapper operation)
        {
            VisitArgumentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitArrayCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayCreationOperationWrapper operation)
        {
            VisitArrayCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitArrayElementReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayElementReferenceOperationWrapper operation)
        {
            VisitArrayElementReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitArrayInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IArrayInitializerOperationWrapper operation)
        {
            VisitArrayInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.5.0.0.</summary>
        public void VisitAttribute(global::Microsoft.CodeAnalysis.Operations.Lightup.IAttributeOperationWrapper operation)
        {
            VisitAttributeFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitAwait(global::Microsoft.CodeAnalysis.Operations.Lightup.IAwaitOperationWrapper operation)
        {
            VisitAwaitFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitBinaryOperator(global::Microsoft.CodeAnalysis.Operations.Lightup.IBinaryOperationWrapper operation)
        {
            VisitBinaryOperatorFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public void VisitBinaryPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IBinaryPatternOperationWrapper operation)
        {
            VisitBinaryPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitBlock(global::Microsoft.CodeAnalysis.Operations.Lightup.IBlockOperationWrapper operation)
        {
            VisitBlockFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitBranch(global::Microsoft.CodeAnalysis.Operations.Lightup.IBranchOperationWrapper operation)
        {
            VisitBranchFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitCatchClause(global::Microsoft.CodeAnalysis.Operations.Lightup.ICatchClauseOperationWrapper operation)
        {
            VisitCatchClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitCaughtException(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ICaughtExceptionOperationWrapper operation)
        {
            VisitCaughtExceptionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitCoalesce(global::Microsoft.CodeAnalysis.Operations.Lightup.ICoalesceOperationWrapper operation)
        {
            VisitCoalesceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitCoalesceAssignment(global::Microsoft.CodeAnalysis.Operations.Lightup.ICoalesceAssignmentOperationWrapper operation)
        {
            VisitCoalesceAssignmentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitCollectionElementInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.ICollectionElementInitializerOperationWrapper operation)
        {
            VisitCollectionElementInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.9.0.0.</summary>
        public void VisitCollectionExpression(global::Microsoft.CodeAnalysis.Operations.Lightup.ICollectionExpressionOperationWrapper operation)
        {
            VisitCollectionExpressionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitCompoundAssignment(global::Microsoft.CodeAnalysis.Operations.Lightup.ICompoundAssignmentOperationWrapper operation)
        {
            VisitCompoundAssignmentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitConditional(global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalOperationWrapper operation)
        {
            VisitConditionalFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitConditionalAccess(global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalAccessOperationWrapper operation)
        {
            VisitConditionalAccessFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitConditionalAccessInstance(global::Microsoft.CodeAnalysis.Operations.Lightup.IConditionalAccessInstanceOperationWrapper operation)
        {
            VisitConditionalAccessInstanceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitConstantPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IConstantPatternOperationWrapper operation)
        {
            VisitConstantPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public void VisitConstructorBodyOperation(global::Microsoft.CodeAnalysis.Operations.Lightup.IConstructorBodyOperationWrapper operation)
        {
            VisitConstructorBodyOperationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitConversion(global::Microsoft.CodeAnalysis.Operations.Lightup.IConversionOperationWrapper operation)
        {
            VisitConversionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDeclarationExpression(global::Microsoft.CodeAnalysis.Operations.Lightup.IDeclarationExpressionOperationWrapper operation)
        {
            VisitDeclarationExpressionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDeclarationPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IDeclarationPatternOperationWrapper operation)
        {
            VisitDeclarationPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDeconstructionAssignment(global::Microsoft.CodeAnalysis.Operations.Lightup.IDeconstructionAssignmentOperationWrapper operation)
        {
            VisitDeconstructionAssignmentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDefaultCaseClause(global::Microsoft.CodeAnalysis.Operations.Lightup.IDefaultCaseClauseOperationWrapper operation)
        {
            VisitDefaultCaseClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDefaultValue(global::Microsoft.CodeAnalysis.Operations.Lightup.IDefaultValueOperationWrapper operation)
        {
            VisitDefaultValueFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDelegateCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IDelegateCreationOperationWrapper operation)
        {
            VisitDelegateCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public void VisitDiscardOperation(global::Microsoft.CodeAnalysis.Operations.Lightup.IDiscardOperationWrapper operation)
        {
            VisitDiscardOperationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitDiscardPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IDiscardPatternOperationWrapper operation)
        {
            VisitDiscardPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDynamicIndexerAccess(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper operation)
        {
            VisitDynamicIndexerAccessFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDynamicInvocation(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper operation)
        {
            VisitDynamicInvocationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDynamicMemberReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicMemberReferenceOperationWrapper operation)
        {
            VisitDynamicMemberReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitDynamicObjectCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper operation)
        {
            VisitDynamicObjectCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitEmpty(global::Microsoft.CodeAnalysis.Operations.Lightup.IEmptyOperationWrapper operation)
        {
            VisitEmptyFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitEnd(global::Microsoft.CodeAnalysis.Operations.Lightup.IEndOperationWrapper operation)
        {
            VisitEndFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitEventAssignment(global::Microsoft.CodeAnalysis.Operations.Lightup.IEventAssignmentOperationWrapper operation)
        {
            VisitEventAssignmentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitEventReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IEventReferenceOperationWrapper operation)
        {
            VisitEventReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitExpressionStatement(global::Microsoft.CodeAnalysis.Operations.Lightup.IExpressionStatementOperationWrapper operation)
        {
            VisitExpressionStatementFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitFieldInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IFieldInitializerOperationWrapper operation)
        {
            VisitFieldInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitFieldReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IFieldReferenceOperationWrapper operation)
        {
            VisitFieldReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitFlowAnonymousFunction(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowAnonymousFunctionOperationWrapper operation)
        {
            VisitFlowAnonymousFunctionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitFlowCapture(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowCaptureOperationWrapper operation)
        {
            VisitFlowCaptureFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitFlowCaptureReference(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IFlowCaptureReferenceOperationWrapper operation)
        {
            VisitFlowCaptureReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitForEachLoop(global::Microsoft.CodeAnalysis.Operations.Lightup.IForEachLoopOperationWrapper operation)
        {
            VisitForEachLoopFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitForLoop(global::Microsoft.CodeAnalysis.Operations.Lightup.IForLoopOperationWrapper operation)
        {
            VisitForLoopFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitForToLoop(global::Microsoft.CodeAnalysis.Operations.Lightup.IForToLoopOperationWrapper operation)
        {
            VisitForToLoopFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitFunctionPointerInvocation(global::Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper operation)
        {
            VisitFunctionPointerInvocationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitImplicitIndexerReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IImplicitIndexerReferenceOperationWrapper operation)
        {
            VisitImplicitIndexerReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitIncrementOrDecrement(global::Microsoft.CodeAnalysis.Operations.Lightup.IIncrementOrDecrementOperationWrapper operation)
        {
            VisitIncrementOrDecrementFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.7.0.0.</summary>
        public void VisitInlineArrayAccess(global::Microsoft.CodeAnalysis.Operations.Lightup.IInlineArrayAccessOperationWrapper operation)
        {
            VisitInlineArrayAccessFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInstanceReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IInstanceReferenceOperationWrapper operation)
        {
            VisitInstanceReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInterpolatedString(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringOperationWrapper operation)
        {
            VisitInterpolatedStringFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitInterpolatedStringAddition(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAdditionOperationWrapper operation)
        {
            VisitInterpolatedStringAdditionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitInterpolatedStringAppend(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringAppendOperationWrapper operation)
        {
            VisitInterpolatedStringAppendFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitInterpolatedStringHandlerArgumentPlaceholder(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerArgumentPlaceholderOperationWrapper operation)
        {
            VisitInterpolatedStringHandlerArgumentPlaceholderFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitInterpolatedStringHandlerCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringHandlerCreationOperationWrapper operation)
        {
            VisitInterpolatedStringHandlerCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInterpolatedStringText(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolatedStringTextOperationWrapper operation)
        {
            VisitInterpolatedStringTextFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInterpolation(global::Microsoft.CodeAnalysis.Operations.Lightup.IInterpolationOperationWrapper operation)
        {
            VisitInterpolationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInvalid(global::Microsoft.CodeAnalysis.Operations.Lightup.IInvalidOperationWrapper operation)
        {
            VisitInvalidFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitInvocation(global::Microsoft.CodeAnalysis.Operations.Lightup.IInvocationOperationWrapper operation)
        {
            VisitInvocationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitIsNull(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IIsNullOperationWrapper operation)
        {
            VisitIsNullFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitIsPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IIsPatternOperationWrapper operation)
        {
            VisitIsPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitIsType(global::Microsoft.CodeAnalysis.Operations.Lightup.IIsTypeOperationWrapper operation)
        {
            VisitIsTypeFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitLabeled(global::Microsoft.CodeAnalysis.Operations.Lightup.ILabeledOperationWrapper operation)
        {
            VisitLabeledFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitListPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IListPatternOperationWrapper operation)
        {
            VisitListPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitLiteral(global::Microsoft.CodeAnalysis.Operations.Lightup.ILiteralOperationWrapper operation)
        {
            VisitLiteralFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitLocalFunction(global::Microsoft.CodeAnalysis.Operations.Lightup.ILocalFunctionOperationWrapper operation)
        {
            VisitLocalFunctionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitLocalReference(global::Microsoft.CodeAnalysis.Operations.Lightup.ILocalReferenceOperationWrapper operation)
        {
            VisitLocalReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitLock(global::Microsoft.CodeAnalysis.Operations.Lightup.ILockOperationWrapper operation)
        {
            VisitLockFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitMemberInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IMemberInitializerOperationWrapper operation)
        {
            VisitMemberInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public void VisitMethodBodyOperation(global::Microsoft.CodeAnalysis.Operations.Lightup.IMethodBodyOperationWrapper operation)
        {
            VisitMethodBodyOperationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitMethodReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IMethodReferenceOperationWrapper operation)
        {
            VisitMethodReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitNameOf(global::Microsoft.CodeAnalysis.Operations.Lightup.INameOfOperationWrapper operation)
        {
            VisitNameOfFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public void VisitNegatedPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.INegatedPatternOperationWrapper operation)
        {
            VisitNegatedPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitObjectCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.IObjectCreationOperationWrapper operation)
        {
            VisitObjectCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitObjectOrCollectionInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IObjectOrCollectionInitializerOperationWrapper operation)
        {
            VisitObjectOrCollectionInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitOmittedArgument(global::Microsoft.CodeAnalysis.Operations.Lightup.IOmittedArgumentOperationWrapper operation)
        {
            VisitOmittedArgumentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitParameterInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IParameterInitializerOperationWrapper operation)
        {
            VisitParameterInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitParameterReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IParameterReferenceOperationWrapper operation)
        {
            VisitParameterReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitParenthesized(global::Microsoft.CodeAnalysis.Operations.Lightup.IParenthesizedOperationWrapper operation)
        {
            VisitParenthesizedFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitPatternCaseClause(global::Microsoft.CodeAnalysis.Operations.Lightup.IPatternCaseClauseOperationWrapper operation)
        {
            VisitPatternCaseClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitPropertyInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertyInitializerOperationWrapper operation)
        {
            VisitPropertyInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitPropertyReference(global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertyReferenceOperationWrapper operation)
        {
            VisitPropertyReferenceFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.4.0.0.</summary>
        public void VisitPropertySubpattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IPropertySubpatternOperationWrapper operation)
        {
            VisitPropertySubpatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitRaiseEvent(global::Microsoft.CodeAnalysis.Operations.Lightup.IRaiseEventOperationWrapper operation)
        {
            VisitRaiseEventFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitRangeCaseClause(global::Microsoft.CodeAnalysis.Operations.Lightup.IRangeCaseClauseOperationWrapper operation)
        {
            VisitRangeCaseClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitRangeOperation(global::Microsoft.CodeAnalysis.Operations.Lightup.IRangeOperationWrapper operation)
        {
            VisitRangeOperationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.4.0.0.</summary>
        public void VisitRecursivePattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IRecursivePatternOperationWrapper operation)
        {
            VisitRecursivePatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitReDim(global::Microsoft.CodeAnalysis.Operations.Lightup.IReDimOperationWrapper operation)
        {
            VisitReDimFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitReDimClause(global::Microsoft.CodeAnalysis.Operations.Lightup.IReDimClauseOperationWrapper operation)
        {
            VisitReDimClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitRelationalCaseClause(global::Microsoft.CodeAnalysis.Operations.Lightup.IRelationalCaseClauseOperationWrapper operation)
        {
            VisitRelationalCaseClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public void VisitRelationalPattern(global::Microsoft.CodeAnalysis.Operations.Lightup.IRelationalPatternOperationWrapper operation)
        {
            VisitRelationalPatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitReturn(global::Microsoft.CodeAnalysis.Operations.Lightup.IReturnOperationWrapper operation)
        {
            VisitReturnFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitSimpleAssignment(global::Microsoft.CodeAnalysis.Operations.Lightup.ISimpleAssignmentOperationWrapper operation)
        {
            VisitSimpleAssignmentFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitSingleValueCaseClause(global::Microsoft.CodeAnalysis.Operations.Lightup.ISingleValueCaseClauseOperationWrapper operation)
        {
            VisitSingleValueCaseClauseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitSizeOf(global::Microsoft.CodeAnalysis.Operations.Lightup.ISizeOfOperationWrapper operation)
        {
            VisitSizeOfFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public void VisitSlicePattern(global::Microsoft.CodeAnalysis.Operations.Lightup.ISlicePatternOperationWrapper operation)
        {
            VisitSlicePatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.9.0.0.</summary>
        public void VisitSpread(global::Microsoft.CodeAnalysis.Operations.Lightup.ISpreadOperationWrapper operation)
        {
            VisitSpreadFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public void VisitStaticLocalInitializationSemaphore(global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.IStaticLocalInitializationSemaphoreOperationWrapper operation)
        {
            VisitStaticLocalInitializationSemaphoreFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitStop(global::Microsoft.CodeAnalysis.Operations.Lightup.IStopOperationWrapper operation)
        {
            VisitStopFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitSwitch(global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchOperationWrapper operation)
        {
            VisitSwitchFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitSwitchCase(global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchCaseOperationWrapper operation)
        {
            VisitSwitchCaseFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitSwitchExpression(global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchExpressionOperationWrapper operation)
        {
            VisitSwitchExpressionFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public void VisitSwitchExpressionArm(global::Microsoft.CodeAnalysis.Operations.Lightup.ISwitchExpressionArmOperationWrapper operation)
        {
            VisitSwitchExpressionArmFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitThrow(global::Microsoft.CodeAnalysis.Operations.Lightup.IThrowOperationWrapper operation)
        {
            VisitThrowFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitTranslatedQuery(global::Microsoft.CodeAnalysis.Operations.Lightup.ITranslatedQueryOperationWrapper operation)
        {
            VisitTranslatedQueryFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitTry(global::Microsoft.CodeAnalysis.Operations.Lightup.ITryOperationWrapper operation)
        {
            VisitTryFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitTuple(global::Microsoft.CodeAnalysis.Operations.Lightup.ITupleOperationWrapper operation)
        {
            VisitTupleFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public void VisitTupleBinaryOperator(global::Microsoft.CodeAnalysis.Operations.Lightup.ITupleBinaryOperationWrapper operation)
        {
            VisitTupleBinaryOperatorFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitTypeOf(global::Microsoft.CodeAnalysis.Operations.Lightup.ITypeOfOperationWrapper operation)
        {
            VisitTypeOfFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitTypeParameterObjectCreation(global::Microsoft.CodeAnalysis.Operations.Lightup.ITypeParameterObjectCreationOperationWrapper operation)
        {
            VisitTypeParameterObjectCreationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public void VisitTypePattern(global::Microsoft.CodeAnalysis.Operations.Lightup.ITypePatternOperationWrapper operation)
        {
            VisitTypePatternFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitUnaryOperator(global::Microsoft.CodeAnalysis.Operations.Lightup.IUnaryOperationWrapper operation)
        {
            VisitUnaryOperatorFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitUsing(global::Microsoft.CodeAnalysis.Operations.Lightup.IUsingOperationWrapper operation)
        {
            VisitUsingFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.4.0.0.</summary>
        public void VisitUsingDeclaration(global::Microsoft.CodeAnalysis.Operations.Lightup.IUsingDeclarationOperationWrapper operation)
        {
            VisitUsingDeclarationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 4.3.0.0.</summary>
        public void VisitUtf8String(global::Microsoft.CodeAnalysis.Operations.Lightup.IUtf8StringOperationWrapper operation)
        {
            VisitUtf8StringFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitVariableDeclaration(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationOperationWrapper operation)
        {
            VisitVariableDeclarationFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitVariableDeclarationGroup(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationGroupOperationWrapper operation)
        {
            VisitVariableDeclarationGroupFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitVariableDeclarator(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclaratorOperationWrapper operation)
        {
            VisitVariableDeclaratorFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitVariableInitializer(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableInitializerOperationWrapper operation)
        {
            VisitVariableInitializerFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void VisitWhileLoop(global::Microsoft.CodeAnalysis.Operations.Lightup.IWhileLoopOperationWrapper operation)
        {
            VisitWhileLoopFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public void VisitWith(global::Microsoft.CodeAnalysis.Operations.Lightup.IWithOperationWrapper operation)
        {
            VisitWithFunc0(wrappedObject, operation);
        }
    }
}
