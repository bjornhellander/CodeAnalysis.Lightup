// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IConstructorBodyOperation. Added in version 2.8.0.0.</summary>
    public partial struct IConstructorBodyOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IConstructorBodyOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.IOperation? InitializerGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> LocalsGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation _obj);

        private static readonly InitializerGetterDelegate InitializerGetterFunc;
        private static readonly LocalsGetterDelegate LocalsGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation wrappedObject;

        static IConstructorBodyOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            InitializerGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<InitializerGetterDelegate>(WrappedType, nameof(Initializer));
            LocalsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LocalsGetterDelegate>(WrappedType, nameof(Locals));
        }

        private IConstructorBodyOperationWrapper(global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation? Initializer
        {
            get { return InitializerGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.8.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> Locals
        {
            get { return LocalsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static IConstructorBodyOperationWrapper Wrap(global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation>(obj, WrappedType);
            return new IConstructorBodyOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IMethodBodyBaseOperation Unwrap()
        {
            return wrappedObject;
        }
    }
}
