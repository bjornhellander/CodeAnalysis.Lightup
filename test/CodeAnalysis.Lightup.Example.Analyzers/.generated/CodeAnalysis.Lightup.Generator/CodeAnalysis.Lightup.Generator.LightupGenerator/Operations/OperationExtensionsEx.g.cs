// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Operations.OperationExtensions. Added in version 2.6.0.0.</summary>
    public static partial class OperationExtensionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationExtensions";

        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> DescendantsDelegate0(global::Microsoft.CodeAnalysis.IOperation? operation);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> DescendantsAndSelfDelegate1(global::Microsoft.CodeAnalysis.IOperation? operation);
        private delegate global::System.String? GetArgumentNameDelegate2(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::System.String? GetArgumentNameDelegate3(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::System.String? GetArgumentNameDelegate4(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKindDelegate5(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKindDelegate6(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKindDelegate7(global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper dynamicOperation, global::System.Int32 index);
        private delegate global::Microsoft.CodeAnalysis.IOperation? GetCorrespondingOperationDelegate8(global::Microsoft.CodeAnalysis.Operations.Lightup.IBranchOperationWrapper operation);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> GetDeclaredVariablesDelegate9(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationOperationWrapper declaration);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> GetDeclaredVariablesDelegate10(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationGroupOperationWrapper declarationGroup);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol GetFunctionPointerSignatureDelegate11(global::Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper functionPointer);
        private delegate global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableInitializerOperationWrapper? GetVariableInitializerDelegate12(global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclaratorOperationWrapper declarationOperation);

        private static readonly DescendantsDelegate0 DescendantsFunc0;
        private static readonly DescendantsAndSelfDelegate1 DescendantsAndSelfFunc1;
        private static readonly GetArgumentNameDelegate2 GetArgumentNameFunc2;
        private static readonly GetArgumentNameDelegate3 GetArgumentNameFunc3;
        private static readonly GetArgumentNameDelegate4 GetArgumentNameFunc4;
        private static readonly GetArgumentRefKindDelegate5 GetArgumentRefKindFunc5;
        private static readonly GetArgumentRefKindDelegate6 GetArgumentRefKindFunc6;
        private static readonly GetArgumentRefKindDelegate7 GetArgumentRefKindFunc7;
        private static readonly GetCorrespondingOperationDelegate8 GetCorrespondingOperationFunc8;
        private static readonly GetDeclaredVariablesDelegate9 GetDeclaredVariablesFunc9;
        private static readonly GetDeclaredVariablesDelegate10 GetDeclaredVariablesFunc10;
        private static readonly GetFunctionPointerSignatureDelegate11 GetFunctionPointerSignatureFunc11;
        private static readonly GetVariableInitializerDelegate12 GetVariableInitializerFunc12;

        static OperationExtensionsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DescendantsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<DescendantsDelegate0>(wrappedType, "Descendants", "operationIOperation");
            DescendantsAndSelfFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<DescendantsAndSelfDelegate1>(wrappedType, "DescendantsAndSelf", "operationIOperation");
            GetArgumentNameFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentNameDelegate2>(wrappedType, "GetArgumentName", "dynamicOperationIDynamicInvocationOperation", "indexInt32");
            GetArgumentNameFunc3 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentNameDelegate3>(wrappedType, "GetArgumentName", "dynamicOperationIDynamicIndexerAccessOperation", "indexInt32");
            GetArgumentNameFunc4 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentNameDelegate4>(wrappedType, "GetArgumentName", "dynamicOperationIDynamicObjectCreationOperation", "indexInt32");
            GetArgumentRefKindFunc5 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentRefKindDelegate5>(wrappedType, "GetArgumentRefKind", "dynamicOperationIDynamicInvocationOperation", "indexInt32");
            GetArgumentRefKindFunc6 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentRefKindDelegate6>(wrappedType, "GetArgumentRefKind", "dynamicOperationIDynamicIndexerAccessOperation", "indexInt32");
            GetArgumentRefKindFunc7 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetArgumentRefKindDelegate7>(wrappedType, "GetArgumentRefKind", "dynamicOperationIDynamicObjectCreationOperation", "indexInt32");
            GetCorrespondingOperationFunc8 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetCorrespondingOperationDelegate8>(wrappedType, "GetCorrespondingOperation", "operationIBranchOperation");
            GetDeclaredVariablesFunc9 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetDeclaredVariablesDelegate9>(wrappedType, "GetDeclaredVariables", "declarationIVariableDeclarationOperation");
            GetDeclaredVariablesFunc10 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetDeclaredVariablesDelegate10>(wrappedType, "GetDeclaredVariables", "declarationGroupIVariableDeclarationGroupOperation");
            GetFunctionPointerSignatureFunc11 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetFunctionPointerSignatureDelegate11>(wrappedType, "GetFunctionPointerSignature", "functionPointerIFunctionPointerInvocationOperation");
            GetVariableInitializerFunc12 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<GetVariableInitializerDelegate12>(wrappedType, "GetVariableInitializer", "declarationOperationIVariableDeclaratorOperation");
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> Descendants(this global::Microsoft.CodeAnalysis.IOperation? operation)
        {
            return DescendantsFunc0(operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.IOperation> DescendantsAndSelf(this global::Microsoft.CodeAnalysis.IOperation? operation)
        {
            return DescendantsAndSelfFunc1(operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.String? GetArgumentName(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentNameFunc2(dynamicOperation, index);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.String? GetArgumentName(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentNameFunc3(dynamicOperation, index);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.String? GetArgumentName(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentNameFunc4(dynamicOperation, index);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKind(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicInvocationOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentRefKindFunc5(dynamicOperation, index);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKind(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicIndexerAccessOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentRefKindFunc6(dynamicOperation, index);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Nullable<global::Microsoft.CodeAnalysis.RefKind> GetArgumentRefKind(this global::Microsoft.CodeAnalysis.Operations.Lightup.IDynamicObjectCreationOperationWrapper dynamicOperation, global::System.Int32 index)
        {
            return GetArgumentRefKindFunc7(dynamicOperation, index);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IOperation? GetCorrespondingOperation(this global::Microsoft.CodeAnalysis.Operations.Lightup.IBranchOperationWrapper operation)
        {
            return GetCorrespondingOperationFunc8(operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> GetDeclaredVariables(this global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationOperationWrapper declaration)
        {
            return GetDeclaredVariablesFunc9(declaration);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.ILocalSymbol> GetDeclaredVariables(this global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclarationGroupOperationWrapper declarationGroup)
        {
            return GetDeclaredVariablesFunc10(declarationGroup);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.IMethodSymbol GetFunctionPointerSignature(this global::Microsoft.CodeAnalysis.Operations.Lightup.IFunctionPointerInvocationOperationWrapper functionPointer)
        {
            return GetFunctionPointerSignatureFunc11(functionPointer);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableInitializerOperationWrapper? GetVariableInitializer(this global::Microsoft.CodeAnalysis.Operations.Lightup.IVariableDeclaratorOperationWrapper declarationOperation)
        {
            return GetVariableInitializerFunc12(declarationOperation);
        }
    }
}
