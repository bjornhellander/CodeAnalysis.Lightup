// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Operations.OperationWalker. Added in version 2.6.0.0.</summary>
    public partial struct OperationWalkerWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.OperationWalker";

        private static readonly global::System.Type? WrappedType;

        private delegate void DefaultVisitDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.IOperation operation);
        private delegate void VisitDelegate1(global::System.Object _obj, global::Microsoft.CodeAnalysis.IOperation? operation);

        private static readonly DefaultVisitDelegate0 DefaultVisitFunc0;
        private static readonly VisitDelegate1 VisitFunc1;

        private readonly global::System.Object wrappedObject;

        static OperationWalkerWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DefaultVisitFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<DefaultVisitDelegate0>(WrappedType, "DefaultVisit", "operationIOperation");
            VisitFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<VisitDelegate1>(WrappedType, "Visit", "operationIOperation");
        }

        private OperationWalkerWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static OperationWalkerWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new OperationWalkerWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void DefaultVisit(global::Microsoft.CodeAnalysis.IOperation operation)
        {
            DefaultVisitFunc0(wrappedObject, operation);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public void Visit(global::Microsoft.CodeAnalysis.IOperation? operation)
        {
            VisitFunc1(wrappedObject, operation);
        }
    }
}
