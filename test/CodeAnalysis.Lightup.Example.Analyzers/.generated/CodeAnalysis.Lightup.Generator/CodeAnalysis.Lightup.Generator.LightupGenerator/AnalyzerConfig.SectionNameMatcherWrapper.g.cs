// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
public partial struct AnalyzerConfigWrapper {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.AnalyzerConfig+SectionNameMatcher. Added in version 3.1.0.0.</summary>
    public partial struct SectionNameMatcherWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.AnalyzerConfig+SectionNameMatcher";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private readonly global::System.Object? wrappedObject;

        static SectionNameMatcherWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);
        }

        private SectionNameMatcherWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SectionNameMatcherWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new SectionNameMatcherWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }
    }
}
}
