// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.ErrorLogOptions. Added in version 3.8.0.0.</summary>
    public partial struct ErrorLogOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ErrorLogOptions";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate ErrorLogOptionsWrapper ConstructorDelegate0(global::System.String path, global::Microsoft.CodeAnalysis.Lightup.SarifVersionEx sarifVersion);

        private delegate global::System.String PathGetterDelegate(global::System.Object? _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.SarifVersionEx SarifVersionGetterDelegate(global::System.Object? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly PathGetterDelegate PathGetterFunc;
        private static readonly SarifVersionGetterDelegate SarifVersionGetterFunc;

        private readonly global::System.Object? wrappedObject;

        static ErrorLogOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "pathString", "sarifVersionSarifVersion");

            PathGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<PathGetterDelegate>(WrappedType, nameof(Path));
            SarifVersionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SarifVersionGetterDelegate>(WrappedType, nameof(SarifVersion));
        }

        private ErrorLogOptionsWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 3.8.0.0.</summary>
        public static ErrorLogOptionsWrapper Create(global::System.String path, global::Microsoft.CodeAnalysis.Lightup.SarifVersionEx sarifVersion)
        {
            return ConstructorFunc0(path, sarifVersion);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.String Path
        {
            get { return PathGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.SarifVersionEx SarifVersion
        {
            get { return SarifVersionGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ErrorLogOptionsWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new ErrorLogOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }
    }
}
