// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.FlowAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock. Added in version 2.9.0.0.</summary>
    public partial struct BasicBlockWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.IOperation? BranchValueGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper? ConditionalSuccessorGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowConditionKindEx ConditionKindGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper EnclosingRegionGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper? FallThroughSuccessorGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsReachableGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockKindEx KindGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> OperationsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Int32 OrdinalGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper> PredecessorsGetterDelegate(global::System.Object _obj);

        private static readonly BranchValueGetterDelegate BranchValueGetterFunc;
        private static readonly ConditionalSuccessorGetterDelegate ConditionalSuccessorGetterFunc;
        private static readonly ConditionKindGetterDelegate ConditionKindGetterFunc;
        private static readonly EnclosingRegionGetterDelegate EnclosingRegionGetterFunc;
        private static readonly FallThroughSuccessorGetterDelegate FallThroughSuccessorGetterFunc;
        private static readonly IsReachableGetterDelegate IsReachableGetterFunc;
        private static readonly KindGetterDelegate KindGetterFunc;
        private static readonly OperationsGetterDelegate OperationsGetterFunc;
        private static readonly OrdinalGetterDelegate OrdinalGetterFunc;
        private static readonly PredecessorsGetterDelegate PredecessorsGetterFunc;

        private readonly global::System.Object wrappedObject;

        static BasicBlockWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            BranchValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<BranchValueGetterDelegate>(WrappedType, nameof(BranchValue));
            ConditionalSuccessorGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConditionalSuccessorGetterDelegate>(WrappedType, nameof(ConditionalSuccessor));
            ConditionKindGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ConditionKindGetterDelegate>(WrappedType, nameof(ConditionKind));
            EnclosingRegionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<EnclosingRegionGetterDelegate>(WrappedType, nameof(EnclosingRegion));
            FallThroughSuccessorGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FallThroughSuccessorGetterDelegate>(WrappedType, nameof(FallThroughSuccessor));
            IsReachableGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsReachableGetterDelegate>(WrappedType, nameof(IsReachable));
            KindGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<KindGetterDelegate>(WrappedType, nameof(Kind));
            OperationsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OperationsGetterDelegate>(WrappedType, nameof(Operations));
            OrdinalGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OrdinalGetterDelegate>(WrappedType, nameof(Ordinal));
            PredecessorsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<PredecessorsGetterDelegate>(WrappedType, nameof(Predecessors));
        }

        private BasicBlockWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IOperation? BranchValue
        {
            get { return BranchValueGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper? ConditionalSuccessor
        {
            get { return ConditionalSuccessorGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowConditionKindEx ConditionKind
        {
            get { return ConditionKindGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper EnclosingRegion
        {
            get { return EnclosingRegionGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper? FallThroughSuccessor
        {
            get { return FallThroughSuccessorGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Boolean IsReachable
        {
            get { return IsReachableGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockKindEx Kind
        {
            get { return KindGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.IOperation> Operations
        {
            get { return OperationsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Int32 Ordinal
        {
            get { return OrdinalGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchWrapper> Predecessors
        {
            get { return PredecessorsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static BasicBlockWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new BasicBlockWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
