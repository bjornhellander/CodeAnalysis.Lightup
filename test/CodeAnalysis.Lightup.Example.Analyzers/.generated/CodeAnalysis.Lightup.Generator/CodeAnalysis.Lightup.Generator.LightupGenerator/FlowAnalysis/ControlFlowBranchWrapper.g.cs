// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.FlowAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowBranch. Added in version 2.9.0.0.</summary>
    public partial struct ControlFlowBranchWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowBranch";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockWrapper? DestinationGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> EnteringRegionsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> FinallyRegionsGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsConditionalSuccessorGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> LeavingRegionsGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchSemanticsEx SemanticsGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockWrapper SourceGetterDelegate(global::System.Object _obj);

        private static readonly DestinationGetterDelegate DestinationGetterFunc;
        private static readonly EnteringRegionsGetterDelegate EnteringRegionsGetterFunc;
        private static readonly FinallyRegionsGetterDelegate FinallyRegionsGetterFunc;
        private static readonly IsConditionalSuccessorGetterDelegate IsConditionalSuccessorGetterFunc;
        private static readonly LeavingRegionsGetterDelegate LeavingRegionsGetterFunc;
        private static readonly SemanticsGetterDelegate SemanticsGetterFunc;
        private static readonly SourceGetterDelegate SourceGetterFunc;

        private readonly global::System.Object wrappedObject;

        static ControlFlowBranchWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DestinationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<DestinationGetterDelegate>(WrappedType, nameof(Destination));
            EnteringRegionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<EnteringRegionsGetterDelegate>(WrappedType, nameof(EnteringRegions));
            FinallyRegionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FinallyRegionsGetterDelegate>(WrappedType, nameof(FinallyRegions));
            IsConditionalSuccessorGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsConditionalSuccessorGetterDelegate>(WrappedType, nameof(IsConditionalSuccessor));
            LeavingRegionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LeavingRegionsGetterDelegate>(WrappedType, nameof(LeavingRegions));
            SemanticsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SemanticsGetterDelegate>(WrappedType, nameof(Semantics));
            SourceGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<SourceGetterDelegate>(WrappedType, nameof(Source));
        }

        private ControlFlowBranchWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockWrapper? Destination
        {
            get { return DestinationGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> EnteringRegions
        {
            get { return EnteringRegionsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> FinallyRegions
        {
            get { return FinallyRegionsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Boolean IsConditionalSuccessor
        {
            get { return IsConditionalSuccessorGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowRegionWrapper> LeavingRegions
        {
            get { return LeavingRegionsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.ControlFlowBranchSemanticsEx Semantics
        {
            get { return SemanticsGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.FlowAnalysis.Lightup.BasicBlockWrapper Source
        {
            get { return SourceGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static ControlFlowBranchWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new ControlFlowBranchWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
