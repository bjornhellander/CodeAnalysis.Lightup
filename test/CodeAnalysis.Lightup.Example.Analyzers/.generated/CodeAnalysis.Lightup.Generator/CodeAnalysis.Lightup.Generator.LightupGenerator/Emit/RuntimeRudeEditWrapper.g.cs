// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit. Added in version 4.9.0.0.</summary>
    public partial struct RuntimeRudeEditWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate RuntimeRudeEditWrapper ConstructorDelegate0(global::System.String message);

        private delegate global::System.String MessageGetterDelegate(global::System.Object? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly MessageGetterDelegate MessageGetterFunc;

        private readonly global::System.Object wrappedObject;

        static RuntimeRudeEditWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "messageString");

            MessageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<MessageGetterDelegate>(WrappedType, nameof(Message));
        }

        private RuntimeRudeEditWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.9.0.0.</summary>
        public static RuntimeRudeEditWrapper Create(global::System.String message)
        {
            return ConstructorFunc0(message);
        }

        /// <summary>Property added in version 4.9.0.0.</summary>
        public global::System.String Message
        {
            get { return MessageGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static RuntimeRudeEditWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new RuntimeRudeEditWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
