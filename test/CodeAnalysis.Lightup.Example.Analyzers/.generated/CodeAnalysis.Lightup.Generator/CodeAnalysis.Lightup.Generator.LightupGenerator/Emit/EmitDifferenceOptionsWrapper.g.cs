// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions. Added in version 5.0.0.0.</summary>
    public partial struct EmitDifferenceOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Emit.Lightup.EmitDifferenceOptionsWrapper DefaultGetterDelegate();

        private delegate EmitDifferenceOptionsWrapper ConstructorDelegate0();

        private delegate global::System.Boolean EmitFieldRvaGetterDelegate(global::System.Object _obj);
        private delegate void EmitFieldRvaSetterDelegate(System.Object _obj, global::System.Boolean _value);

        private static readonly DefaultGetterDelegate DefaultGetterFunc;

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly EmitFieldRvaGetterDelegate EmitFieldRvaGetterFunc;
        private static readonly EmitFieldRvaSetterDelegate EmitFieldRvaSetterFunc;

        private readonly global::System.Object wrappedObject;

        static EmitDifferenceOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DefaultGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticReadAccessor<DefaultGetterDelegate>(WrappedType, nameof(Default));

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType);

            EmitFieldRvaGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<EmitFieldRvaGetterDelegate>(WrappedType, nameof(EmitFieldRva));
            EmitFieldRvaSetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceSetAccessor<EmitFieldRvaSetterDelegate>(WrappedType, nameof(EmitFieldRva));
        }

        private EmitDifferenceOptionsWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Field added in version 5.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.Lightup.EmitDifferenceOptionsWrapper Default
        {
            get { return DefaultGetterFunc(); }
        }

        /// <summary>Constructor added in version 5.0.0.0.</summary>
        public static EmitDifferenceOptionsWrapper Create()
        {
            return ConstructorFunc0();
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Boolean EmitFieldRva
        {
            get { return EmitFieldRvaGetterFunc(wrappedObject); }
            set { EmitFieldRvaSetterFunc(wrappedObject, value); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static EmitDifferenceOptionsWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new EmitDifferenceOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
