// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Emit.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Emit.SemanticEdit.</summary>
    public static partial class SemanticEditExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Emit.SemanticEdit";

        private delegate SemanticEdit ConstructorDelegate0(global::Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, global::Microsoft.CodeAnalysis.ISymbol? oldSymbol, global::Microsoft.CodeAnalysis.ISymbol? newSymbol, global::System.Func<global::Microsoft.CodeAnalysis.SyntaxNode, global::Microsoft.CodeAnalysis.SyntaxNode>? syntaxMap, global::System.Boolean preserveLocalVariables, global::Microsoft.CodeAnalysis.Emit.Lightup.MethodInstrumentationWrapper instrumentation);

        private delegate global::Microsoft.CodeAnalysis.Emit.Lightup.MethodInstrumentationWrapper InstrumentationGetterDelegate(global::Microsoft.CodeAnalysis.Emit.SemanticEdit? _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly InstrumentationGetterDelegate InstrumentationGetterFunc;

        static SemanticEditExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(wrappedType, "kindSemanticEditKind", "oldSymbolISymbol", "newSymbolISymbol", "syntaxMapFunc`2", "preserveLocalVariablesBoolean", "instrumentationMethodInstrumentation");

            InstrumentationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<InstrumentationGetterDelegate>(wrappedType, nameof(Instrumentation));
        }

        /// <summary>Constructor added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.SemanticEdit Create(global::Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, global::Microsoft.CodeAnalysis.ISymbol? oldSymbol, global::Microsoft.CodeAnalysis.ISymbol? newSymbol, global::System.Func<global::Microsoft.CodeAnalysis.SyntaxNode, global::Microsoft.CodeAnalysis.SyntaxNode>? syntaxMap, global::System.Boolean preserveLocalVariables, global::Microsoft.CodeAnalysis.Emit.Lightup.MethodInstrumentationWrapper instrumentation)
        {
            return ConstructorFunc0(kind, oldSymbol, newSymbol, syntaxMap, preserveLocalVariables, instrumentation);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Emit.Lightup.MethodInstrumentationWrapper Instrumentation(this global::Microsoft.CodeAnalysis.Emit.SemanticEdit _obj)
        {
            return InstrumentationGetterFunc(_obj);
        }
    }
}
