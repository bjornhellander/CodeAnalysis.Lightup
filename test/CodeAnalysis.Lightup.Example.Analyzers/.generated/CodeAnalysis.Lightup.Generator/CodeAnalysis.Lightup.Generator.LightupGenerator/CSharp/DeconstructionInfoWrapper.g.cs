// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CSharp.DeconstructionInfo. Added in version 2.7.0.0.</summary>
    public partial struct DeconstructionInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.DeconstructionInfo";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Nullable<global::Microsoft.CodeAnalysis.CSharp.Conversion> ConversionGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.IMethodSymbol? MethodGetterDelegate(global::System.Object _obj);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.CSharp.Lightup.DeconstructionInfoWrapper> NestedGetterDelegate(global::System.Object _obj);

        private static readonly ConversionGetterDelegate ConversionGetterFunc;
        private static readonly MethodGetterDelegate MethodGetterFunc;
        private static readonly NestedGetterDelegate NestedGetterFunc;

        private readonly global::System.Object wrappedObject;

        static DeconstructionInfoWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ConversionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ConversionGetterDelegate>(WrappedType, nameof(Conversion));
            MethodGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<MethodGetterDelegate>(WrappedType, nameof(Method));
            NestedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<NestedGetterDelegate>(WrappedType, nameof(Nested));
        }

        private DeconstructionInfoWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.7.0.0.</summary>
        public global::System.Nullable<global::Microsoft.CodeAnalysis.CSharp.Conversion> Conversion
        {
            get { return ConversionGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.7.0.0.</summary>
        public global::Microsoft.CodeAnalysis.IMethodSymbol? Method
        {
            get { return MethodGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.7.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.CSharp.Lightup.DeconstructionInfoWrapper> Nested
        {
            get { return NestedGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static DeconstructionInfoWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new DeconstructionInfoWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
