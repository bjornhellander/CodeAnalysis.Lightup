// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CSharp.Conversion.</summary>
    public static partial class ConversionEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Conversion";

        private delegate global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToTypeGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsCollectionExpressionGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsConditionalExpressionGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsDefaultLiteralGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsInlineArrayGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsInterpolatedStringHandlerGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsObjectCreationGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsStackAllocGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);
        private delegate global::System.Boolean IsSwitchExpressionGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);

        private delegate global::Microsoft.CodeAnalysis.Operations.Lightup.CommonConversionWrapper ToCommonConversionDelegate0(global::Microsoft.CodeAnalysis.CSharp.Conversion _obj);

        private static readonly ConstrainedToTypeGetterDelegate ConstrainedToTypeGetterFunc;
        private static readonly IsCollectionExpressionGetterDelegate IsCollectionExpressionGetterFunc;
        private static readonly IsConditionalExpressionGetterDelegate IsConditionalExpressionGetterFunc;
        private static readonly IsDefaultLiteralGetterDelegate IsDefaultLiteralGetterFunc;
        private static readonly IsInlineArrayGetterDelegate IsInlineArrayGetterFunc;
        private static readonly IsInterpolatedStringHandlerGetterDelegate IsInterpolatedStringHandlerGetterFunc;
        private static readonly IsObjectCreationGetterDelegate IsObjectCreationGetterFunc;
        private static readonly IsStackAllocGetterDelegate IsStackAllocGetterFunc;
        private static readonly IsSwitchExpressionGetterDelegate IsSwitchExpressionGetterFunc;

        private static readonly ToCommonConversionDelegate0 ToCommonConversionFunc0;

        static ConversionEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ConstrainedToTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ConstrainedToTypeGetterDelegate>(wrappedType, nameof(ConstrainedToType));
            IsCollectionExpressionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsCollectionExpressionGetterDelegate>(wrappedType, nameof(IsCollectionExpression));
            IsConditionalExpressionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsConditionalExpressionGetterDelegate>(wrappedType, nameof(IsConditionalExpression));
            IsDefaultLiteralGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsDefaultLiteralGetterDelegate>(wrappedType, nameof(IsDefaultLiteral));
            IsInlineArrayGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsInlineArrayGetterDelegate>(wrappedType, nameof(IsInlineArray));
            IsInterpolatedStringHandlerGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsInterpolatedStringHandlerGetterDelegate>(wrappedType, nameof(IsInterpolatedStringHandler));
            IsObjectCreationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsObjectCreationGetterDelegate>(wrappedType, nameof(IsObjectCreation));
            IsStackAllocGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsStackAllocGetterDelegate>(wrappedType, nameof(IsStackAlloc));
            IsSwitchExpressionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsSwitchExpressionGetterDelegate>(wrappedType, nameof(IsSwitchExpression));

            ToCommonConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ToCommonConversionDelegate0>(wrappedType, "ToCommonConversion");
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.ITypeSymbol? ConstrainedToType(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return ConstrainedToTypeGetterFunc(_obj);
        }

        /// <summary>Property added in version 4.8.0.0.</summary>
        public static global::System.Boolean IsCollectionExpression(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsCollectionExpressionGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public static global::System.Boolean IsConditionalExpression(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsConditionalExpressionGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.4.0.0.</summary>
        public static global::System.Boolean IsDefaultLiteral(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsDefaultLiteralGetterFunc(_obj);
        }

        /// <summary>Property added in version 4.7.0.0.</summary>
        public static global::System.Boolean IsInlineArray(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsInlineArrayGetterFunc(_obj);
        }

        /// <summary>Property added in version 4.0.0.0.</summary>
        public static global::System.Boolean IsInterpolatedStringHandler(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsInterpolatedStringHandlerGetterFunc(_obj);
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public static global::System.Boolean IsObjectCreation(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsObjectCreationGetterFunc(_obj);
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::System.Boolean IsStackAlloc(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsStackAllocGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.3.0.0.</summary>
        public static global::System.Boolean IsSwitchExpression(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return IsSwitchExpressionGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Operations.Lightup.CommonConversionWrapper ToCommonConversion(this global::Microsoft.CodeAnalysis.CSharp.Conversion _obj)
        {
            return ToCommonConversionFunc0(_obj);
        }
    }
}
