// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.AllowsConstraintClauseSyntax. Added in version 4.11.0.0.</summary>
    public partial struct AllowsConstraintClauseSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.AllowsConstraintClauseSyntax";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken AllowsKeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> ConstraintsGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj);

        private delegate void AcceptDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper AddConstraintsDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, params global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper[] items);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper UpdateDelegate2(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxToken allowsKeyword, global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> constraints);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper WithAllowsKeywordDelegate3(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxToken allowsKeyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper WithConstraintsDelegate4(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax? _obj, global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> constraints);

        private static readonly AllowsKeywordGetterDelegate AllowsKeywordGetterFunc;
        private static readonly ConstraintsGetterDelegate ConstraintsGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddConstraintsDelegate1 AddConstraintsFunc1;
        private static readonly UpdateDelegate2 UpdateFunc2;
        private static readonly WithAllowsKeywordDelegate3 WithAllowsKeywordFunc3;
        private static readonly WithConstraintsDelegate4 WithConstraintsFunc4;

        private readonly global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax wrappedObject;

        static AllowsConstraintClauseSyntaxWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            AllowsKeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<AllowsKeywordGetterDelegate>(WrappedType, nameof(AllowsKeyword));
            ConstraintsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ConstraintsGetterDelegate>(WrappedType, nameof(Constraints));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            AddConstraintsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AddConstraintsDelegate1>(WrappedType, "AddConstraints", "itemsAllowsConstraintSyntax[]");
            UpdateFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate2>(WrappedType, "Update", "allowsKeywordSyntaxToken", "constraintsSeparatedSyntaxList`1");
            WithAllowsKeywordFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithAllowsKeywordDelegate3>(WrappedType, "WithAllowsKeyword", "allowsKeywordSyntaxToken");
            WithConstraintsFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithConstraintsDelegate4>(WrappedType, "WithConstraints", "constraintsSeparatedSyntaxList`1");
        }

        private AllowsConstraintClauseSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken AllowsKeyword
        {
            get { return AllowsKeywordGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> Constraints
        {
            get { return ConstraintsGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator AllowsConstraintClauseSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax(AllowsConstraintClauseSyntaxWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static AllowsConstraintClauseSyntaxWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax>(obj, WrappedType);
            return new AllowsConstraintClauseSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public void Accept(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
        {
            AcceptFunc0(wrappedObject, visitor);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper AddConstraints(params global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper[] items)
        {
            return AddConstraintsFunc1(wrappedObject, items);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper Update(global::Microsoft.CodeAnalysis.SyntaxToken allowsKeyword, global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> constraints)
        {
            return UpdateFunc2(wrappedObject, allowsKeyword, constraints);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper WithAllowsKeyword(global::Microsoft.CodeAnalysis.SyntaxToken allowsKeyword)
        {
            return WithAllowsKeywordFunc3(wrappedObject, allowsKeyword);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper WithConstraints(global::Microsoft.CodeAnalysis.Lightup.SeparatedSyntaxListWrapper<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintSyntaxWrapper> constraints)
        {
            return WithConstraintsFunc4(wrappedObject, constraints);
        }
    }
}
