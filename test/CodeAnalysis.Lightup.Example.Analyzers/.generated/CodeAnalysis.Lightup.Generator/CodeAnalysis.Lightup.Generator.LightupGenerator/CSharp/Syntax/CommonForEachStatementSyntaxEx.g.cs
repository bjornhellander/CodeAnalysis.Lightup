// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.</summary>
    public static partial class CommonForEachStatementSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax";

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken AwaitKeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax AddAttributeListsDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, params global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithAttributeListsDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxList<global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithAwaitKeywordDelegate2(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken awaitKeyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithCloseParenTokenDelegate3(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken closeParenToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithExpressionDelegate4(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithForEachKeywordDelegate5(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken forEachKeyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithInKeywordDelegate6(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken inKeyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithOpenParenTokenDelegate7(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken openParenToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithStatementDelegate8(global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);

        private static readonly AwaitKeywordGetterDelegate AwaitKeywordGetterFunc;

        private static readonly AddAttributeListsDelegate0 AddAttributeListsFunc0;
        private static readonly WithAttributeListsDelegate1 WithAttributeListsFunc1;
        private static readonly WithAwaitKeywordDelegate2 WithAwaitKeywordFunc2;
        private static readonly WithCloseParenTokenDelegate3 WithCloseParenTokenFunc3;
        private static readonly WithExpressionDelegate4 WithExpressionFunc4;
        private static readonly WithForEachKeywordDelegate5 WithForEachKeywordFunc5;
        private static readonly WithInKeywordDelegate6 WithInKeywordFunc6;
        private static readonly WithOpenParenTokenDelegate7 WithOpenParenTokenFunc7;
        private static readonly WithStatementDelegate8 WithStatementFunc8;

        static CommonForEachStatementSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            AwaitKeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<AwaitKeywordGetterDelegate>(wrappedType, nameof(AwaitKeyword));

            AddAttributeListsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AddAttributeListsDelegate0>(wrappedType, "AddAttributeLists", "itemsAttributeListSyntax[]");
            WithAttributeListsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithAttributeListsDelegate1>(wrappedType, "WithAttributeLists", "attributeListsSyntaxList`1");
            WithAwaitKeywordFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithAwaitKeywordDelegate2>(wrappedType, "WithAwaitKeyword", "awaitKeywordSyntaxToken");
            WithCloseParenTokenFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithCloseParenTokenDelegate3>(wrappedType, "WithCloseParenToken", "closeParenTokenSyntaxToken");
            WithExpressionFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithExpressionDelegate4>(wrappedType, "WithExpression", "expressionExpressionSyntax");
            WithForEachKeywordFunc5 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithForEachKeywordDelegate5>(wrappedType, "WithForEachKeyword", "forEachKeywordSyntaxToken");
            WithInKeywordFunc6 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithInKeywordDelegate6>(wrappedType, "WithInKeyword", "inKeywordSyntaxToken");
            WithOpenParenTokenFunc7 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithOpenParenTokenDelegate7>(wrappedType, "WithOpenParenToken", "openParenTokenSyntaxToken");
            WithStatementFunc8 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithStatementDelegate8>(wrappedType, "WithStatement", "statementStatementSyntax");
        }

        /// <summary>Property added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxToken AwaitKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj)
        {
            return AwaitKeywordGetterFunc(_obj);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax AddAttributeLists(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, params global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items)
        {
            return AddAttributeListsFunc0(_obj, items);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithAttributeLists(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxList<global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists)
        {
            return WithAttributeListsFunc1(_obj, attributeLists);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithAwaitKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken awaitKeyword)
        {
            return WithAwaitKeywordFunc2(_obj, awaitKeyword);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithCloseParenToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken closeParenToken)
        {
            return WithCloseParenTokenFunc3(_obj, closeParenToken);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithExpression(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression)
        {
            return WithExpressionFunc4(_obj, expression);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithForEachKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken forEachKeyword)
        {
            return WithForEachKeywordFunc5(_obj, forEachKeyword);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithInKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken inKeyword)
        {
            return WithInKeywordFunc6(_obj, inKeyword);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithOpenParenToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken openParenToken)
        {
            return WithOpenParenTokenFunc7(_obj, openParenToken);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax WithStatement(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement)
        {
            return WithStatementFunc8(_obj, statement);
        }
    }
}
