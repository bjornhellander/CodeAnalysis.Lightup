// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.</summary>
    public static partial class RefTypeSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax";

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ScopedKeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax? _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxToken refKeyword, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, global::Microsoft.CodeAnalysis.SyntaxToken scopedKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax WithScopedKeywordDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxToken scopedKeyword);

        private static readonly ScopedKeywordGetterDelegate ScopedKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithScopedKeywordDelegate1 WithScopedKeywordFunc1;

        static RefTypeSyntaxExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ScopedKeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ScopedKeywordGetterDelegate>(wrappedType, nameof(ScopedKeyword));

            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "refKeywordSyntaxToken", "readOnlyKeywordSyntaxToken", "scopedKeywordSyntaxToken", "typeTypeSyntax");
            WithScopedKeywordFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithScopedKeywordDelegate1>(wrappedType, "WithScopedKeyword", "scopedKeywordSyntaxToken");
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxToken ScopedKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj)
        {
            return ScopedKeywordGetterFunc(_obj);
        }

        /// <summary>Method added in version 4.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax Update(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken refKeyword, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, global::Microsoft.CodeAnalysis.SyntaxToken scopedKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type)
        {
            return UpdateFunc0(_obj, refKeyword, readOnlyKeyword, scopedKeyword, type);
        }

        /// <summary>Method added in version 4.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax WithScopedKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken scopedKeyword)
        {
            return WithScopedKeywordFunc1(_obj, scopedKeyword);
        }
    }
}
