// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax.</summary>
    public static partial class ConditionalDirectiveTriviaSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax";

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax WithConditionDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);

        private static readonly WithConditionDelegate0 WithConditionFunc0;

        static ConditionalDirectiveTriviaSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            WithConditionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithConditionDelegate0>(wrappedType, "WithCondition", "conditionExpressionSyntax");
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax WithCondition(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition)
        {
            return WithConditionFunc0(_obj, condition);
        }
    }
}
