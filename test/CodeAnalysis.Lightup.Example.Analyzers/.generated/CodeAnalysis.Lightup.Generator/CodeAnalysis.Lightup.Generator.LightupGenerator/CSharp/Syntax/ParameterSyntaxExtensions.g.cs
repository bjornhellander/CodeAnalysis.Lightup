// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.</summary>
    public static partial class ParameterSyntaxExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax";

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ExclamationExclamationTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax? _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxList<global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, global::Microsoft.CodeAnalysis.SyntaxTokenList modifiers, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? type, global::Microsoft.CodeAnalysis.SyntaxToken identifier, global::Microsoft.CodeAnalysis.SyntaxToken exclamationExclamationToken, global::Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax? @default);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax WithExclamationExclamationTokenDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax? _obj, global::Microsoft.CodeAnalysis.SyntaxToken exclamationExclamationToken);

        private static readonly ExclamationExclamationTokenGetterDelegate ExclamationExclamationTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithExclamationExclamationTokenDelegate1 WithExclamationExclamationTokenFunc1;

        static ParameterSyntaxExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ExclamationExclamationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ExclamationExclamationTokenGetterDelegate>(wrappedType, nameof(ExclamationExclamationToken));

            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "attributeListsSyntaxList`1", "modifiersSyntaxTokenList", "typeTypeSyntax", "identifierSyntaxToken", "exclamationExclamationTokenSyntaxToken", "defaultEqualsValueClauseSyntax");
            WithExclamationExclamationTokenFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithExclamationExclamationTokenDelegate1>(wrappedType, "WithExclamationExclamationToken", "exclamationExclamationTokenSyntaxToken");
        }

        /// <summary>Property added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxToken ExclamationExclamationToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax _obj)
        {
            return ExclamationExclamationTokenGetterFunc(_obj);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax Update(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxList<global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, global::Microsoft.CodeAnalysis.SyntaxTokenList modifiers, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax? type, global::Microsoft.CodeAnalysis.SyntaxToken identifier, global::Microsoft.CodeAnalysis.SyntaxToken exclamationExclamationToken, global::Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax? @default)
        {
            return UpdateFunc0(_obj, attributeLists, modifiers, type, identifier, exclamationExclamationToken, @default);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax WithExclamationExclamationToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken exclamationExclamationToken)
        {
            return WithExclamationExclamationTokenFunc1(_obj, exclamationExclamationToken);
        }
    }
}
