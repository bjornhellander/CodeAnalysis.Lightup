// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.</summary>
    public static partial class RefTypeSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax";

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ReadOnlyKeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken refKeyword, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax WithReadOnlyKeywordDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword);

        private static readonly ReadOnlyKeywordGetterDelegate ReadOnlyKeywordGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithReadOnlyKeywordDelegate1 WithReadOnlyKeywordFunc1;

        static RefTypeSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ReadOnlyKeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ReadOnlyKeywordGetterDelegate>(wrappedType, nameof(ReadOnlyKeyword));

            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "refKeywordSyntaxToken", "readOnlyKeywordSyntaxToken", "typeTypeSyntax");
            WithReadOnlyKeywordFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithReadOnlyKeywordDelegate1>(wrappedType, "WithReadOnlyKeyword", "readOnlyKeywordSyntaxToken");
        }

        /// <summary>Property added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxToken ReadOnlyKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj)
        {
            return ReadOnlyKeywordGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax Update(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken refKeyword, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type)
        {
            return UpdateFunc0(_obj, refKeyword, readOnlyKeyword, type);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax WithReadOnlyKeyword(this global::Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken readOnlyKeyword)
        {
            return WithReadOnlyKeywordFunc1(_obj, readOnlyKeyword);
        }
    }
}
