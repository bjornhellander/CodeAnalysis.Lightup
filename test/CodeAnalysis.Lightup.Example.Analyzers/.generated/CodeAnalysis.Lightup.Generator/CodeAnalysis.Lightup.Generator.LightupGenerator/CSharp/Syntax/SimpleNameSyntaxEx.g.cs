// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.</summary>
    public static partial class SimpleNameSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax";

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax WithIdentifierDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken identifier);

        private static readonly WithIdentifierDelegate0 WithIdentifierFunc0;

        static SimpleNameSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            WithIdentifierFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithIdentifierDelegate0>(wrappedType, "WithIdentifier", "identifierSyntaxToken");
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax WithIdentifier(this global::Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken identifier)
        {
            return WithIdentifierFunc0(_obj, identifier);
        }
    }
}
