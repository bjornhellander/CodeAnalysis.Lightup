// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.</summary>
    public static partial class ClassOrStructConstraintSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax";

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken QuestionTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword, global::Microsoft.CodeAnalysis.SyntaxToken questionToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax WithQuestionTokenDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken questionToken);

        private static readonly QuestionTokenGetterDelegate QuestionTokenGetterFunc;

        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithQuestionTokenDelegate1 WithQuestionTokenFunc1;

        static ClassOrStructConstraintSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            QuestionTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<QuestionTokenGetterDelegate>(wrappedType, nameof(QuestionToken));

            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(wrappedType, "Update", "classOrStructKeywordSyntaxToken", "questionTokenSyntaxToken");
            WithQuestionTokenFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithQuestionTokenDelegate1>(wrappedType, "WithQuestionToken", "questionTokenSyntaxToken");
        }

        /// <summary>Property added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxToken QuestionToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj)
        {
            return QuestionTokenGetterFunc(_obj);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax Update(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword, global::Microsoft.CodeAnalysis.SyntaxToken questionToken)
        {
            return UpdateFunc0(_obj, classOrStructKeyword, questionToken);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax WithQuestionToken(this global::Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken questionToken)
        {
            return WithQuestionTokenFunc1(_obj, questionToken);
        }
    }
}
