// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax. Added in version 2.0.0.0.</summary>
    public partial struct CasePatternSwitchLabelSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ColonTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxToken KeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper PatternGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? WhenClauseGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj);

        private delegate void AcceptDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken keyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper pattern, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? whenClause, global::Microsoft.CodeAnalysis.SyntaxToken colonToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithColonTokenDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken colonToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithKeywordDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken keyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithPatternDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper pattern);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithWhenClauseDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? whenClause);

        private static readonly ColonTokenGetterDelegate ColonTokenGetterFunc;
        private static readonly KeywordGetterDelegate KeywordGetterFunc;
        private static readonly PatternGetterDelegate PatternGetterFunc;
        private static readonly WhenClauseGetterDelegate WhenClauseGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithColonTokenDelegate0 WithColonTokenFunc0;
        private static readonly WithKeywordDelegate0 WithKeywordFunc0;
        private static readonly WithPatternDelegate0 WithPatternFunc0;
        private static readonly WithWhenClauseDelegate0 WithWhenClauseFunc0;

        private readonly global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax wrappedObject;

        static CasePatternSwitchLabelSyntaxWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ColonTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ColonTokenGetterDelegate>(WrappedType, nameof(ColonToken));
            KeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<KeywordGetterDelegate>(WrappedType, nameof(Keyword));
            PatternGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<PatternGetterDelegate>(WrappedType, nameof(Pattern));
            WhenClauseGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<WhenClauseGetterDelegate>(WrappedType, nameof(WhenClause));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(WrappedType, "Update", "keywordSyntaxToken", "patternPatternSyntax", "whenClauseWhenClauseSyntax", "colonTokenSyntaxToken");
            WithColonTokenFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithColonTokenDelegate0>(WrappedType, "WithColonToken", "colonTokenSyntaxToken");
            WithKeywordFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithKeywordDelegate0>(WrappedType, "WithKeyword", "keywordSyntaxToken");
            WithPatternFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithPatternDelegate0>(WrappedType, "WithPattern", "patternPatternSyntax");
            WithWhenClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithWhenClauseDelegate0>(WrappedType, "WithWhenClause", "whenClauseWhenClauseSyntax");
        }

        private CasePatternSwitchLabelSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken ColonToken
        {
            get { return ColonTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken Keyword
        {
            get { return KeywordGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper Pattern
        {
            get { return PatternGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? WhenClause
        {
            get { return WhenClauseGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator CasePatternSwitchLabelSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax(CasePatternSwitchLabelSyntaxWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static CasePatternSwitchLabelSyntaxWrapper Wrap(global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax>(obj, WrappedType);
            return new CasePatternSwitchLabelSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public void Accept(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
        {
            AcceptFunc0(wrappedObject, visitor);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper Update(global::Microsoft.CodeAnalysis.SyntaxToken keyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper pattern, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? whenClause, global::Microsoft.CodeAnalysis.SyntaxToken colonToken)
        {
            return UpdateFunc0(wrappedObject, keyword, pattern, whenClause, colonToken);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithColonToken(global::Microsoft.CodeAnalysis.SyntaxToken colonToken)
        {
            return WithColonTokenFunc0(wrappedObject, colonToken);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithKeyword(global::Microsoft.CodeAnalysis.SyntaxToken keyword)
        {
            return WithKeywordFunc0(wrappedObject, keyword);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithPattern(global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PatternSyntaxWrapper pattern)
        {
            return WithPatternFunc0(wrappedObject, pattern);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CasePatternSwitchLabelSyntaxWrapper WithWhenClause(global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WhenClauseSyntaxWrapper? whenClause)
        {
            return WithWhenClauseFunc0(wrappedObject, whenClause);
        }
    }
}
