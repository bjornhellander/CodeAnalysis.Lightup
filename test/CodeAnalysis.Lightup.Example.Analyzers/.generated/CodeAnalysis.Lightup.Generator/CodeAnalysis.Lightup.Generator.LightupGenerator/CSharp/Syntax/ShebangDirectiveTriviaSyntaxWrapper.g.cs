// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax. Added in version 1.1.0.0.</summary>
    public partial struct ShebangDirectiveTriviaSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ExclamationTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxToken HashTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj);
        private delegate global::System.Boolean IsActiveGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj);

        private delegate void AcceptDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper UpdateDelegate1(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken hashToken, global::Microsoft.CodeAnalysis.SyntaxToken exclamationToken, global::Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, global::System.Boolean isActive);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithEndOfDirectiveTokenDelegate2(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithExclamationTokenDelegate3(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken exclamationToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithHashTokenDelegate4(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken hashToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithIsActiveDelegate5(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax _obj, global::System.Boolean isActive);

        private static readonly EndOfDirectiveTokenGetterDelegate EndOfDirectiveTokenGetterFunc;
        private static readonly ExclamationTokenGetterDelegate ExclamationTokenGetterFunc;
        private static readonly HashTokenGetterDelegate HashTokenGetterFunc;
        private static readonly IsActiveGetterDelegate IsActiveGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly UpdateDelegate1 UpdateFunc1;
        private static readonly WithEndOfDirectiveTokenDelegate2 WithEndOfDirectiveTokenFunc2;
        private static readonly WithExclamationTokenDelegate3 WithExclamationTokenFunc3;
        private static readonly WithHashTokenDelegate4 WithHashTokenFunc4;
        private static readonly WithIsActiveDelegate5 WithIsActiveFunc5;

        private readonly global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax wrappedObject;

        static ShebangDirectiveTriviaSyntaxWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            EndOfDirectiveTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<EndOfDirectiveTokenGetterDelegate>(WrappedType, nameof(EndOfDirectiveToken));
            ExclamationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ExclamationTokenGetterDelegate>(WrappedType, nameof(ExclamationToken));
            HashTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<HashTokenGetterDelegate>(WrappedType, nameof(HashToken));
            IsActiveGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<IsActiveGetterDelegate>(WrappedType, nameof(IsActive));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            UpdateFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate1>(WrappedType, "Update", "hashTokenSyntaxToken", "exclamationTokenSyntaxToken", "endOfDirectiveTokenSyntaxToken", "isActiveBoolean");
            WithEndOfDirectiveTokenFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithEndOfDirectiveTokenDelegate2>(WrappedType, "WithEndOfDirectiveToken", "endOfDirectiveTokenSyntaxToken");
            WithExclamationTokenFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithExclamationTokenDelegate3>(WrappedType, "WithExclamationToken", "exclamationTokenSyntaxToken");
            WithHashTokenFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithHashTokenDelegate4>(WrappedType, "WithHashToken", "hashTokenSyntaxToken");
            WithIsActiveFunc5 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithIsActiveDelegate5>(WrappedType, "WithIsActive", "isActiveBoolean");
        }

        private ShebangDirectiveTriviaSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveToken
        {
            get { return EndOfDirectiveTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken ExclamationToken
        {
            get { return ExclamationTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken HashToken
        {
            get { return HashTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::System.Boolean IsActive
        {
            get { return IsActiveGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator ShebangDirectiveTriviaSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax(ShebangDirectiveTriviaSyntaxWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static ShebangDirectiveTriviaSyntaxWrapper Wrap(global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax>(obj, WrappedType);
            return new ShebangDirectiveTriviaSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public void Accept(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
        {
            AcceptFunc0(wrappedObject, visitor);
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper Update(global::Microsoft.CodeAnalysis.SyntaxToken hashToken, global::Microsoft.CodeAnalysis.SyntaxToken exclamationToken, global::Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, global::System.Boolean isActive)
        {
            return UpdateFunc1(wrappedObject, hashToken, exclamationToken, endOfDirectiveToken, isActive);
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithEndOfDirectiveToken(global::Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken)
        {
            return WithEndOfDirectiveTokenFunc2(wrappedObject, endOfDirectiveToken);
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithExclamationToken(global::Microsoft.CodeAnalysis.SyntaxToken exclamationToken)
        {
            return WithExclamationTokenFunc3(wrappedObject, exclamationToken);
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithHashToken(global::Microsoft.CodeAnalysis.SyntaxToken hashToken)
        {
            return WithHashTokenFunc4(wrappedObject, hashToken);
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ShebangDirectiveTriviaSyntaxWrapper WithIsActive(global::System.Boolean isActive)
        {
            return WithIsActiveFunc5(wrappedObject, isActive);
        }
    }
}
