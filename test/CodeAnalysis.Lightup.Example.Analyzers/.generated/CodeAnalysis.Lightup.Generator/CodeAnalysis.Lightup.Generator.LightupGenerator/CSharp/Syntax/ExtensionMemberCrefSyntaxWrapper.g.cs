// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.ExtensionMemberCrefSyntax. Added in version 5.0.0.0.</summary>
    public partial struct ExtensionMemberCrefSyntaxWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.ExtensionMemberCrefSyntax";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.SyntaxToken DotTokenGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxToken ExtensionKeywordGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax MemberGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax ParametersGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? TypeArgumentListGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj);

        private delegate void AcceptDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper AddParametersParametersDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, params global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[] items);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper AddTypeArgumentListArgumentsDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, params global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax[] items);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper UpdateDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken extensionKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? typeArgumentList, global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters, global::Microsoft.CodeAnalysis.SyntaxToken dotToken, global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithDotTokenDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken dotToken);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithExtensionKeywordDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.SyntaxToken extensionKeyword);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithMemberDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithParametersDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithTypeArgumentListDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? typeArgumentList);

        private static readonly DotTokenGetterDelegate DotTokenGetterFunc;
        private static readonly ExtensionKeywordGetterDelegate ExtensionKeywordGetterFunc;
        private static readonly MemberGetterDelegate MemberGetterFunc;
        private static readonly ParametersGetterDelegate ParametersGetterFunc;
        private static readonly TypeArgumentListGetterDelegate TypeArgumentListGetterFunc;

        private static readonly AcceptDelegate0 AcceptFunc0;
        private static readonly AddParametersParametersDelegate0 AddParametersParametersFunc0;
        private static readonly AddTypeArgumentListArgumentsDelegate0 AddTypeArgumentListArgumentsFunc0;
        private static readonly UpdateDelegate0 UpdateFunc0;
        private static readonly WithDotTokenDelegate0 WithDotTokenFunc0;
        private static readonly WithExtensionKeywordDelegate0 WithExtensionKeywordFunc0;
        private static readonly WithMemberDelegate0 WithMemberFunc0;
        private static readonly WithParametersDelegate0 WithParametersFunc0;
        private static readonly WithTypeArgumentListDelegate0 WithTypeArgumentListFunc0;

        private readonly global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax wrappedObject;

        static ExtensionMemberCrefSyntaxWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            DotTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<DotTokenGetterDelegate>(WrappedType, nameof(DotToken));
            ExtensionKeywordGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ExtensionKeywordGetterDelegate>(WrappedType, nameof(ExtensionKeyword));
            MemberGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<MemberGetterDelegate>(WrappedType, nameof(Member));
            ParametersGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ParametersGetterDelegate>(WrappedType, nameof(Parameters));
            TypeArgumentListGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<TypeArgumentListGetterDelegate>(WrappedType, nameof(TypeArgumentList));

            AcceptFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AcceptDelegate0>(WrappedType, "Accept", "visitorCSharpSyntaxVisitor");
            AddParametersParametersFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AddParametersParametersDelegate0>(WrappedType, "AddParametersParameters", "itemsCrefParameterSyntax[]");
            AddTypeArgumentListArgumentsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<AddTypeArgumentListArgumentsDelegate0>(WrappedType, "AddTypeArgumentListArguments", "itemsTypeSyntax[]");
            UpdateFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<UpdateDelegate0>(WrappedType, "Update", "extensionKeywordSyntaxToken", "typeArgumentListTypeArgumentListSyntax", "parametersCrefParameterListSyntax", "dotTokenSyntaxToken", "memberMemberCrefSyntax");
            WithDotTokenFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithDotTokenDelegate0>(WrappedType, "WithDotToken", "dotTokenSyntaxToken");
            WithExtensionKeywordFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithExtensionKeywordDelegate0>(WrappedType, "WithExtensionKeyword", "extensionKeywordSyntaxToken");
            WithMemberFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithMemberDelegate0>(WrappedType, "WithMember", "memberMemberCrefSyntax");
            WithParametersFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithParametersDelegate0>(WrappedType, "WithParameters", "parametersCrefParameterListSyntax");
            WithTypeArgumentListFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithTypeArgumentListDelegate0>(WrappedType, "WithTypeArgumentList", "typeArgumentListTypeArgumentListSyntax");
        }

        private ExtensionMemberCrefSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken DotToken
        {
            get { return DotTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken ExtensionKeyword
        {
            get { return ExtensionKeywordGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax Member
        {
            get { return MemberGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax Parameters
        {
            get { return ParametersGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? TypeArgumentList
        {
            get { return TypeArgumentListGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator ExtensionMemberCrefSyntaxWrapper(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax(ExtensionMemberCrefSyntaxWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static ExtensionMemberCrefSyntaxWrapper Wrap(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax>(obj, WrappedType);
            return new ExtensionMemberCrefSyntaxWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public void Accept(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor)
        {
            AcceptFunc0(wrappedObject, visitor);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper AddParametersParameters(params global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[] items)
        {
            return AddParametersParametersFunc0(wrappedObject, items);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper AddTypeArgumentListArguments(params global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax[] items)
        {
            return AddTypeArgumentListArgumentsFunc0(wrappedObject, items);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper Update(global::Microsoft.CodeAnalysis.SyntaxToken extensionKeyword, global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? typeArgumentList, global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters, global::Microsoft.CodeAnalysis.SyntaxToken dotToken, global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member)
        {
            return UpdateFunc0(wrappedObject, extensionKeyword, typeArgumentList, parameters, dotToken, member);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithDotToken(global::Microsoft.CodeAnalysis.SyntaxToken dotToken)
        {
            return WithDotTokenFunc0(wrappedObject, dotToken);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithExtensionKeyword(global::Microsoft.CodeAnalysis.SyntaxToken extensionKeyword)
        {
            return WithExtensionKeywordFunc0(wrappedObject, extensionKeyword);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithMember(global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member)
        {
            return WithMemberFunc0(wrappedObject, member);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithParameters(global::Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters)
        {
            return WithParametersFunc0(wrappedObject, parameters);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExtensionMemberCrefSyntaxWrapper WithTypeArgumentList(global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax? typeArgumentList)
        {
            return WithTypeArgumentListFunc0(wrappedObject, typeArgumentList);
        }
    }
}
