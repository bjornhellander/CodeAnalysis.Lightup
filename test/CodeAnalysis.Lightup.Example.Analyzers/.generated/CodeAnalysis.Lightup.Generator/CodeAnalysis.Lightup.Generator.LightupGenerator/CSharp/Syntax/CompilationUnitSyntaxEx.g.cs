// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Syntax.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.</summary>
    public static partial class CompilationUnitSyntaxEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax";

        private delegate global::System.Collections.Generic.IList<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LoadDirectiveTriviaSyntaxWrapper> GetLoadDirectivesDelegate0(global::Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax _obj);

        private static readonly GetLoadDirectivesDelegate0 GetLoadDirectivesFunc0;

        static CompilationUnitSyntaxEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            GetLoadDirectivesFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<GetLoadDirectivesDelegate0>(wrappedType, "GetLoadDirectives");
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public static global::System.Collections.Generic.IList<global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LoadDirectiveTriviaSyntaxWrapper> GetLoadDirectives(this global::Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax _obj)
        {
            return GetLoadDirectivesFunc0(_obj);
        }
    }
}
