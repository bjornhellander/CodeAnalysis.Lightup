// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.</summary>
    public static partial class CSharpSyntaxRewriterExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter";

        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitAllowsConstraintClauseDelegate0(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitBinaryPatternDelegate1(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BinaryPatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitCollectionExpressionDelegate2(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitDefaultConstraintDelegate3(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitExpressionColonDelegate4(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionColonSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitExpressionElementDelegate5(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionElementSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFieldExpressionDelegate6(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FieldExpressionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFileScopedNamespaceDeclarationDelegate7(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FileScopedNamespaceDeclarationSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerCallingConventionDelegate8(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerCallingConventionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerParameterDelegate9(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerParameterListDelegate10(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerTypeDelegate11(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerTypeSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerUnmanagedCallingConventionDelegate12(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerUnmanagedCallingConventionListDelegate13(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionListSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitImplicitObjectCreationExpressionDelegate14(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitObjectCreationExpressionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitLineDirectivePositionDelegate15(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitLineSpanDirectiveTriviaDelegate16(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitListPatternDelegate17(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ListPatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitParenthesizedPatternDelegate18(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ParenthesizedPatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitPrimaryConstructorBaseTypeDelegate19(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PrimaryConstructorBaseTypeSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitRecordDeclarationDelegate20(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitRefStructConstraintDelegate21(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RefStructConstraintSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitRelationalPatternDelegate22(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RelationalPatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitScopedTypeDelegate23(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitSlicePatternDelegate24(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitSpreadElementDelegate25(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SpreadElementSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitTypePatternDelegate26(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.TypePatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitUnaryPatternDelegate27(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.UnaryPatternSyntaxWrapper node);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode? VisitWithExpressionDelegate28(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter? _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WithExpressionSyntaxWrapper node);

        private static readonly VisitAllowsConstraintClauseDelegate0 VisitAllowsConstraintClauseFunc0;
        private static readonly VisitBinaryPatternDelegate1 VisitBinaryPatternFunc1;
        private static readonly VisitCollectionExpressionDelegate2 VisitCollectionExpressionFunc2;
        private static readonly VisitDefaultConstraintDelegate3 VisitDefaultConstraintFunc3;
        private static readonly VisitExpressionColonDelegate4 VisitExpressionColonFunc4;
        private static readonly VisitExpressionElementDelegate5 VisitExpressionElementFunc5;
        private static readonly VisitFieldExpressionDelegate6 VisitFieldExpressionFunc6;
        private static readonly VisitFileScopedNamespaceDeclarationDelegate7 VisitFileScopedNamespaceDeclarationFunc7;
        private static readonly VisitFunctionPointerCallingConventionDelegate8 VisitFunctionPointerCallingConventionFunc8;
        private static readonly VisitFunctionPointerParameterDelegate9 VisitFunctionPointerParameterFunc9;
        private static readonly VisitFunctionPointerParameterListDelegate10 VisitFunctionPointerParameterListFunc10;
        private static readonly VisitFunctionPointerTypeDelegate11 VisitFunctionPointerTypeFunc11;
        private static readonly VisitFunctionPointerUnmanagedCallingConventionDelegate12 VisitFunctionPointerUnmanagedCallingConventionFunc12;
        private static readonly VisitFunctionPointerUnmanagedCallingConventionListDelegate13 VisitFunctionPointerUnmanagedCallingConventionListFunc13;
        private static readonly VisitImplicitObjectCreationExpressionDelegate14 VisitImplicitObjectCreationExpressionFunc14;
        private static readonly VisitLineDirectivePositionDelegate15 VisitLineDirectivePositionFunc15;
        private static readonly VisitLineSpanDirectiveTriviaDelegate16 VisitLineSpanDirectiveTriviaFunc16;
        private static readonly VisitListPatternDelegate17 VisitListPatternFunc17;
        private static readonly VisitParenthesizedPatternDelegate18 VisitParenthesizedPatternFunc18;
        private static readonly VisitPrimaryConstructorBaseTypeDelegate19 VisitPrimaryConstructorBaseTypeFunc19;
        private static readonly VisitRecordDeclarationDelegate20 VisitRecordDeclarationFunc20;
        private static readonly VisitRefStructConstraintDelegate21 VisitRefStructConstraintFunc21;
        private static readonly VisitRelationalPatternDelegate22 VisitRelationalPatternFunc22;
        private static readonly VisitScopedTypeDelegate23 VisitScopedTypeFunc23;
        private static readonly VisitSlicePatternDelegate24 VisitSlicePatternFunc24;
        private static readonly VisitSpreadElementDelegate25 VisitSpreadElementFunc25;
        private static readonly VisitTypePatternDelegate26 VisitTypePatternFunc26;
        private static readonly VisitUnaryPatternDelegate27 VisitUnaryPatternFunc27;
        private static readonly VisitWithExpressionDelegate28 VisitWithExpressionFunc28;

        static CSharpSyntaxRewriterExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            VisitAllowsConstraintClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitAllowsConstraintClauseDelegate0>(wrappedType, "VisitAllowsConstraintClause", "nodeAllowsConstraintClauseSyntax");
            VisitBinaryPatternFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitBinaryPatternDelegate1>(wrappedType, "VisitBinaryPattern", "nodeBinaryPatternSyntax");
            VisitCollectionExpressionFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitCollectionExpressionDelegate2>(wrappedType, "VisitCollectionExpression", "nodeCollectionExpressionSyntax");
            VisitDefaultConstraintFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitDefaultConstraintDelegate3>(wrappedType, "VisitDefaultConstraint", "nodeDefaultConstraintSyntax");
            VisitExpressionColonFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitExpressionColonDelegate4>(wrappedType, "VisitExpressionColon", "nodeExpressionColonSyntax");
            VisitExpressionElementFunc5 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitExpressionElementDelegate5>(wrappedType, "VisitExpressionElement", "nodeExpressionElementSyntax");
            VisitFieldExpressionFunc6 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFieldExpressionDelegate6>(wrappedType, "VisitFieldExpression", "nodeFieldExpressionSyntax");
            VisitFileScopedNamespaceDeclarationFunc7 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFileScopedNamespaceDeclarationDelegate7>(wrappedType, "VisitFileScopedNamespaceDeclaration", "nodeFileScopedNamespaceDeclarationSyntax");
            VisitFunctionPointerCallingConventionFunc8 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerCallingConventionDelegate8>(wrappedType, "VisitFunctionPointerCallingConvention", "nodeFunctionPointerCallingConventionSyntax");
            VisitFunctionPointerParameterFunc9 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerParameterDelegate9>(wrappedType, "VisitFunctionPointerParameter", "nodeFunctionPointerParameterSyntax");
            VisitFunctionPointerParameterListFunc10 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerParameterListDelegate10>(wrappedType, "VisitFunctionPointerParameterList", "nodeFunctionPointerParameterListSyntax");
            VisitFunctionPointerTypeFunc11 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerTypeDelegate11>(wrappedType, "VisitFunctionPointerType", "nodeFunctionPointerTypeSyntax");
            VisitFunctionPointerUnmanagedCallingConventionFunc12 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerUnmanagedCallingConventionDelegate12>(wrappedType, "VisitFunctionPointerUnmanagedCallingConvention", "nodeFunctionPointerUnmanagedCallingConventionSyntax");
            VisitFunctionPointerUnmanagedCallingConventionListFunc13 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerUnmanagedCallingConventionListDelegate13>(wrappedType, "VisitFunctionPointerUnmanagedCallingConventionList", "nodeFunctionPointerUnmanagedCallingConventionListSyntax");
            VisitImplicitObjectCreationExpressionFunc14 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitImplicitObjectCreationExpressionDelegate14>(wrappedType, "VisitImplicitObjectCreationExpression", "nodeImplicitObjectCreationExpressionSyntax");
            VisitLineDirectivePositionFunc15 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitLineDirectivePositionDelegate15>(wrappedType, "VisitLineDirectivePosition", "nodeLineDirectivePositionSyntax");
            VisitLineSpanDirectiveTriviaFunc16 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitLineSpanDirectiveTriviaDelegate16>(wrappedType, "VisitLineSpanDirectiveTrivia", "nodeLineSpanDirectiveTriviaSyntax");
            VisitListPatternFunc17 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitListPatternDelegate17>(wrappedType, "VisitListPattern", "nodeListPatternSyntax");
            VisitParenthesizedPatternFunc18 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitParenthesizedPatternDelegate18>(wrappedType, "VisitParenthesizedPattern", "nodeParenthesizedPatternSyntax");
            VisitPrimaryConstructorBaseTypeFunc19 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitPrimaryConstructorBaseTypeDelegate19>(wrappedType, "VisitPrimaryConstructorBaseType", "nodePrimaryConstructorBaseTypeSyntax");
            VisitRecordDeclarationFunc20 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRecordDeclarationDelegate20>(wrappedType, "VisitRecordDeclaration", "nodeRecordDeclarationSyntax");
            VisitRefStructConstraintFunc21 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRefStructConstraintDelegate21>(wrappedType, "VisitRefStructConstraint", "nodeRefStructConstraintSyntax");
            VisitRelationalPatternFunc22 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRelationalPatternDelegate22>(wrappedType, "VisitRelationalPattern", "nodeRelationalPatternSyntax");
            VisitScopedTypeFunc23 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitScopedTypeDelegate23>(wrappedType, "VisitScopedType", "nodeScopedTypeSyntax");
            VisitSlicePatternFunc24 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSlicePatternDelegate24>(wrappedType, "VisitSlicePattern", "nodeSlicePatternSyntax");
            VisitSpreadElementFunc25 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSpreadElementDelegate25>(wrappedType, "VisitSpreadElement", "nodeSpreadElementSyntax");
            VisitTypePatternFunc26 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitTypePatternDelegate26>(wrappedType, "VisitTypePattern", "nodeTypePatternSyntax");
            VisitUnaryPatternFunc27 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitUnaryPatternDelegate27>(wrappedType, "VisitUnaryPattern", "nodeUnaryPatternSyntax");
            VisitWithExpressionFunc28 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitWithExpressionDelegate28>(wrappedType, "VisitWithExpression", "nodeWithExpressionSyntax");
        }

        /// <summary>Method added in version 4.12.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitAllowsConstraintClause(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper node)
        {
            return VisitAllowsConstraintClauseFunc0(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitBinaryPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BinaryPatternSyntaxWrapper node)
        {
            return VisitBinaryPatternFunc1(_obj, node);
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitCollectionExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper node)
        {
            return VisitCollectionExpressionFunc2(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitDefaultConstraint(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper node)
        {
            return VisitDefaultConstraintFunc3(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitExpressionColon(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionColonSyntaxWrapper node)
        {
            return VisitExpressionColonFunc4(_obj, node);
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitExpressionElement(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionElementSyntaxWrapper node)
        {
            return VisitExpressionElementFunc5(_obj, node);
        }

        /// <summary>Method added in version 4.12.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFieldExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FieldExpressionSyntaxWrapper node)
        {
            return VisitFieldExpressionFunc6(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFileScopedNamespaceDeclaration(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FileScopedNamespaceDeclarationSyntaxWrapper node)
        {
            return VisitFileScopedNamespaceDeclarationFunc7(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerCallingConvention(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerCallingConventionSyntaxWrapper node)
        {
            return VisitFunctionPointerCallingConventionFunc8(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerParameter(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper node)
        {
            return VisitFunctionPointerParameterFunc9(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerParameterList(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper node)
        {
            return VisitFunctionPointerParameterListFunc10(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerTypeSyntaxWrapper node)
        {
            return VisitFunctionPointerTypeFunc11(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerUnmanagedCallingConvention(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionSyntaxWrapper node)
        {
            return VisitFunctionPointerUnmanagedCallingConventionFunc12(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitFunctionPointerUnmanagedCallingConventionList(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionListSyntaxWrapper node)
        {
            return VisitFunctionPointerUnmanagedCallingConventionListFunc13(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitImplicitObjectCreationExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitObjectCreationExpressionSyntaxWrapper node)
        {
            return VisitImplicitObjectCreationExpressionFunc14(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitLineDirectivePosition(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper node)
        {
            return VisitLineDirectivePositionFunc15(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitLineSpanDirectiveTrivia(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper node)
        {
            return VisitLineSpanDirectiveTriviaFunc16(_obj, node);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitListPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ListPatternSyntaxWrapper node)
        {
            return VisitListPatternFunc17(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitParenthesizedPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ParenthesizedPatternSyntaxWrapper node)
        {
            return VisitParenthesizedPatternFunc18(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitPrimaryConstructorBaseType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PrimaryConstructorBaseTypeSyntaxWrapper node)
        {
            return VisitPrimaryConstructorBaseTypeFunc19(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitRecordDeclaration(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper node)
        {
            return VisitRecordDeclarationFunc20(_obj, node);
        }

        /// <summary>Method added in version 4.12.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitRefStructConstraint(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RefStructConstraintSyntaxWrapper node)
        {
            return VisitRefStructConstraintFunc21(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitRelationalPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RelationalPatternSyntaxWrapper node)
        {
            return VisitRelationalPatternFunc22(_obj, node);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitScopedType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper node)
        {
            return VisitScopedTypeFunc23(_obj, node);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitSlicePattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper node)
        {
            return VisitSlicePatternFunc24(_obj, node);
        }

        /// <summary>Method added in version 4.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitSpreadElement(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SpreadElementSyntaxWrapper node)
        {
            return VisitSpreadElementFunc25(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitTypePattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.TypePatternSyntaxWrapper node)
        {
            return VisitTypePatternFunc26(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitUnaryPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.UnaryPatternSyntaxWrapper node)
        {
            return VisitUnaryPatternFunc27(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode? VisitWithExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WithExpressionSyntaxWrapper node)
        {
            return VisitWithExpressionFunc28(_obj, node);
        }
    }
}
