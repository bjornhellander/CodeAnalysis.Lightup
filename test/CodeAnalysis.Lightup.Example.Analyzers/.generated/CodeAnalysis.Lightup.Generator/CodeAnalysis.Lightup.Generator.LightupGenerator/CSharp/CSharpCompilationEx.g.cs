// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpCompilation.</summary>
    public static partial class CSharpCompilationEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpCompilation";

        private delegate global::Microsoft.CodeAnalysis.Operations.CommonConversion ClassifyCommonConversionDelegate0(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination);
        private delegate global::System.Boolean ContainsSymbolsWithNameDelegate1(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModelDelegate2(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithNameDelegate3(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferencesDelegate4(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.Threading.CancellationToken cancellationToken);

        private static readonly ClassifyCommonConversionDelegate0 ClassifyCommonConversionFunc0;
        private static readonly ContainsSymbolsWithNameDelegate1 ContainsSymbolsWithNameFunc1;
        private static readonly GetSemanticModelDelegate2 GetSemanticModelFunc2;
        private static readonly GetSymbolsWithNameDelegate3 GetSymbolsWithNameFunc3;
        private static readonly GetUsedAssemblyReferencesDelegate4 GetUsedAssemblyReferencesFunc4;

        static CSharpCompilationEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ClassifyCommonConversionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ClassifyCommonConversionDelegate0>(wrappedType, "ClassifyCommonConversion", "sourceITypeSymbol", "destinationITypeSymbol");
            ContainsSymbolsWithNameFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ContainsSymbolsWithNameDelegate1>(wrappedType, "ContainsSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            GetSemanticModelFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<GetSemanticModelDelegate2>(wrappedType, "GetSemanticModel", "syntaxTreeSyntaxTree", "optionsSemanticModelOptions");
            GetSymbolsWithNameFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<GetSymbolsWithNameDelegate3>(wrappedType, "GetSymbolsWithName", "nameString", "filterSymbolFilter", "cancellationTokenCancellationToken");
            GetUsedAssemblyReferencesFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<GetUsedAssemblyReferencesDelegate4>(wrappedType, "GetUsedAssemblyReferences", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Operations.CommonConversion ClassifyCommonConversion(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::Microsoft.CodeAnalysis.ITypeSymbol source, global::Microsoft.CodeAnalysis.ITypeSymbol destination)
        {
            return ClassifyCommonConversionFunc0(_obj, source, destination);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Boolean ContainsSymbolsWithName(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return ContainsSymbolsWithNameFunc1(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SemanticModel GetSemanticModel(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::Microsoft.CodeAnalysis.SyntaxTree syntaxTree, global::Microsoft.CodeAnalysis.Lightup.SemanticModelOptionsEx options)
        {
            return GetSemanticModelFunc2(_obj, syntaxTree, options);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithName(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.String name, global::Microsoft.CodeAnalysis.SymbolFilter filter, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetSymbolsWithNameFunc3(_obj, name, filter, cancellationToken);
        }

        /// <summary>Method added in version 3.10.0.0.</summary>
        public static global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.MetadataReference> GetUsedAssemblyReferences(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation _obj, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetUsedAssemblyReferencesFunc4(_obj, cancellationToken);
        }
    }
}
