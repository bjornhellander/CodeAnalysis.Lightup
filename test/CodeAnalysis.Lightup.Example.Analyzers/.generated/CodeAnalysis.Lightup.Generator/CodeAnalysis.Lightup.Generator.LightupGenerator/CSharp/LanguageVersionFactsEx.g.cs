// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts. Added in version 2.3.0.0.</summary>
    public static partial class LanguageVersionFactsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts";

        private delegate global::Microsoft.CodeAnalysis.CSharp.LanguageVersion MapSpecifiedToEffectiveVersionDelegate0(global::Microsoft.CodeAnalysis.CSharp.LanguageVersion version);
        private delegate global::System.String ToDisplayStringDelegate0(global::Microsoft.CodeAnalysis.CSharp.LanguageVersion version);
        private delegate global::System.Boolean TryParseDelegate0(global::System.String? version, out global::Microsoft.CodeAnalysis.CSharp.LanguageVersion result);

        private static readonly MapSpecifiedToEffectiveVersionDelegate0 MapSpecifiedToEffectiveVersionFunc0;
        private static readonly ToDisplayStringDelegate0 ToDisplayStringFunc0;
        private static readonly TryParseDelegate0 TryParseFunc0;

        static LanguageVersionFactsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            MapSpecifiedToEffectiveVersionFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateStaticMethodAccessor<MapSpecifiedToEffectiveVersionDelegate0>(wrappedType, "MapSpecifiedToEffectiveVersion", "versionLanguageVersion");
            ToDisplayStringFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateStaticMethodAccessor<ToDisplayStringDelegate0>(wrappedType, "ToDisplayString", "versionLanguageVersion");
            TryParseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateStaticMethodAccessor<TryParseDelegate0>(wrappedType, "TryParse", "versionString", "resultLanguageVersion&");
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.LanguageVersion MapSpecifiedToEffectiveVersion(this global::Microsoft.CodeAnalysis.CSharp.LanguageVersion version)
        {
            return MapSpecifiedToEffectiveVersionFunc0(version);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::System.String ToDisplayString(this global::Microsoft.CodeAnalysis.CSharp.LanguageVersion version)
        {
            return ToDisplayStringFunc0(version);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::System.Boolean TryParse(global::System.String? version, out global::Microsoft.CodeAnalysis.CSharp.LanguageVersion result)
        {
            return TryParseFunc0(version, out result);
        }
    }
}
