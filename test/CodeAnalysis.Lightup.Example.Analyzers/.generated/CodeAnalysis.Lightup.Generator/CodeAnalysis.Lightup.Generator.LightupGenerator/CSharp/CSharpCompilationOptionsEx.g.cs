// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.</summary>
    public static partial class CSharpCompilationOptionsEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions";

        private delegate Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions ConstructorDelegate0(global::Microsoft.CodeAnalysis.OutputKind outputKind, global::System.Boolean reportSuppressedDiagnostics, global::System.String? moduleName, global::System.String? mainTypeName, global::System.String? scriptClassName, global::System.Collections.Generic.IEnumerable<global::System.String>? usings, global::Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, global::System.Boolean checkOverflow, global::System.Boolean allowUnsafe, global::System.String? cryptoKeyContainer, global::System.String? cryptoKeyFile, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey, global::System.Nullable<global::System.Boolean> delaySign, global::Microsoft.CodeAnalysis.Platform platform, global::Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, global::System.Int32 warningLevel, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic>>? specificDiagnosticOptions, global::System.Boolean concurrentBuild, global::System.Boolean deterministic, global::Microsoft.CodeAnalysis.XmlReferenceResolver? xmlReferenceResolver, global::Microsoft.CodeAnalysis.SourceReferenceResolver? sourceReferenceResolver, global::Microsoft.CodeAnalysis.MetadataReferenceResolver? metadataReferenceResolver, global::Microsoft.CodeAnalysis.AssemblyIdentityComparer? assemblyIdentityComparer, global::Microsoft.CodeAnalysis.StrongNameProvider? strongNameProvider, global::System.Boolean publicSign, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx metadataImportOptions);
        private delegate Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions ConstructorDelegate1(global::Microsoft.CodeAnalysis.OutputKind outputKind, global::System.Boolean reportSuppressedDiagnostics, global::System.String? moduleName, global::System.String? mainTypeName, global::System.String? scriptClassName, global::System.Collections.Generic.IEnumerable<global::System.String>? usings, global::Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, global::System.Boolean checkOverflow, global::System.Boolean allowUnsafe, global::System.String? cryptoKeyContainer, global::System.String? cryptoKeyFile, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey, global::System.Nullable<global::System.Boolean> delaySign, global::Microsoft.CodeAnalysis.Platform platform, global::Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, global::System.Int32 warningLevel, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic>>? specificDiagnosticOptions, global::System.Boolean concurrentBuild, global::System.Boolean deterministic, global::Microsoft.CodeAnalysis.XmlReferenceResolver? xmlReferenceResolver, global::Microsoft.CodeAnalysis.SourceReferenceResolver? sourceReferenceResolver, global::Microsoft.CodeAnalysis.MetadataReferenceResolver? metadataReferenceResolver, global::Microsoft.CodeAnalysis.AssemblyIdentityComparer? assemblyIdentityComparer, global::Microsoft.CodeAnalysis.StrongNameProvider? strongNameProvider, global::System.Boolean publicSign, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx metadataImportOptions, global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx nullableContextOptions);

        private delegate global::System.String LanguageGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj);
        private delegate global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptionsGetterDelegate(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithMetadataImportOptionsDelegate0(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value);
        private delegate global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithNullableContextOptionsDelegate1(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx options);
        private delegate global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithSyntaxTreeOptionsProviderDelegate2(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider);

        private static readonly ConstructorDelegate0 ConstructorFunc0;
        private static readonly ConstructorDelegate1 ConstructorFunc1;

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly NullableContextOptionsGetterDelegate NullableContextOptionsGetterFunc;

        private static readonly WithMetadataImportOptionsDelegate0 WithMetadataImportOptionsFunc0;
        private static readonly WithNullableContextOptionsDelegate1 WithNullableContextOptionsFunc1;
        private static readonly WithSyntaxTreeOptionsProviderDelegate2 WithSyntaxTreeOptionsProviderFunc2;

        static CSharpCompilationOptionsEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(wrappedType, "outputKindOutputKind", "reportSuppressedDiagnosticsBoolean", "moduleNameString", "mainTypeNameString", "scriptClassNameString", "usingsIEnumerable`1", "optimizationLevelOptimizationLevel", "checkOverflowBoolean", "allowUnsafeBoolean", "cryptoKeyContainerString", "cryptoKeyFileString", "cryptoPublicKeyImmutableArray`1", "delaySignNullable`1", "platformPlatform", "generalDiagnosticOptionReportDiagnostic", "warningLevelInt32", "specificDiagnosticOptionsIEnumerable`1", "concurrentBuildBoolean", "deterministicBoolean", "xmlReferenceResolverXmlReferenceResolver", "sourceReferenceResolverSourceReferenceResolver", "metadataReferenceResolverMetadataReferenceResolver", "assemblyIdentityComparerAssemblyIdentityComparer", "strongNameProviderStrongNameProvider", "publicSignBoolean", "metadataImportOptionsMetadataImportOptions");
            ConstructorFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate1>(wrappedType, "outputKindOutputKind", "reportSuppressedDiagnosticsBoolean", "moduleNameString", "mainTypeNameString", "scriptClassNameString", "usingsIEnumerable`1", "optimizationLevelOptimizationLevel", "checkOverflowBoolean", "allowUnsafeBoolean", "cryptoKeyContainerString", "cryptoKeyFileString", "cryptoPublicKeyImmutableArray`1", "delaySignNullable`1", "platformPlatform", "generalDiagnosticOptionReportDiagnostic", "warningLevelInt32", "specificDiagnosticOptionsIEnumerable`1", "concurrentBuildBoolean", "deterministicBoolean", "xmlReferenceResolverXmlReferenceResolver", "sourceReferenceResolverSourceReferenceResolver", "metadataReferenceResolverMetadataReferenceResolver", "assemblyIdentityComparerAssemblyIdentityComparer", "strongNameProviderStrongNameProvider", "publicSignBoolean", "metadataImportOptionsMetadataImportOptions", "nullableContextOptionsNullableContextOptions");

            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(wrappedType, nameof(Language));
            NullableContextOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<NullableContextOptionsGetterDelegate>(wrappedType, nameof(NullableContextOptions));

            WithMetadataImportOptionsFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithMetadataImportOptionsDelegate0>(wrappedType, "WithMetadataImportOptions", "valueMetadataImportOptions");
            WithNullableContextOptionsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithNullableContextOptionsDelegate1>(wrappedType, "WithNullableContextOptions", "optionsNullableContextOptions");
            WithSyntaxTreeOptionsProviderFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithSyntaxTreeOptionsProviderDelegate2>(wrappedType, "WithSyntaxTreeOptionsProvider", "providerSyntaxTreeOptionsProvider");
        }

        /// <summary>Constructor added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions Create(global::Microsoft.CodeAnalysis.OutputKind outputKind, global::System.Boolean reportSuppressedDiagnostics, global::System.String? moduleName, global::System.String? mainTypeName, global::System.String? scriptClassName, global::System.Collections.Generic.IEnumerable<global::System.String>? usings, global::Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, global::System.Boolean checkOverflow, global::System.Boolean allowUnsafe, global::System.String? cryptoKeyContainer, global::System.String? cryptoKeyFile, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey, global::System.Nullable<global::System.Boolean> delaySign, global::Microsoft.CodeAnalysis.Platform platform, global::Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, global::System.Int32 warningLevel, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic>>? specificDiagnosticOptions, global::System.Boolean concurrentBuild, global::System.Boolean deterministic, global::Microsoft.CodeAnalysis.XmlReferenceResolver? xmlReferenceResolver, global::Microsoft.CodeAnalysis.SourceReferenceResolver? sourceReferenceResolver, global::Microsoft.CodeAnalysis.MetadataReferenceResolver? metadataReferenceResolver, global::Microsoft.CodeAnalysis.AssemblyIdentityComparer? assemblyIdentityComparer, global::Microsoft.CodeAnalysis.StrongNameProvider? strongNameProvider, global::System.Boolean publicSign, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx metadataImportOptions)
        {
            return ConstructorFunc0(outputKind, reportSuppressedDiagnostics, moduleName, mainTypeName, scriptClassName, usings, optimizationLevel, checkOverflow, allowUnsafe, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, warningLevel, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider, publicSign, metadataImportOptions);
        }

        /// <summary>Constructor added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions Create(global::Microsoft.CodeAnalysis.OutputKind outputKind, global::System.Boolean reportSuppressedDiagnostics, global::System.String? moduleName, global::System.String? mainTypeName, global::System.String? scriptClassName, global::System.Collections.Generic.IEnumerable<global::System.String>? usings, global::Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, global::System.Boolean checkOverflow, global::System.Boolean allowUnsafe, global::System.String? cryptoKeyContainer, global::System.String? cryptoKeyFile, global::System.Collections.Immutable.ImmutableArray<global::System.Byte> cryptoPublicKey, global::System.Nullable<global::System.Boolean> delaySign, global::Microsoft.CodeAnalysis.Platform platform, global::Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, global::System.Int32 warningLevel, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::Microsoft.CodeAnalysis.ReportDiagnostic>>? specificDiagnosticOptions, global::System.Boolean concurrentBuild, global::System.Boolean deterministic, global::Microsoft.CodeAnalysis.XmlReferenceResolver? xmlReferenceResolver, global::Microsoft.CodeAnalysis.SourceReferenceResolver? sourceReferenceResolver, global::Microsoft.CodeAnalysis.MetadataReferenceResolver? metadataReferenceResolver, global::Microsoft.CodeAnalysis.AssemblyIdentityComparer? assemblyIdentityComparer, global::Microsoft.CodeAnalysis.StrongNameProvider? strongNameProvider, global::System.Boolean publicSign, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx metadataImportOptions, global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx nullableContextOptions)
        {
            return ConstructorFunc1(outputKind, reportSuppressedDiagnostics, moduleName, mainTypeName, scriptClassName, usings, optimizationLevel, checkOverflow, allowUnsafe, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, warningLevel, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider, publicSign, metadataImportOptions, nullableContextOptions);
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public static global::System.String Language(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj)
        {
            return LanguageGetterFunc(_obj);
        }

        /// <summary>Property added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx NullableContextOptions(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj)
        {
            return NullableContextOptionsGetterFunc(_obj);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithMetadataImportOptions(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.MetadataImportOptionsEx value)
        {
            return WithMetadataImportOptionsFunc0(_obj, value);
        }

        /// <summary>Method added in version 3.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithNullableContextOptions(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.NullableContextOptionsEx options)
        {
            return WithNullableContextOptionsFunc1(_obj, options);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions WithSyntaxTreeOptionsProvider(this global::Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions _obj, global::Microsoft.CodeAnalysis.Lightup.SyntaxTreeOptionsProviderWrapper? provider)
        {
            return WithSyntaxTreeOptionsProviderFunc2(_obj, provider);
        }
    }
}
