// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.</summary>
    public static partial class CSharpSyntaxVisitorEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor";

        private delegate void VisitAllowsConstraintClauseDelegate0(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper node);
        private delegate void VisitBinaryPatternDelegate1(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BinaryPatternSyntaxWrapper node);
        private delegate void VisitCollectionExpressionDelegate2(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper node);
        private delegate void VisitDefaultConstraintDelegate3(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper node);
        private delegate void VisitDiscardPatternDelegate4(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DiscardPatternSyntaxWrapper node);
        private delegate void VisitExpressionColonDelegate5(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionColonSyntaxWrapper node);
        private delegate void VisitExpressionElementDelegate6(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionElementSyntaxWrapper node);
        private delegate void VisitFieldExpressionDelegate7(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FieldExpressionSyntaxWrapper node);
        private delegate void VisitFileScopedNamespaceDeclarationDelegate8(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FileScopedNamespaceDeclarationSyntaxWrapper node);
        private delegate void VisitFunctionPointerCallingConventionDelegate9(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerCallingConventionSyntaxWrapper node);
        private delegate void VisitFunctionPointerParameterDelegate10(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper node);
        private delegate void VisitFunctionPointerParameterListDelegate11(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper node);
        private delegate void VisitFunctionPointerTypeDelegate12(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerTypeSyntaxWrapper node);
        private delegate void VisitFunctionPointerUnmanagedCallingConventionDelegate13(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionSyntaxWrapper node);
        private delegate void VisitFunctionPointerUnmanagedCallingConventionListDelegate14(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionListSyntaxWrapper node);
        private delegate void VisitImplicitObjectCreationExpressionDelegate15(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitObjectCreationExpressionSyntaxWrapper node);
        private delegate void VisitImplicitStackAllocArrayCreationExpressionDelegate16(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitStackAllocArrayCreationExpressionSyntaxWrapper node);
        private delegate void VisitLineDirectivePositionDelegate17(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper node);
        private delegate void VisitLineSpanDirectiveTriviaDelegate18(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper node);
        private delegate void VisitListPatternDelegate19(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ListPatternSyntaxWrapper node);
        private delegate void VisitNullableDirectiveTriviaDelegate20(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.NullableDirectiveTriviaSyntaxWrapper node);
        private delegate void VisitParenthesizedPatternDelegate21(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ParenthesizedPatternSyntaxWrapper node);
        private delegate void VisitPositionalPatternClauseDelegate22(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PositionalPatternClauseSyntaxWrapper node);
        private delegate void VisitPrimaryConstructorBaseTypeDelegate23(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PrimaryConstructorBaseTypeSyntaxWrapper node);
        private delegate void VisitPropertyPatternClauseDelegate24(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PropertyPatternClauseSyntaxWrapper node);
        private delegate void VisitRangeExpressionDelegate25(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RangeExpressionSyntaxWrapper node);
        private delegate void VisitRecordDeclarationDelegate26(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper node);
        private delegate void VisitRecursivePatternDelegate27(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecursivePatternSyntaxWrapper node);
        private delegate void VisitRefStructConstraintDelegate28(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RefStructConstraintSyntaxWrapper node);
        private delegate void VisitRelationalPatternDelegate29(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RelationalPatternSyntaxWrapper node);
        private delegate void VisitScopedTypeDelegate30(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper node);
        private delegate void VisitSlicePatternDelegate31(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper node);
        private delegate void VisitSpreadElementDelegate32(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SpreadElementSyntaxWrapper node);
        private delegate void VisitSubpatternDelegate33(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SubpatternSyntaxWrapper node);
        private delegate void VisitSwitchExpressionDelegate34(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SwitchExpressionSyntaxWrapper node);
        private delegate void VisitSwitchExpressionArmDelegate35(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SwitchExpressionArmSyntaxWrapper node);
        private delegate void VisitTypePatternDelegate36(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.TypePatternSyntaxWrapper node);
        private delegate void VisitUnaryPatternDelegate37(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.UnaryPatternSyntaxWrapper node);
        private delegate void VisitVarPatternDelegate38(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.VarPatternSyntaxWrapper node);
        private delegate void VisitWithExpressionDelegate39(global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WithExpressionSyntaxWrapper node);

        private static readonly VisitAllowsConstraintClauseDelegate0 VisitAllowsConstraintClauseFunc0;
        private static readonly VisitBinaryPatternDelegate1 VisitBinaryPatternFunc1;
        private static readonly VisitCollectionExpressionDelegate2 VisitCollectionExpressionFunc2;
        private static readonly VisitDefaultConstraintDelegate3 VisitDefaultConstraintFunc3;
        private static readonly VisitDiscardPatternDelegate4 VisitDiscardPatternFunc4;
        private static readonly VisitExpressionColonDelegate5 VisitExpressionColonFunc5;
        private static readonly VisitExpressionElementDelegate6 VisitExpressionElementFunc6;
        private static readonly VisitFieldExpressionDelegate7 VisitFieldExpressionFunc7;
        private static readonly VisitFileScopedNamespaceDeclarationDelegate8 VisitFileScopedNamespaceDeclarationFunc8;
        private static readonly VisitFunctionPointerCallingConventionDelegate9 VisitFunctionPointerCallingConventionFunc9;
        private static readonly VisitFunctionPointerParameterDelegate10 VisitFunctionPointerParameterFunc10;
        private static readonly VisitFunctionPointerParameterListDelegate11 VisitFunctionPointerParameterListFunc11;
        private static readonly VisitFunctionPointerTypeDelegate12 VisitFunctionPointerTypeFunc12;
        private static readonly VisitFunctionPointerUnmanagedCallingConventionDelegate13 VisitFunctionPointerUnmanagedCallingConventionFunc13;
        private static readonly VisitFunctionPointerUnmanagedCallingConventionListDelegate14 VisitFunctionPointerUnmanagedCallingConventionListFunc14;
        private static readonly VisitImplicitObjectCreationExpressionDelegate15 VisitImplicitObjectCreationExpressionFunc15;
        private static readonly VisitImplicitStackAllocArrayCreationExpressionDelegate16 VisitImplicitStackAllocArrayCreationExpressionFunc16;
        private static readonly VisitLineDirectivePositionDelegate17 VisitLineDirectivePositionFunc17;
        private static readonly VisitLineSpanDirectiveTriviaDelegate18 VisitLineSpanDirectiveTriviaFunc18;
        private static readonly VisitListPatternDelegate19 VisitListPatternFunc19;
        private static readonly VisitNullableDirectiveTriviaDelegate20 VisitNullableDirectiveTriviaFunc20;
        private static readonly VisitParenthesizedPatternDelegate21 VisitParenthesizedPatternFunc21;
        private static readonly VisitPositionalPatternClauseDelegate22 VisitPositionalPatternClauseFunc22;
        private static readonly VisitPrimaryConstructorBaseTypeDelegate23 VisitPrimaryConstructorBaseTypeFunc23;
        private static readonly VisitPropertyPatternClauseDelegate24 VisitPropertyPatternClauseFunc24;
        private static readonly VisitRangeExpressionDelegate25 VisitRangeExpressionFunc25;
        private static readonly VisitRecordDeclarationDelegate26 VisitRecordDeclarationFunc26;
        private static readonly VisitRecursivePatternDelegate27 VisitRecursivePatternFunc27;
        private static readonly VisitRefStructConstraintDelegate28 VisitRefStructConstraintFunc28;
        private static readonly VisitRelationalPatternDelegate29 VisitRelationalPatternFunc29;
        private static readonly VisitScopedTypeDelegate30 VisitScopedTypeFunc30;
        private static readonly VisitSlicePatternDelegate31 VisitSlicePatternFunc31;
        private static readonly VisitSpreadElementDelegate32 VisitSpreadElementFunc32;
        private static readonly VisitSubpatternDelegate33 VisitSubpatternFunc33;
        private static readonly VisitSwitchExpressionDelegate34 VisitSwitchExpressionFunc34;
        private static readonly VisitSwitchExpressionArmDelegate35 VisitSwitchExpressionArmFunc35;
        private static readonly VisitTypePatternDelegate36 VisitTypePatternFunc36;
        private static readonly VisitUnaryPatternDelegate37 VisitUnaryPatternFunc37;
        private static readonly VisitVarPatternDelegate38 VisitVarPatternFunc38;
        private static readonly VisitWithExpressionDelegate39 VisitWithExpressionFunc39;

        static CSharpSyntaxVisitorEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            VisitAllowsConstraintClauseFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitAllowsConstraintClauseDelegate0>(wrappedType, "VisitAllowsConstraintClause", "nodeAllowsConstraintClauseSyntax");
            VisitBinaryPatternFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitBinaryPatternDelegate1>(wrappedType, "VisitBinaryPattern", "nodeBinaryPatternSyntax");
            VisitCollectionExpressionFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitCollectionExpressionDelegate2>(wrappedType, "VisitCollectionExpression", "nodeCollectionExpressionSyntax");
            VisitDefaultConstraintFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitDefaultConstraintDelegate3>(wrappedType, "VisitDefaultConstraint", "nodeDefaultConstraintSyntax");
            VisitDiscardPatternFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitDiscardPatternDelegate4>(wrappedType, "VisitDiscardPattern", "nodeDiscardPatternSyntax");
            VisitExpressionColonFunc5 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitExpressionColonDelegate5>(wrappedType, "VisitExpressionColon", "nodeExpressionColonSyntax");
            VisitExpressionElementFunc6 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitExpressionElementDelegate6>(wrappedType, "VisitExpressionElement", "nodeExpressionElementSyntax");
            VisitFieldExpressionFunc7 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFieldExpressionDelegate7>(wrappedType, "VisitFieldExpression", "nodeFieldExpressionSyntax");
            VisitFileScopedNamespaceDeclarationFunc8 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFileScopedNamespaceDeclarationDelegate8>(wrappedType, "VisitFileScopedNamespaceDeclaration", "nodeFileScopedNamespaceDeclarationSyntax");
            VisitFunctionPointerCallingConventionFunc9 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerCallingConventionDelegate9>(wrappedType, "VisitFunctionPointerCallingConvention", "nodeFunctionPointerCallingConventionSyntax");
            VisitFunctionPointerParameterFunc10 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerParameterDelegate10>(wrappedType, "VisitFunctionPointerParameter", "nodeFunctionPointerParameterSyntax");
            VisitFunctionPointerParameterListFunc11 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerParameterListDelegate11>(wrappedType, "VisitFunctionPointerParameterList", "nodeFunctionPointerParameterListSyntax");
            VisitFunctionPointerTypeFunc12 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerTypeDelegate12>(wrappedType, "VisitFunctionPointerType", "nodeFunctionPointerTypeSyntax");
            VisitFunctionPointerUnmanagedCallingConventionFunc13 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerUnmanagedCallingConventionDelegate13>(wrappedType, "VisitFunctionPointerUnmanagedCallingConvention", "nodeFunctionPointerUnmanagedCallingConventionSyntax");
            VisitFunctionPointerUnmanagedCallingConventionListFunc14 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitFunctionPointerUnmanagedCallingConventionListDelegate14>(wrappedType, "VisitFunctionPointerUnmanagedCallingConventionList", "nodeFunctionPointerUnmanagedCallingConventionListSyntax");
            VisitImplicitObjectCreationExpressionFunc15 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitImplicitObjectCreationExpressionDelegate15>(wrappedType, "VisitImplicitObjectCreationExpression", "nodeImplicitObjectCreationExpressionSyntax");
            VisitImplicitStackAllocArrayCreationExpressionFunc16 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitImplicitStackAllocArrayCreationExpressionDelegate16>(wrappedType, "VisitImplicitStackAllocArrayCreationExpression", "nodeImplicitStackAllocArrayCreationExpressionSyntax");
            VisitLineDirectivePositionFunc17 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitLineDirectivePositionDelegate17>(wrappedType, "VisitLineDirectivePosition", "nodeLineDirectivePositionSyntax");
            VisitLineSpanDirectiveTriviaFunc18 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitLineSpanDirectiveTriviaDelegate18>(wrappedType, "VisitLineSpanDirectiveTrivia", "nodeLineSpanDirectiveTriviaSyntax");
            VisitListPatternFunc19 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitListPatternDelegate19>(wrappedType, "VisitListPattern", "nodeListPatternSyntax");
            VisitNullableDirectiveTriviaFunc20 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitNullableDirectiveTriviaDelegate20>(wrappedType, "VisitNullableDirectiveTrivia", "nodeNullableDirectiveTriviaSyntax");
            VisitParenthesizedPatternFunc21 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitParenthesizedPatternDelegate21>(wrappedType, "VisitParenthesizedPattern", "nodeParenthesizedPatternSyntax");
            VisitPositionalPatternClauseFunc22 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitPositionalPatternClauseDelegate22>(wrappedType, "VisitPositionalPatternClause", "nodePositionalPatternClauseSyntax");
            VisitPrimaryConstructorBaseTypeFunc23 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitPrimaryConstructorBaseTypeDelegate23>(wrappedType, "VisitPrimaryConstructorBaseType", "nodePrimaryConstructorBaseTypeSyntax");
            VisitPropertyPatternClauseFunc24 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitPropertyPatternClauseDelegate24>(wrappedType, "VisitPropertyPatternClause", "nodePropertyPatternClauseSyntax");
            VisitRangeExpressionFunc25 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRangeExpressionDelegate25>(wrappedType, "VisitRangeExpression", "nodeRangeExpressionSyntax");
            VisitRecordDeclarationFunc26 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRecordDeclarationDelegate26>(wrappedType, "VisitRecordDeclaration", "nodeRecordDeclarationSyntax");
            VisitRecursivePatternFunc27 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRecursivePatternDelegate27>(wrappedType, "VisitRecursivePattern", "nodeRecursivePatternSyntax");
            VisitRefStructConstraintFunc28 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRefStructConstraintDelegate28>(wrappedType, "VisitRefStructConstraint", "nodeRefStructConstraintSyntax");
            VisitRelationalPatternFunc29 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitRelationalPatternDelegate29>(wrappedType, "VisitRelationalPattern", "nodeRelationalPatternSyntax");
            VisitScopedTypeFunc30 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitScopedTypeDelegate30>(wrappedType, "VisitScopedType", "nodeScopedTypeSyntax");
            VisitSlicePatternFunc31 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSlicePatternDelegate31>(wrappedType, "VisitSlicePattern", "nodeSlicePatternSyntax");
            VisitSpreadElementFunc32 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSpreadElementDelegate32>(wrappedType, "VisitSpreadElement", "nodeSpreadElementSyntax");
            VisitSubpatternFunc33 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSubpatternDelegate33>(wrappedType, "VisitSubpattern", "nodeSubpatternSyntax");
            VisitSwitchExpressionFunc34 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSwitchExpressionDelegate34>(wrappedType, "VisitSwitchExpression", "nodeSwitchExpressionSyntax");
            VisitSwitchExpressionArmFunc35 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitSwitchExpressionArmDelegate35>(wrappedType, "VisitSwitchExpressionArm", "nodeSwitchExpressionArmSyntax");
            VisitTypePatternFunc36 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitTypePatternDelegate36>(wrappedType, "VisitTypePattern", "nodeTypePatternSyntax");
            VisitUnaryPatternFunc37 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitUnaryPatternDelegate37>(wrappedType, "VisitUnaryPattern", "nodeUnaryPatternSyntax");
            VisitVarPatternFunc38 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitVarPatternDelegate38>(wrappedType, "VisitVarPattern", "nodeVarPatternSyntax");
            VisitWithExpressionFunc39 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<VisitWithExpressionDelegate39>(wrappedType, "VisitWithExpression", "nodeWithExpressionSyntax");
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public static void VisitAllowsConstraintClause(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.AllowsConstraintClauseSyntaxWrapper node)
        {
            VisitAllowsConstraintClauseFunc0(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitBinaryPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.BinaryPatternSyntaxWrapper node)
        {
            VisitBinaryPatternFunc1(_obj, node);
        }

        /// <summary>Method added in version 4.7.0.0.</summary>
        public static void VisitCollectionExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.CollectionExpressionSyntaxWrapper node)
        {
            VisitCollectionExpressionFunc2(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitDefaultConstraint(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DefaultConstraintSyntaxWrapper node)
        {
            VisitDefaultConstraintFunc3(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitDiscardPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.DiscardPatternSyntaxWrapper node)
        {
            VisitDiscardPatternFunc4(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static void VisitExpressionColon(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionColonSyntaxWrapper node)
        {
            VisitExpressionColonFunc5(_obj, node);
        }

        /// <summary>Method added in version 4.7.0.0.</summary>
        public static void VisitExpressionElement(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ExpressionElementSyntaxWrapper node)
        {
            VisitExpressionElementFunc6(_obj, node);
        }

        /// <summary>Method added in version 4.12.0.0.</summary>
        public static void VisitFieldExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FieldExpressionSyntaxWrapper node)
        {
            VisitFieldExpressionFunc7(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static void VisitFileScopedNamespaceDeclaration(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FileScopedNamespaceDeclarationSyntaxWrapper node)
        {
            VisitFileScopedNamespaceDeclarationFunc8(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerCallingConvention(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerCallingConventionSyntaxWrapper node)
        {
            VisitFunctionPointerCallingConventionFunc9(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerParameter(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterSyntaxWrapper node)
        {
            VisitFunctionPointerParameterFunc10(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerParameterList(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerParameterListSyntaxWrapper node)
        {
            VisitFunctionPointerParameterListFunc11(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitFunctionPointerType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerTypeSyntaxWrapper node)
        {
            VisitFunctionPointerTypeFunc12(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerUnmanagedCallingConvention(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionSyntaxWrapper node)
        {
            VisitFunctionPointerUnmanagedCallingConventionFunc13(_obj, node);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public static void VisitFunctionPointerUnmanagedCallingConventionList(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.FunctionPointerUnmanagedCallingConventionListSyntaxWrapper node)
        {
            VisitFunctionPointerUnmanagedCallingConventionListFunc14(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitImplicitObjectCreationExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitObjectCreationExpressionSyntaxWrapper node)
        {
            VisitImplicitObjectCreationExpressionFunc15(_obj, node);
        }

        /// <summary>Method added in version 2.8.0.0.</summary>
        public static void VisitImplicitStackAllocArrayCreationExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ImplicitStackAllocArrayCreationExpressionSyntaxWrapper node)
        {
            VisitImplicitStackAllocArrayCreationExpressionFunc16(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static void VisitLineDirectivePosition(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineDirectivePositionSyntaxWrapper node)
        {
            VisitLineDirectivePositionFunc17(_obj, node);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static void VisitLineSpanDirectiveTrivia(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.LineSpanDirectiveTriviaSyntaxWrapper node)
        {
            VisitLineSpanDirectiveTriviaFunc18(_obj, node);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static void VisitListPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ListPatternSyntaxWrapper node)
        {
            VisitListPatternFunc19(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitNullableDirectiveTrivia(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.NullableDirectiveTriviaSyntaxWrapper node)
        {
            VisitNullableDirectiveTriviaFunc20(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitParenthesizedPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ParenthesizedPatternSyntaxWrapper node)
        {
            VisitParenthesizedPatternFunc21(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitPositionalPatternClause(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PositionalPatternClauseSyntaxWrapper node)
        {
            VisitPositionalPatternClauseFunc22(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitPrimaryConstructorBaseType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PrimaryConstructorBaseTypeSyntaxWrapper node)
        {
            VisitPrimaryConstructorBaseTypeFunc23(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitPropertyPatternClause(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.PropertyPatternClauseSyntaxWrapper node)
        {
            VisitPropertyPatternClauseFunc24(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitRangeExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RangeExpressionSyntaxWrapper node)
        {
            VisitRangeExpressionFunc25(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitRecordDeclaration(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecordDeclarationSyntaxWrapper node)
        {
            VisitRecordDeclarationFunc26(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitRecursivePattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RecursivePatternSyntaxWrapper node)
        {
            VisitRecursivePatternFunc27(_obj, node);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public static void VisitRefStructConstraint(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RefStructConstraintSyntaxWrapper node)
        {
            VisitRefStructConstraintFunc28(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitRelationalPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.RelationalPatternSyntaxWrapper node)
        {
            VisitRelationalPatternFunc29(_obj, node);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public static void VisitScopedType(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.ScopedTypeSyntaxWrapper node)
        {
            VisitScopedTypeFunc30(_obj, node);
        }

        /// <summary>Method added in version 4.1.0.0.</summary>
        public static void VisitSlicePattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SlicePatternSyntaxWrapper node)
        {
            VisitSlicePatternFunc31(_obj, node);
        }

        /// <summary>Method added in version 4.7.0.0.</summary>
        public static void VisitSpreadElement(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SpreadElementSyntaxWrapper node)
        {
            VisitSpreadElementFunc32(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitSubpattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SubpatternSyntaxWrapper node)
        {
            VisitSubpatternFunc33(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitSwitchExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SwitchExpressionSyntaxWrapper node)
        {
            VisitSwitchExpressionFunc34(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitSwitchExpressionArm(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.SwitchExpressionArmSyntaxWrapper node)
        {
            VisitSwitchExpressionArmFunc35(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitTypePattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.TypePatternSyntaxWrapper node)
        {
            VisitTypePatternFunc36(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitUnaryPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.UnaryPatternSyntaxWrapper node)
        {
            VisitUnaryPatternFunc37(_obj, node);
        }

        /// <summary>Method added in version 3.0.0.0.</summary>
        public static void VisitVarPattern(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.VarPatternSyntaxWrapper node)
        {
            VisitVarPatternFunc38(_obj, node);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public static void VisitWithExpression(this global::Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor _obj, global::Microsoft.CodeAnalysis.CSharp.Syntax.Lightup.WithExpressionSyntaxWrapper node)
        {
            VisitWithExpressionFunc39(_obj, node);
        }
    }
}
