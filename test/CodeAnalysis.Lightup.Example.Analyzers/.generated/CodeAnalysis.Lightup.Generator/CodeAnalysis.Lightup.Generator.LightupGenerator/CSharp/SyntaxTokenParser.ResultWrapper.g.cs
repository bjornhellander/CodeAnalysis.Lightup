// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
public partial struct SyntaxTokenParserWrapper {
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser+Result. Added in version 4.10.0.0.</summary>
    public partial struct ResultWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser+Result";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.CSharp.SyntaxKind ContextualKindGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.SyntaxToken TokenGetterDelegate(global::System.Object _obj);

        private static readonly ContextualKindGetterDelegate ContextualKindGetterFunc;
        private static readonly TokenGetterDelegate TokenGetterFunc;

        private readonly global::System.Object wrappedObject;

        static ResultWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            ContextualKindGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<ContextualKindGetterDelegate>(WrappedType, nameof(ContextualKind));
            TokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<TokenGetterDelegate>(WrappedType, nameof(Token));
        }

        private ResultWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.10.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.SyntaxKind ContextualKind
        {
            get { return ContextualKindGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.10.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxToken Token
        {
            get { return TokenGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static ResultWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new ResultWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
}
