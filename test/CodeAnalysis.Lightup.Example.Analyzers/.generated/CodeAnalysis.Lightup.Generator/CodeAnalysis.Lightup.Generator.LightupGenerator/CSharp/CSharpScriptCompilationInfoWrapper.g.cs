// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo. Added in version 1.1.0.0.</summary>
    public partial struct CSharpScriptCompilationInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation? PreviousScriptCompilationGetterDelegate(global::System.Object _obj);

        private delegate global::Microsoft.CodeAnalysis.CSharp.Lightup.CSharpScriptCompilationInfoWrapper WithPreviousScriptCompilationDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation? compilation);

        private static readonly PreviousScriptCompilationGetterDelegate PreviousScriptCompilationGetterFunc;

        private static readonly WithPreviousScriptCompilationDelegate0 WithPreviousScriptCompilationFunc0;

        private readonly global::System.Object wrappedObject;

        static CSharpScriptCompilationInfoWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            PreviousScriptCompilationGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceGetAccessor<PreviousScriptCompilationGetterDelegate>(WrappedType, nameof(PreviousScriptCompilation));

            WithPreviousScriptCompilationFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<WithPreviousScriptCompilationDelegate0>(WrappedType, "WithPreviousScriptCompilation", "compilationCSharpCompilation");
        }

        private CSharpScriptCompilationInfoWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation? PreviousScriptCompilation
        {
            get { return PreviousScriptCompilationGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static CSharpScriptCompilationInfoWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new CSharpScriptCompilationInfoWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 1.1.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Lightup.CSharpScriptCompilationInfoWrapper WithPreviousScriptCompilation(global::Microsoft.CodeAnalysis.CSharp.CSharpCompilation? compilation)
        {
            return WithPreviousScriptCompilationFunc0(wrappedObject, compilation);
        }
    }
}
