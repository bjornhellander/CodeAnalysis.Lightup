// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CSharp.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser. Added in version 4.10.0.0.</summary>
    public partial struct SyntaxTokenParserWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate void DisposeDelegate0(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseLeadingTriviaDelegate1(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseNextTokenDelegate2(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseTrailingTriviaDelegate3(global::System.Object _obj);
        private delegate void ResetToDelegate4(global::System.Object _obj, global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper result);
        private delegate void SkipForwardToDelegate5(global::System.Object _obj, global::System.Int32 position);

        private static readonly DisposeDelegate0 DisposeFunc0;
        private static readonly ParseLeadingTriviaDelegate1 ParseLeadingTriviaFunc1;
        private static readonly ParseNextTokenDelegate2 ParseNextTokenFunc2;
        private static readonly ParseTrailingTriviaDelegate3 ParseTrailingTriviaFunc3;
        private static readonly ResetToDelegate4 ResetToFunc4;
        private static readonly SkipForwardToDelegate5 SkipForwardToFunc5;

        private readonly global::System.Object wrappedObject;

        static SyntaxTokenParserWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.FindType(WrappedTypeName);

            DisposeFunc0 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<DisposeDelegate0>(WrappedType, "Dispose");
            ParseLeadingTriviaFunc1 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ParseLeadingTriviaDelegate1>(WrappedType, "ParseLeadingTrivia");
            ParseNextTokenFunc2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ParseNextTokenDelegate2>(WrappedType, "ParseNextToken");
            ParseTrailingTriviaFunc3 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ParseTrailingTriviaDelegate3>(WrappedType, "ParseTrailingTrivia");
            ResetToFunc4 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<ResetToDelegate4>(WrappedType, "ResetTo", "resultResult");
            SkipForwardToFunc5 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.CreateInstanceMethodAccessor<SkipForwardToDelegate5>(WrappedType, "SkipForwardTo", "positionInt32");
        }

        private SyntaxTokenParserWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static SyntaxTokenParserWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CSharpLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new SyntaxTokenParserWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public void Dispose()
        {
            DisposeFunc0(wrappedObject);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseLeadingTrivia()
        {
            return ParseLeadingTriviaFunc1(wrappedObject);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseNextToken()
        {
            return ParseNextTokenFunc2(wrappedObject);
        }

        /// <summary>Method added in version 4.11.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper ParseTrailingTrivia()
        {
            return ParseTrailingTriviaFunc3(wrappedObject);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public void ResetTo(global::Microsoft.CodeAnalysis.CSharp.Lightup.SyntaxTokenParserWrapper.ResultWrapper result)
        {
            ResetToFunc4(wrappedObject, result);
        }

        /// <summary>Method added in version 4.10.0.0.</summary>
        public void SkipForwardTo(global::System.Int32 position)
        {
            SkipForwardToFunc5(wrappedObject, position);
        }
    }
}
