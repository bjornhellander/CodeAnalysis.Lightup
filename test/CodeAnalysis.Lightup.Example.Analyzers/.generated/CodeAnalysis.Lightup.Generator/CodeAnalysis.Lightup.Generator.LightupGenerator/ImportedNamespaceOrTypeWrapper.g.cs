// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.ImportedNamespaceOrType. Added in version 4.3.0.0.</summary>
    public partial struct ImportedNamespaceOrTypeWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.ImportedNamespaceOrType";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReferenceGetterDelegate(global::System.Object? _obj);
        private delegate global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol NamespaceOrTypeGetterDelegate(global::System.Object? _obj);

        private static readonly DeclaringSyntaxReferenceGetterDelegate DeclaringSyntaxReferenceGetterFunc;
        private static readonly NamespaceOrTypeGetterDelegate NamespaceOrTypeGetterFunc;

        private readonly global::System.Object? wrappedObject;

        static ImportedNamespaceOrTypeWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            DeclaringSyntaxReferenceGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<DeclaringSyntaxReferenceGetterDelegate>(WrappedType, nameof(DeclaringSyntaxReference));
            NamespaceOrTypeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<NamespaceOrTypeGetterDelegate>(WrappedType, nameof(NamespaceOrType));
        }

        private ImportedNamespaceOrTypeWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::Microsoft.CodeAnalysis.SyntaxReference? DeclaringSyntaxReference
        {
            get { return DeclaringSyntaxReferenceGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 4.3.0.0.</summary>
        public global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol NamespaceOrType
        {
            get { return NamespaceOrTypeGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static ImportedNamespaceOrTypeWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new ImportedNamespaceOrTypeWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }
    }
}
