// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CommandLineResource. Added in version 5.0.0.0.</summary>
    public partial struct CommandLineResourceWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CommandLineResource";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.String FullPathGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsEmbeddedGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsLinkedGetterDelegate(global::System.Object _obj);
        private delegate global::System.Boolean IsPublicGetterDelegate(global::System.Object _obj);
        private delegate global::System.String? LinkedResourceFileNameGetterDelegate(global::System.Object _obj);
        private delegate global::System.String ResourceNameGetterDelegate(global::System.Object _obj);

        private static readonly FullPathGetterDelegate FullPathGetterFunc;
        private static readonly IsEmbeddedGetterDelegate IsEmbeddedGetterFunc;
        private static readonly IsLinkedGetterDelegate IsLinkedGetterFunc;
        private static readonly IsPublicGetterDelegate IsPublicGetterFunc;
        private static readonly LinkedResourceFileNameGetterDelegate LinkedResourceFileNameGetterFunc;
        private static readonly ResourceNameGetterDelegate ResourceNameGetterFunc;

        private readonly global::System.Object wrappedObject;

        static CommandLineResourceWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            FullPathGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<FullPathGetterDelegate>(WrappedType, nameof(FullPath));
            IsEmbeddedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsEmbeddedGetterDelegate>(WrappedType, nameof(IsEmbedded));
            IsLinkedGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsLinkedGetterDelegate>(WrappedType, nameof(IsLinked));
            IsPublicGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<IsPublicGetterDelegate>(WrappedType, nameof(IsPublic));
            LinkedResourceFileNameGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LinkedResourceFileNameGetterDelegate>(WrappedType, nameof(LinkedResourceFileName));
            ResourceNameGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<ResourceNameGetterDelegate>(WrappedType, nameof(ResourceName));
        }

        private CommandLineResourceWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.String FullPath
        {
            get { return FullPathGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Boolean IsEmbedded
        {
            get { return IsEmbeddedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Boolean IsLinked
        {
            get { return IsLinkedGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Boolean IsPublic
        {
            get { return IsPublicGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.String? LinkedResourceFileName
        {
            get { return LinkedResourceFileNameGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.String ResourceName
        {
            get { return ResourceNameGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static CommandLineResourceWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new CommandLineResourceWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
