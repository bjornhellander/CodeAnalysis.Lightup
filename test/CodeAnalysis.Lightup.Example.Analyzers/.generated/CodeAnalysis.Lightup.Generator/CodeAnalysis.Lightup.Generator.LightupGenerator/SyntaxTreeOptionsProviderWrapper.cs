// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider. Added in version 3.8.0.0.</summary>
    public partial struct SyntaxTreeOptionsProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.Lightup.GeneratedKindEx IsGeneratedDelegate0(global::System.Object? _obj, global::Microsoft.CodeAnalysis.SyntaxTree tree, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Boolean TryGetDiagnosticValueDelegate1(global::System.Object? _obj, global::Microsoft.CodeAnalysis.SyntaxTree tree, global::System.String diagnosticId, global::System.Threading.CancellationToken cancellationToken, out global::Microsoft.CodeAnalysis.ReportDiagnostic severity);
        private delegate global::System.Boolean TryGetGlobalDiagnosticValueDelegate2(global::System.Object? _obj, global::System.String diagnosticId, global::System.Threading.CancellationToken cancellationToken, out global::Microsoft.CodeAnalysis.ReportDiagnostic severity);

        private static readonly IsGeneratedDelegate0 IsGeneratedFunc0;
        private static readonly TryGetDiagnosticValueDelegate1 TryGetDiagnosticValueFunc1;
        private static readonly TryGetGlobalDiagnosticValueDelegate2 TryGetGlobalDiagnosticValueFunc2;

        private readonly global::System.Object? wrappedObject;

        static SyntaxTreeOptionsProviderWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            IsGeneratedFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<IsGeneratedDelegate0>(WrappedType, "IsGenerated", "treeSyntaxTree", "cancellationTokenCancellationToken");
            TryGetDiagnosticValueFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<TryGetDiagnosticValueDelegate1>(WrappedType, "TryGetDiagnosticValue", "treeSyntaxTree", "diagnosticIdString", "cancellationTokenCancellationToken", "severityReportDiagnostic&");
            TryGetGlobalDiagnosticValueFunc2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceMethodAccessor<TryGetGlobalDiagnosticValueDelegate2>(WrappedType, "TryGetGlobalDiagnosticValue", "diagnosticIdString", "cancellationTokenCancellationToken", "severityReportDiagnostic&");
        }

        private SyntaxTreeOptionsProviderWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static SyntaxTreeOptionsProviderWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new SyntaxTreeOptionsProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.GeneratedKindEx IsGenerated(global::Microsoft.CodeAnalysis.SyntaxTree tree, global::System.Threading.CancellationToken cancellationToken)
        {
            return IsGeneratedFunc0(wrappedObject, tree, cancellationToken);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::System.Boolean TryGetDiagnosticValue(global::Microsoft.CodeAnalysis.SyntaxTree tree, global::System.String diagnosticId, global::System.Threading.CancellationToken cancellationToken, out global::Microsoft.CodeAnalysis.ReportDiagnostic severity)
        {
            return TryGetDiagnosticValueFunc1(wrappedObject, tree, diagnosticId, cancellationToken, out severity);
        }

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::System.Boolean TryGetGlobalDiagnosticValue(global::System.String diagnosticId, global::System.Threading.CancellationToken cancellationToken, out global::Microsoft.CodeAnalysis.ReportDiagnostic severity)
        {
            return TryGetGlobalDiagnosticValueFunc2(wrappedObject, diagnosticId, cancellationToken, out severity);
        }
    }
}
