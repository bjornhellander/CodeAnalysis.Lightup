// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CaseInsensitiveComparison.</summary>
    public static partial class CaseInsensitiveComparisonEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CaseInsensitiveComparison";

        private delegate global::System.Int32 CompareDelegate0(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right);
        private delegate global::System.Boolean EqualsDelegate1(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right);

        private static readonly CompareDelegate0 CompareFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        static CaseInsensitiveComparisonEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            CompareFunc0 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<CompareDelegate0>(wrappedType, "Compare", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
            EqualsFunc1 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateStaticMethodAccessor<EqualsDelegate1>(wrappedType, "Equals", "leftReadOnlySpan`1", "rightReadOnlySpan`1");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::System.Int32 Compare(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right)
        {
            return CompareFunc0(left, right);
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::System.Boolean Equals(global::System.ReadOnlySpan<global::System.Char> left, global::System.ReadOnlySpan<global::System.Char> right)
        {
            return EqualsFunc1(left, right);
        }
    }
}
