// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CodeRefactorings.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CodeRefactorings.RefactorAllContext. Added in version 5.0.0.0.</summary>
    public partial struct RefactorAllContextWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeRefactorings.RefactorAllContext";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.Threading.CancellationToken CancellationTokenGetterDelegate(global::System.Object _obj);
        private delegate global::System.String? CodeActionEquivalenceKeyGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider CodeRefactoringProviderGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Document DocumentGetterDelegate(global::System.Object _obj);
        private delegate global::System.IProgress<global::Microsoft.CodeAnalysis.Lightup.CodeAnalysisProgressWrapper> ProgressGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Project ProjectGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx ScopeGetterDelegate(global::System.Object _obj);
        private delegate global::Microsoft.CodeAnalysis.Solution SolutionGetterDelegate(global::System.Object _obj);

        private delegate global::System.Threading.Tasks.Task<global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>>> GetRefactorAllSpansAsyncDelegate0(global::System.Object _obj, global::System.Threading.CancellationToken cancellationToken);

        private static readonly CancellationTokenGetterDelegate CancellationTokenGetterFunc;
        private static readonly CodeActionEquivalenceKeyGetterDelegate CodeActionEquivalenceKeyGetterFunc;
        private static readonly CodeRefactoringProviderGetterDelegate CodeRefactoringProviderGetterFunc;
        private static readonly DocumentGetterDelegate DocumentGetterFunc;
        private static readonly ProgressGetterDelegate ProgressGetterFunc;
        private static readonly ProjectGetterDelegate ProjectGetterFunc;
        private static readonly ScopeGetterDelegate ScopeGetterFunc;
        private static readonly SolutionGetterDelegate SolutionGetterFunc;

        private static readonly GetRefactorAllSpansAsyncDelegate0 GetRefactorAllSpansAsyncFunc0;

        private readonly global::System.Object wrappedObject;

        static RefactorAllContextWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            CancellationTokenGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<CancellationTokenGetterDelegate>(WrappedType, nameof(CancellationToken));
            CodeActionEquivalenceKeyGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<CodeActionEquivalenceKeyGetterDelegate>(WrappedType, nameof(CodeActionEquivalenceKey));
            CodeRefactoringProviderGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<CodeRefactoringProviderGetterDelegate>(WrappedType, nameof(CodeRefactoringProvider));
            DocumentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<DocumentGetterDelegate>(WrappedType, nameof(Document));
            ProgressGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ProgressGetterDelegate>(WrappedType, nameof(Progress));
            ProjectGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ProjectGetterDelegate>(WrappedType, nameof(Project));
            ScopeGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ScopeGetterDelegate>(WrappedType, nameof(Scope));
            SolutionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SolutionGetterDelegate>(WrappedType, nameof(Solution));

            GetRefactorAllSpansAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetRefactorAllSpansAsyncDelegate0>(WrappedType, "GetRefactorAllSpansAsync", "cancellationTokenCancellationToken");
        }

        private RefactorAllContextWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Threading.CancellationToken CancellationToken
        {
            get { return CancellationTokenGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.String? CodeActionEquivalenceKey
        {
            get { return CodeActionEquivalenceKeyGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider CodeRefactoringProvider
        {
            get { return CodeRefactoringProviderGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Document Document
        {
            get { return DocumentGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.IProgress<global::Microsoft.CodeAnalysis.Lightup.CodeAnalysisProgressWrapper> Progress
        {
            get { return ProgressGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Project Project
        {
            get { return ProjectGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx Scope
        {
            get { return ScopeGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Solution Solution
        {
            get { return SolutionGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static RefactorAllContextWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new RefactorAllContextWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::System.Collections.Immutable.ImmutableDictionary<global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>>> GetRefactorAllSpansAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return GetRefactorAllSpansAsyncFunc0(wrappedObject, cancellationToken);
        }
    }
}
