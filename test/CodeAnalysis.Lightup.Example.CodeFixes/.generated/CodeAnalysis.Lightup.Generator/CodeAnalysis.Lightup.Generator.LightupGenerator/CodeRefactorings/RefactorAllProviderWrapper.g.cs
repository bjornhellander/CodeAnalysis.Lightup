// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CodeRefactorings.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CodeRefactorings.RefactorAllProvider. Added in version 5.0.0.0.</summary>
    public partial struct RefactorAllProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeRefactorings.RefactorAllProvider";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllProviderWrapper CreateDelegate0(global::System.Func<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper, global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>, global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Document>> refactorAllAsync);
        private delegate global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllProviderWrapper CreateDelegate1(global::System.Func<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper, global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>, global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Document>> refactorAllAsync, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx> supportedRefactorAllScopes);

        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.CodeActions.CodeAction> GetRefactoringAsyncDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper refactorAllContext);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx> GetSupportedRefactorAllScopesDelegate0(global::System.Object _obj);

        private static readonly CreateDelegate0 CreateFunc0;
        private static readonly CreateDelegate1 CreateFunc1;

        private static readonly GetRefactoringAsyncDelegate0 GetRefactoringAsyncFunc0;
        private static readonly GetSupportedRefactorAllScopesDelegate0 GetSupportedRefactorAllScopesFunc0;

        private readonly global::System.Object wrappedObject;

        static RefactorAllProviderWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            CreateFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<CreateDelegate0>(WrappedType, "Create", "refactorAllAsyncFunc`4");
            CreateFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<CreateDelegate1>(WrappedType, "Create", "refactorAllAsyncFunc`4", "supportedRefactorAllScopesImmutableArray`1");

            GetRefactoringAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetRefactoringAsyncDelegate0>(WrappedType, "GetRefactoringAsync", "refactorAllContextRefactorAllContext");
            GetSupportedRefactorAllScopesFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetSupportedRefactorAllScopesDelegate0>(WrappedType, "GetSupportedRefactorAllScopes");
        }

        private RefactorAllProviderWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static RefactorAllProviderWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new RefactorAllProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllProviderWrapper Create(global::System.Func<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper, global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>, global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Document>> refactorAllAsync)
        {
            return CreateFunc0(refactorAllAsync);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllProviderWrapper Create(global::System.Func<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper, global::Microsoft.CodeAnalysis.Document, global::Microsoft.CodeAnalysis.Optional<global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Text.TextSpan>>, global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Document>> refactorAllAsync, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx> supportedRefactorAllScopes)
        {
            return CreateFunc1(refactorAllAsync, supportedRefactorAllScopes);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.CodeActions.CodeAction> GetRefactoringAsync(global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllContextWrapper refactorAllContext)
        {
            return GetRefactoringAsyncFunc0(wrappedObject, refactorAllContext);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.CodeRefactorings.Lightup.RefactorAllScopeEx> GetSupportedRefactorAllScopes()
        {
            return GetSupportedRefactorAllScopesFunc0(wrappedObject);
        }
    }
}
