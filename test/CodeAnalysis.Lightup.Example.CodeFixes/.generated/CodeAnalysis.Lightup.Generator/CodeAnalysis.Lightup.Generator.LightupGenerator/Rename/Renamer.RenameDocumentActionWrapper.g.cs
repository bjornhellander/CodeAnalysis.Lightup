// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
public partial class RenamerEx {
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentAction. Added in version 3.7.0.0.</summary>
    public partial struct RenameDocumentActionWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentAction";

        private static readonly global::System.Type? WrappedType;

        private delegate global::System.String GetDescriptionDelegate0(global::System.Object _obj, global::System.Globalization.CultureInfo? culture);
        private delegate global::System.Collections.Immutable.ImmutableArray<global::System.String> GetErrorsDelegate0(global::System.Object _obj, global::System.Globalization.CultureInfo? culture);

        private static readonly GetDescriptionDelegate0 GetDescriptionFunc0;
        private static readonly GetErrorsDelegate0 GetErrorsFunc0;

        private readonly global::System.Object wrappedObject;

        static RenameDocumentActionWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetDescriptionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetDescriptionDelegate0>(WrappedType, "GetDescription", "cultureCultureInfo");
            GetErrorsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetErrorsDelegate0>(WrappedType, "GetErrors", "cultureCultureInfo");
        }

        private RenameDocumentActionWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static RenameDocumentActionWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new RenameDocumentActionWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public global::System.String GetDescription(global::System.Globalization.CultureInfo? culture)
        {
            return GetDescriptionFunc0(wrappedObject, culture);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::System.String> GetErrors(global::System.Globalization.CultureInfo? culture)
        {
            return GetErrorsFunc0(wrappedObject, culture);
        }
    }
}
}
