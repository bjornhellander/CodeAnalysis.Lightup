// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.Rename.DocumentRenameOptions. Added in version 4.4.0.0.</summary>
    public partial struct DocumentRenameOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.DocumentRenameOptions";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate DocumentRenameOptionsWrapper ConstructorDelegate0(global::System.Boolean RenameMatchingTypeInStrings, global::System.Boolean RenameMatchingTypeInComments);

        private delegate global::System.Boolean RenameMatchingTypeInCommentsGetterDelegate(global::System.Object? _obj);
        private delegate void RenameMatchingTypeInCommentsSetterDelegate(System.Object? _obj, global::System.Boolean _value);
        private delegate global::System.Boolean RenameMatchingTypeInStringsGetterDelegate(global::System.Object? _obj);
        private delegate void RenameMatchingTypeInStringsSetterDelegate(System.Object? _obj, global::System.Boolean _value);

        private delegate void DeconstructDelegate0(global::System.Object? _obj, out global::System.Boolean RenameMatchingTypeInStrings, out global::System.Boolean RenameMatchingTypeInComments);
        private delegate global::System.Boolean EqualsDelegate1(global::System.Object? _obj, global::Microsoft.CodeAnalysis.Rename.Lightup.DocumentRenameOptionsWrapper other);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly RenameMatchingTypeInCommentsGetterDelegate RenameMatchingTypeInCommentsGetterFunc;
        private static readonly RenameMatchingTypeInCommentsSetterDelegate RenameMatchingTypeInCommentsSetterFunc;
        private static readonly RenameMatchingTypeInStringsGetterDelegate RenameMatchingTypeInStringsGetterFunc;
        private static readonly RenameMatchingTypeInStringsSetterDelegate RenameMatchingTypeInStringsSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate1 EqualsFunc1;

        private readonly global::System.Object? wrappedObject;

        static DocumentRenameOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "RenameMatchingTypeInStringsBoolean", "RenameMatchingTypeInCommentsBoolean");

            RenameMatchingTypeInCommentsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInCommentsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInCommentsSetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInCommentsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInComments));
            RenameMatchingTypeInStringsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RenameMatchingTypeInStringsGetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));
            RenameMatchingTypeInStringsSetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RenameMatchingTypeInStringsSetterDelegate>(WrappedType, nameof(RenameMatchingTypeInStrings));

            DeconstructFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RenameMatchingTypeInStringsBoolean&", "RenameMatchingTypeInCommentsBoolean&");
            EqualsFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate1>(WrappedType, "Equals", "otherDocumentRenameOptions");
        }

        private DocumentRenameOptionsWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 4.4.0.0.</summary>
        public static DocumentRenameOptionsWrapper Create(global::System.Boolean RenameMatchingTypeInStrings, global::System.Boolean RenameMatchingTypeInComments)
        {
            return ConstructorFunc0(RenameMatchingTypeInStrings, RenameMatchingTypeInComments);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public global::System.Boolean RenameMatchingTypeInComments
        {
            get { return RenameMatchingTypeInCommentsGetterFunc(wrappedObject); }
            set { RenameMatchingTypeInCommentsSetterFunc(wrappedObject, value); }
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public global::System.Boolean RenameMatchingTypeInStrings
        {
            get { return RenameMatchingTypeInStringsGetterFunc(wrappedObject); }
            set { RenameMatchingTypeInStringsSetterFunc(wrappedObject, value); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static DocumentRenameOptionsWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new DocumentRenameOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public void Deconstruct(out global::System.Boolean RenameMatchingTypeInStrings, out global::System.Boolean RenameMatchingTypeInComments)
        {
            DeconstructFunc0(wrappedObject, out RenameMatchingTypeInStrings, out RenameMatchingTypeInComments);
        }

        /// <summary>Method added in version 4.4.0.0.</summary>
        public global::System.Boolean Equals(global::Microsoft.CodeAnalysis.Rename.Lightup.DocumentRenameOptionsWrapper other)
        {
            return EqualsFunc1(wrappedObject, other);
        }
    }
}
