// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Rename.Lightup
{
public partial class RenamerEx {
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentActionSet. Added in version 3.7.0.0.</summary>
    public partial struct RenameDocumentActionSetWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Rename.Renamer+RenameDocumentActionSet";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Rename.Lightup.RenamerEx.RenameDocumentActionWrapper> ApplicableActionsGetterDelegate(global::System.Object? _obj);

        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Solution> UpdateSolutionAsyncDelegate0(global::System.Object? _obj, global::Microsoft.CodeAnalysis.Solution solution, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Solution> UpdateSolutionAsyncDelegate1(global::System.Object? _obj, global::Microsoft.CodeAnalysis.Solution solution, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Rename.Lightup.RenamerEx.RenameDocumentActionWrapper> actions, global::System.Threading.CancellationToken cancellationToken);

        private static readonly ApplicableActionsGetterDelegate ApplicableActionsGetterFunc;

        private static readonly UpdateSolutionAsyncDelegate0 UpdateSolutionAsyncFunc0;
        private static readonly UpdateSolutionAsyncDelegate1 UpdateSolutionAsyncFunc1;

        private readonly global::System.Object? wrappedObject;

        static RenameDocumentActionSetWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ApplicableActionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ApplicableActionsGetterDelegate>(WrappedType, nameof(ApplicableActions));

            UpdateSolutionAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<UpdateSolutionAsyncDelegate0>(WrappedType, "UpdateSolutionAsync", "solutionSolution", "cancellationTokenCancellationToken");
            UpdateSolutionAsyncFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<UpdateSolutionAsyncDelegate1>(WrappedType, "UpdateSolutionAsync", "solutionSolution", "actionsImmutableArray`1", "cancellationTokenCancellationToken");
        }

        private RenameDocumentActionSetWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.7.0.0.</summary>
        public global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Rename.Lightup.RenamerEx.RenameDocumentActionWrapper> ApplicableActions
        {
            get { return ApplicableActionsGetterFunc(wrappedObject); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static RenameDocumentActionSetWrapper Wrap(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new RenameDocumentActionSetWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Solution> UpdateSolutionAsync(global::Microsoft.CodeAnalysis.Solution solution, global::System.Threading.CancellationToken cancellationToken)
        {
            return UpdateSolutionAsyncFunc0(wrappedObject, solution, cancellationToken);
        }

        /// <summary>Method added in version 3.7.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Solution> UpdateSolutionAsync(global::Microsoft.CodeAnalysis.Solution solution, global::System.Collections.Immutable.ImmutableArray<global::Microsoft.CodeAnalysis.Rename.Lightup.RenamerEx.RenameDocumentActionWrapper> actions, global::System.Threading.CancellationToken cancellationToken)
        {
            return UpdateSolutionAsyncFunc1(wrappedObject, solution, actions, cancellationToken);
        }
    }
}
}
