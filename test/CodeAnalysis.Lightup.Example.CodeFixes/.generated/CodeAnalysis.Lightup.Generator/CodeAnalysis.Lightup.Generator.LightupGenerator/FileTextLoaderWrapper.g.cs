// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.FileTextLoader. Added in version 2.9.0.0.</summary>
    public partial struct FileTextLoaderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.FileTextLoader";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate FileTextLoaderWrapper ConstructorDelegate0(global::System.String path, global::System.Text.Encoding? defaultEncoding);

        private delegate global::System.Text.Encoding? DefaultEncodingGetterDelegate(global::Microsoft.CodeAnalysis.TextLoader _obj);
        private delegate global::System.String PathGetterDelegate(global::Microsoft.CodeAnalysis.TextLoader _obj);

        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsyncDelegate0(global::Microsoft.CodeAnalysis.TextLoader _obj, global::Microsoft.CodeAnalysis.Lightup.LoadTextOptionsWrapper options, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsyncDelegate1(global::Microsoft.CodeAnalysis.TextLoader _obj, global::Microsoft.CodeAnalysis.Workspace? workspace, global::Microsoft.CodeAnalysis.DocumentId? documentId, global::System.Threading.CancellationToken cancellationToken);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly DefaultEncodingGetterDelegate DefaultEncodingGetterFunc;
        private static readonly PathGetterDelegate PathGetterFunc;

        private static readonly LoadTextAndVersionAsyncDelegate0 LoadTextAndVersionAsyncFunc0;
        private static readonly LoadTextAndVersionAsyncDelegate1 LoadTextAndVersionAsyncFunc1;

        private readonly global::Microsoft.CodeAnalysis.TextLoader wrappedObject;

        static FileTextLoaderWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "pathString", "defaultEncodingEncoding");

            DefaultEncodingGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<DefaultEncodingGetterDelegate>(WrappedType, nameof(DefaultEncoding));
            PathGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<PathGetterDelegate>(WrappedType, nameof(Path));

            LoadTextAndVersionAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<LoadTextAndVersionAsyncDelegate0>(WrappedType, "LoadTextAndVersionAsync", "optionsLoadTextOptions", "cancellationTokenCancellationToken");
            LoadTextAndVersionAsyncFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<LoadTextAndVersionAsyncDelegate1>(WrappedType, "LoadTextAndVersionAsync", "workspaceWorkspace", "documentIdDocumentId", "cancellationTokenCancellationToken");
        }

        private FileTextLoaderWrapper(global::Microsoft.CodeAnalysis.TextLoader obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 2.9.0.0.</summary>
        public static FileTextLoaderWrapper Create(global::System.String path, global::System.Text.Encoding? defaultEncoding)
        {
            return ConstructorFunc0(path, defaultEncoding);
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.Text.Encoding? DefaultEncoding
        {
            get { return DefaultEncodingGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::System.String Path
        {
            get { return PathGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator FileTextLoaderWrapper(global::Microsoft.CodeAnalysis.TextLoader obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.TextLoader(FileTextLoaderWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.TextLoader? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static FileTextLoaderWrapper Wrap(global::Microsoft.CodeAnalysis.TextLoader obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.TextLoader>(obj, WrappedType);
            return new FileTextLoaderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.TextLoader Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 4.5.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsync(global::Microsoft.CodeAnalysis.Lightup.LoadTextOptionsWrapper options, global::System.Threading.CancellationToken cancellationToken)
        {
            return LoadTextAndVersionAsyncFunc0(wrappedObject, options, cancellationToken);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.TextAndVersion> LoadTextAndVersionAsync(global::Microsoft.CodeAnalysis.Workspace? workspace, global::Microsoft.CodeAnalysis.DocumentId? documentId, global::System.Threading.CancellationToken cancellationToken)
        {
            return LoadTextAndVersionAsyncFunc1(wrappedObject, workspace, documentId, cancellationToken);
        }
    }
}
