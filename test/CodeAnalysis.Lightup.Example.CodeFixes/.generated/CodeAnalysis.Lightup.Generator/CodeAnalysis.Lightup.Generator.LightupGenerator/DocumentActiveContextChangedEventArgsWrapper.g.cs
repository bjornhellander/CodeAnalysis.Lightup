// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.DocumentActiveContextChangedEventArgs. Added in version 2.0.0.0.</summary>
    public partial struct DocumentActiveContextChangedEventArgsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.DocumentActiveContextChangedEventArgs";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate DocumentActiveContextChangedEventArgsWrapper ConstructorDelegate0(global::Microsoft.CodeAnalysis.Solution? solution, global::Microsoft.CodeAnalysis.Text.SourceTextContainer? sourceTextContainer, global::Microsoft.CodeAnalysis.DocumentId? oldActiveContextDocumentId, global::Microsoft.CodeAnalysis.DocumentId? newActiveContextDocumentId);

        private delegate global::Microsoft.CodeAnalysis.DocumentId? NewActiveContextDocumentIdGetterDelegate(global::System.EventArgs _obj);
        private delegate global::Microsoft.CodeAnalysis.DocumentId? OldActiveContextDocumentIdGetterDelegate(global::System.EventArgs _obj);
        private delegate global::Microsoft.CodeAnalysis.Solution? SolutionGetterDelegate(global::System.EventArgs _obj);
        private delegate global::Microsoft.CodeAnalysis.Text.SourceTextContainer? SourceTextContainerGetterDelegate(global::System.EventArgs _obj);

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly NewActiveContextDocumentIdGetterDelegate NewActiveContextDocumentIdGetterFunc;
        private static readonly OldActiveContextDocumentIdGetterDelegate OldActiveContextDocumentIdGetterFunc;
        private static readonly SolutionGetterDelegate SolutionGetterFunc;
        private static readonly SourceTextContainerGetterDelegate SourceTextContainerGetterFunc;

        private readonly global::System.EventArgs wrappedObject;

        static DocumentActiveContextChangedEventArgsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "solutionSolution", "sourceTextContainerSourceTextContainer", "oldActiveContextDocumentIdDocumentId", "newActiveContextDocumentIdDocumentId");

            NewActiveContextDocumentIdGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<NewActiveContextDocumentIdGetterDelegate>(WrappedType, nameof(NewActiveContextDocumentId));
            OldActiveContextDocumentIdGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<OldActiveContextDocumentIdGetterDelegate>(WrappedType, nameof(OldActiveContextDocumentId));
            SolutionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SolutionGetterDelegate>(WrappedType, nameof(Solution));
            SourceTextContainerGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SourceTextContainerGetterDelegate>(WrappedType, nameof(SourceTextContainer));
        }

        private DocumentActiveContextChangedEventArgsWrapper(global::System.EventArgs obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Constructor added in version 2.0.0.0.</summary>
        public static DocumentActiveContextChangedEventArgsWrapper Create(global::Microsoft.CodeAnalysis.Solution? solution, global::Microsoft.CodeAnalysis.Text.SourceTextContainer? sourceTextContainer, global::Microsoft.CodeAnalysis.DocumentId? oldActiveContextDocumentId, global::Microsoft.CodeAnalysis.DocumentId? newActiveContextDocumentId)
        {
            return ConstructorFunc0(solution, sourceTextContainer, oldActiveContextDocumentId, newActiveContextDocumentId);
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.DocumentId? NewActiveContextDocumentId
        {
            get { return NewActiveContextDocumentIdGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.DocumentId? OldActiveContextDocumentId
        {
            get { return OldActiveContextDocumentIdGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Solution? Solution
        {
            get { return SolutionGetterFunc(wrappedObject); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Text.SourceTextContainer? SourceTextContainer
        {
            get { return SourceTextContainerGetterFunc(wrappedObject); }
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator DocumentActiveContextChangedEventArgsWrapper(global::System.EventArgs obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::System.EventArgs(DocumentActiveContextChangedEventArgsWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.EventArgs? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static DocumentActiveContextChangedEventArgsWrapper Wrap(global::System.EventArgs obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.EventArgs>(obj, WrappedType);
            return new DocumentActiveContextChangedEventArgsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.EventArgs Unwrap()
        {
            return wrappedObject;
        }
    }
}
