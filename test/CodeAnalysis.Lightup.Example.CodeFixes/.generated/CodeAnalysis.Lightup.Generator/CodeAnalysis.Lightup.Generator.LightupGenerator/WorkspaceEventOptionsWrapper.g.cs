// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.WorkspaceEventOptions. Added in version 5.0.0.0.</summary>
    public partial struct WorkspaceEventOptionsWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.WorkspaceEventOptions";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper DefaultOptionsGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper RequiresMainThreadOptionsGetterDelegate();

        private delegate WorkspaceEventOptionsWrapper ConstructorDelegate0(global::System.Boolean RequiresMainThread);

        private delegate global::System.Boolean RequiresMainThreadGetterDelegate(global::System.Object _obj);
        private delegate void RequiresMainThreadSetterDelegate(System.Object _obj, global::System.Boolean _value);

        private delegate void DeconstructDelegate0(global::System.Object _obj, out global::System.Boolean RequiresMainThread);
        private delegate global::System.Boolean EqualsDelegate0(global::System.Object _obj, global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper other);

        private static readonly DefaultOptionsGetterDelegate DefaultOptionsGetterFunc;
        private static readonly RequiresMainThreadOptionsGetterDelegate RequiresMainThreadOptionsGetterFunc;

        private static readonly ConstructorDelegate0 ConstructorFunc0;

        private static readonly RequiresMainThreadGetterDelegate RequiresMainThreadGetterFunc;
        private static readonly RequiresMainThreadSetterDelegate RequiresMainThreadSetterFunc;

        private static readonly DeconstructDelegate0 DeconstructFunc0;
        private static readonly EqualsDelegate0 EqualsFunc0;

        private readonly global::System.Object wrappedObject;

        static WorkspaceEventOptionsWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            DefaultOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<DefaultOptionsGetterDelegate>(WrappedType, nameof(DefaultOptions));
            RequiresMainThreadOptionsGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<RequiresMainThreadOptionsGetterDelegate>(WrappedType, nameof(RequiresMainThreadOptions));

            ConstructorFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceConstructorAccessor<ConstructorDelegate0>(WrappedType, "RequiresMainThreadBoolean");

            RequiresMainThreadGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<RequiresMainThreadGetterDelegate>(WrappedType, nameof(RequiresMainThread));
            RequiresMainThreadSetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<RequiresMainThreadSetterDelegate>(WrappedType, nameof(RequiresMainThread));

            DeconstructFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<DeconstructDelegate0>(WrappedType, "Deconstruct", "RequiresMainThreadBoolean&");
            EqualsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "otherWorkspaceEventOptions");
        }

        private WorkspaceEventOptionsWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Field added in version 5.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper DefaultOptions
        {
            get { return DefaultOptionsGetterFunc(); }
        }

        /// <summary>Field added in version 5.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper RequiresMainThreadOptions
        {
            get { return RequiresMainThreadOptionsGetterFunc(); }
        }

        /// <summary>Constructor added in version 5.0.0.0.</summary>
        public static WorkspaceEventOptionsWrapper Create(global::System.Boolean RequiresMainThread)
        {
            return ConstructorFunc0(RequiresMainThread);
        }

        /// <summary>Property added in version 5.0.0.0.</summary>
        public global::System.Boolean RequiresMainThread
        {
            get { return RequiresMainThreadGetterFunc(wrappedObject); }
            set { RequiresMainThreadSetterFunc(wrappedObject, value); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static WorkspaceEventOptionsWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new WorkspaceEventOptionsWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public void Deconstruct(out global::System.Boolean RequiresMainThread)
        {
            DeconstructFunc0(wrappedObject, out RequiresMainThread);
        }

        /// <summary>Method added in version 5.0.0.0.</summary>
        public global::System.Boolean Equals(global::Microsoft.CodeAnalysis.Lightup.WorkspaceEventOptionsWrapper other)
        {
            return EqualsFunc0(wrappedObject, other);
        }
    }
}
