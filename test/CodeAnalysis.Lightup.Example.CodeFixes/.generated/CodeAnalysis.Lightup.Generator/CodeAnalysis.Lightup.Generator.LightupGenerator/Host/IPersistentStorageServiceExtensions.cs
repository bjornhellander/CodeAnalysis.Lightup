// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Host.IPersistentStorageService.</summary>
    public static partial class IPersistentStorageServiceExtensions
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.IPersistentStorageService";

        private delegate global::System.Threading.Tasks.ValueTask<global::Microsoft.CodeAnalysis.Host.IPersistentStorage> GetStorageAsyncDelegate0(global::Microsoft.CodeAnalysis.Host.IPersistentStorageService? _obj, global::Microsoft.CodeAnalysis.Solution solution, global::System.Threading.CancellationToken cancellationToken);

        private static readonly GetStorageAsyncDelegate0 GetStorageAsyncFunc0;

        static IPersistentStorageServiceExtensions()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetStorageAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetStorageAsyncDelegate0>(wrappedType, "GetStorageAsync", "solutionSolution", "cancellationTokenCancellationToken");
        }

        /// <summary>Method added in version 4.0.0.0.</summary>
        public static global::System.Threading.Tasks.ValueTask<global::Microsoft.CodeAnalysis.Host.IPersistentStorage> GetStorageAsync(this global::Microsoft.CodeAnalysis.Host.IPersistentStorageService _obj, global::Microsoft.CodeAnalysis.Solution solution, global::System.Threading.CancellationToken cancellationToken)
            => GetStorageAsyncFunc0(_obj, solution, cancellationToken);
    }
}
