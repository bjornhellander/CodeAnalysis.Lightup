// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Host.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Host.LanguageServices. Added in version 4.4.0.0.</summary>
    public partial struct LanguageServicesWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Host.LanguageServices";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.String LanguageGetterDelegate(global::System.Object? _obj);
        private delegate global::Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper SolutionServicesGetterDelegate(global::System.Object? _obj);

        private static readonly LanguageGetterDelegate LanguageGetterFunc;
        private static readonly SolutionServicesGetterDelegate SolutionServicesGetterFunc;

        private readonly global::System.Object? wrappedObject;

        static LanguageServicesWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            LanguageGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<LanguageGetterDelegate>(WrappedType, nameof(Language));
            SolutionServicesGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SolutionServicesGetterDelegate>(WrappedType, nameof(SolutionServices));
        }

        private LanguageServicesWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly global::System.String Language
        {
            get => LanguageGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 4.4.0.0.</summary>
        public readonly global::Microsoft.CodeAnalysis.Host.Lightup.SolutionServicesWrapper SolutionServices
        {
            get => SolutionServicesGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static LanguageServicesWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new LanguageServicesWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
            => wrappedObject;
    }
}
