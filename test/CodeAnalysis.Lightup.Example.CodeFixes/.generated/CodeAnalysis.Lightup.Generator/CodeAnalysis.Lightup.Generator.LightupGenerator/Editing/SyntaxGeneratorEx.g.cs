// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Editing.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Editing.SyntaxGenerator.</summary>
    public static partial class SyntaxGeneratorEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Editing.SyntaxGenerator";

        private delegate global::Microsoft.CodeAnalysis.SyntaxNode AddEventHandlerDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode @event, global::Microsoft.CodeAnalysis.SyntaxNode handler);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode AddSwitchSectionsDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> switchSections);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclarationDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.String aliasIdentifierName, global::Microsoft.CodeAnalysis.SyntaxNode name);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclarationDelegate1(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.String aliasIdentifierName, global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol symbol);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode ConditionalAccessExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression, global::Microsoft.CodeAnalysis.SyntaxNode whenNotNull);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, params global::Microsoft.CodeAnalysis.SyntaxNode[] arguments);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpressionDelegate1(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> arguments);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode GetAccessorDeclarationDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.Accessibility accessibility, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode>? statements);
        private delegate global::System.Collections.Generic.IReadOnlyList<global::Microsoft.CodeAnalysis.SyntaxNode> GetSwitchSectionsDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode InsertSwitchSectionsDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement, global::System.Int32 index, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> switchSections);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode LockStatementDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> statements);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode MemberBindingExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode name);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode NameExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol namespaceOrTypeSymbol);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode RemoveEventHandlerDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode @event, global::Microsoft.CodeAnalysis.SyntaxNode handler);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode SetAccessorDeclarationDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.Accessibility accessibility, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode>? statements);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode ThrowExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleElementExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode type, global::System.String? name);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleElementExpressionDelegate1(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.ITypeSymbol type, global::System.String? name);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> arguments);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, params global::Microsoft.CodeAnalysis.SyntaxNode[] elements);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpressionDelegate1(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> elements);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpressionDelegate2(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Generic.IEnumerable<global::System.String>? elementNames);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode TypeExpressionDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.ITypeSymbol typeSymbol, global::System.Boolean addImport);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarationsDelegate0(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode declaration, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> accessorDeclarations);
        private delegate global::Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarationsDelegate1(global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode declaration, params global::Microsoft.CodeAnalysis.SyntaxNode[] accessorDeclarations);

        private static readonly AddEventHandlerDelegate0 AddEventHandlerFunc0;
        private static readonly AddSwitchSectionsDelegate0 AddSwitchSectionsFunc0;
        private static readonly AliasImportDeclarationDelegate0 AliasImportDeclarationFunc0;
        private static readonly AliasImportDeclarationDelegate1 AliasImportDeclarationFunc1;
        private static readonly ConditionalAccessExpressionDelegate0 ConditionalAccessExpressionFunc0;
        private static readonly ElementBindingExpressionDelegate0 ElementBindingExpressionFunc0;
        private static readonly ElementBindingExpressionDelegate1 ElementBindingExpressionFunc1;
        private static readonly GetAccessorDeclarationDelegate0 GetAccessorDeclarationFunc0;
        private static readonly GetSwitchSectionsDelegate0 GetSwitchSectionsFunc0;
        private static readonly InsertSwitchSectionsDelegate0 InsertSwitchSectionsFunc0;
        private static readonly LockStatementDelegate0 LockStatementFunc0;
        private static readonly MemberBindingExpressionDelegate0 MemberBindingExpressionFunc0;
        private static readonly NameExpressionDelegate0 NameExpressionFunc0;
        private static readonly RemoveEventHandlerDelegate0 RemoveEventHandlerFunc0;
        private static readonly SetAccessorDeclarationDelegate0 SetAccessorDeclarationFunc0;
        private static readonly ThrowExpressionDelegate0 ThrowExpressionFunc0;
        private static readonly TupleElementExpressionDelegate0 TupleElementExpressionFunc0;
        private static readonly TupleElementExpressionDelegate1 TupleElementExpressionFunc1;
        private static readonly TupleExpressionDelegate0 TupleExpressionFunc0;
        private static readonly TupleTypeExpressionDelegate0 TupleTypeExpressionFunc0;
        private static readonly TupleTypeExpressionDelegate1 TupleTypeExpressionFunc1;
        private static readonly TupleTypeExpressionDelegate2 TupleTypeExpressionFunc2;
        private static readonly TypeExpressionDelegate0 TypeExpressionFunc0;
        private static readonly WithAccessorDeclarationsDelegate0 WithAccessorDeclarationsFunc0;
        private static readonly WithAccessorDeclarationsDelegate1 WithAccessorDeclarationsFunc1;

        static SyntaxGeneratorEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            AddEventHandlerFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<AddEventHandlerDelegate0>(wrappedType, "AddEventHandler", "eventSyntaxNode", "handlerSyntaxNode");
            AddSwitchSectionsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<AddSwitchSectionsDelegate0>(wrappedType, "AddSwitchSections", "switchStatementSyntaxNode", "switchSectionsIEnumerable`1");
            AliasImportDeclarationFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<AliasImportDeclarationDelegate0>(wrappedType, "AliasImportDeclaration", "aliasIdentifierNameString", "nameSyntaxNode");
            AliasImportDeclarationFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<AliasImportDeclarationDelegate1>(wrappedType, "AliasImportDeclaration", "aliasIdentifierNameString", "symbolINamespaceOrTypeSymbol");
            ConditionalAccessExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ConditionalAccessExpressionDelegate0>(wrappedType, "ConditionalAccessExpression", "expressionSyntaxNode", "whenNotNullSyntaxNode");
            ElementBindingExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ElementBindingExpressionDelegate0>(wrappedType, "ElementBindingExpression", "argumentsSyntaxNode[]");
            ElementBindingExpressionFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ElementBindingExpressionDelegate1>(wrappedType, "ElementBindingExpression", "argumentsIEnumerable`1");
            GetAccessorDeclarationFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetAccessorDeclarationDelegate0>(wrappedType, "GetAccessorDeclaration", "accessibilityAccessibility", "statementsIEnumerable`1");
            GetSwitchSectionsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetSwitchSectionsDelegate0>(wrappedType, "GetSwitchSections", "switchStatementSyntaxNode");
            InsertSwitchSectionsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<InsertSwitchSectionsDelegate0>(wrappedType, "InsertSwitchSections", "switchStatementSyntaxNode", "indexInt32", "switchSectionsIEnumerable`1");
            LockStatementFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<LockStatementDelegate0>(wrappedType, "LockStatement", "expressionSyntaxNode", "statementsIEnumerable`1");
            MemberBindingExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<MemberBindingExpressionDelegate0>(wrappedType, "MemberBindingExpression", "nameSyntaxNode");
            NameExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<NameExpressionDelegate0>(wrappedType, "NameExpression", "namespaceOrTypeSymbolINamespaceOrTypeSymbol");
            RemoveEventHandlerFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<RemoveEventHandlerDelegate0>(wrappedType, "RemoveEventHandler", "eventSyntaxNode", "handlerSyntaxNode");
            SetAccessorDeclarationFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<SetAccessorDeclarationDelegate0>(wrappedType, "SetAccessorDeclaration", "accessibilityAccessibility", "statementsIEnumerable`1");
            ThrowExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<ThrowExpressionDelegate0>(wrappedType, "ThrowExpression", "expressionSyntaxNode");
            TupleElementExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleElementExpressionDelegate0>(wrappedType, "TupleElementExpression", "typeSyntaxNode", "nameString");
            TupleElementExpressionFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleElementExpressionDelegate1>(wrappedType, "TupleElementExpression", "typeITypeSymbol", "nameString");
            TupleExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleExpressionDelegate0>(wrappedType, "TupleExpression", "argumentsIEnumerable`1");
            TupleTypeExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleTypeExpressionDelegate0>(wrappedType, "TupleTypeExpression", "elementsSyntaxNode[]");
            TupleTypeExpressionFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleTypeExpressionDelegate1>(wrappedType, "TupleTypeExpression", "elementsIEnumerable`1");
            TupleTypeExpressionFunc2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TupleTypeExpressionDelegate2>(wrappedType, "TupleTypeExpression", "elementTypesIEnumerable`1", "elementNamesIEnumerable`1");
            TypeExpressionFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<TypeExpressionDelegate0>(wrappedType, "TypeExpression", "typeSymbolITypeSymbol", "addImportBoolean");
            WithAccessorDeclarationsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithAccessorDeclarationsDelegate0>(wrappedType, "WithAccessorDeclarations", "declarationSyntaxNode", "accessorDeclarationsIEnumerable`1");
            WithAccessorDeclarationsFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithAccessorDeclarationsDelegate1>(wrappedType, "WithAccessorDeclarations", "declarationSyntaxNode", "accessorDeclarationsSyntaxNode[]");
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode AddEventHandler(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode @event, global::Microsoft.CodeAnalysis.SyntaxNode handler)
        {
            return AddEventHandlerFunc0(_obj, @event, handler);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode AddSwitchSections(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> switchSections)
        {
            return AddSwitchSectionsFunc0(_obj, switchStatement, switchSections);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.String aliasIdentifierName, global::Microsoft.CodeAnalysis.SyntaxNode name)
        {
            return AliasImportDeclarationFunc0(_obj, aliasIdentifierName, name);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.String aliasIdentifierName, global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol symbol)
        {
            return AliasImportDeclarationFunc1(_obj, aliasIdentifierName, symbol);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode ConditionalAccessExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression, global::Microsoft.CodeAnalysis.SyntaxNode whenNotNull)
        {
            return ConditionalAccessExpressionFunc0(_obj, expression, whenNotNull);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, params global::Microsoft.CodeAnalysis.SyntaxNode[] arguments)
        {
            return ElementBindingExpressionFunc0(_obj, arguments);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode ElementBindingExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> arguments)
        {
            return ElementBindingExpressionFunc1(_obj, arguments);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode GetAccessorDeclaration(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.Accessibility accessibility, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode>? statements)
        {
            return GetAccessorDeclarationFunc0(_obj, accessibility, statements);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::System.Collections.Generic.IReadOnlyList<global::Microsoft.CodeAnalysis.SyntaxNode> GetSwitchSections(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement)
        {
            return GetSwitchSectionsFunc0(_obj, switchStatement);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode InsertSwitchSections(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode switchStatement, global::System.Int32 index, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> switchSections)
        {
            return InsertSwitchSectionsFunc0(_obj, switchStatement, index, switchSections);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode LockStatement(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> statements)
        {
            return LockStatementFunc0(_obj, expression, statements);
        }

        /// <summary>Method added in version 3.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode MemberBindingExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode name)
        {
            return MemberBindingExpressionFunc0(_obj, name);
        }

        /// <summary>Method added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode NameExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.INamespaceOrTypeSymbol namespaceOrTypeSymbol)
        {
            return NameExpressionFunc0(_obj, namespaceOrTypeSymbol);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode RemoveEventHandler(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode @event, global::Microsoft.CodeAnalysis.SyntaxNode handler)
        {
            return RemoveEventHandlerFunc0(_obj, @event, handler);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode SetAccessorDeclaration(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.Accessibility accessibility, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode>? statements)
        {
            return SetAccessorDeclarationFunc0(_obj, accessibility, statements);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode ThrowExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode expression)
        {
            return ThrowExpressionFunc0(_obj, expression);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode type, global::System.String? name)
        {
            return TupleElementExpressionFunc0(_obj, type, name);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.ITypeSymbol type, global::System.String? name)
        {
            return TupleElementExpressionFunc1(_obj, type, name);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> arguments)
        {
            return TupleExpressionFunc0(_obj, arguments);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, params global::Microsoft.CodeAnalysis.SyntaxNode[] elements)
        {
            return TupleTypeExpressionFunc0(_obj, elements);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> elements)
        {
            return TupleTypeExpressionFunc1(_obj, elements);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, global::System.Collections.Generic.IEnumerable<global::System.String>? elementNames)
        {
            return TupleTypeExpressionFunc2(_obj, elementTypes, elementNames);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode TypeExpression(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.ITypeSymbol typeSymbol, global::System.Boolean addImport)
        {
            return TypeExpressionFunc0(_obj, typeSymbol, addImport);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode declaration, global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.SyntaxNode> accessorDeclarations)
        {
            return WithAccessorDeclarationsFunc0(_obj, declaration, accessorDeclarations);
        }

        /// <summary>Method added in version 2.6.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations(this global::Microsoft.CodeAnalysis.Editing.SyntaxGenerator _obj, global::Microsoft.CodeAnalysis.SyntaxNode declaration, params global::Microsoft.CodeAnalysis.SyntaxNode[] accessorDeclarations)
        {
            return WithAccessorDeclarationsFunc1(_obj, declaration, accessorDeclarations);
        }
    }
}
