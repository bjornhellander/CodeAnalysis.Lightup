// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CodeFixes.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider. Added in version 3.9.0.0.</summary>
    public partial struct DocumentBasedFixAllProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeFixes.DocumentBasedFixAllProvider";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.CodeActions.CodeAction> GetFixAsyncDelegate0(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider _obj, global::Microsoft.CodeAnalysis.CodeFixes.FixAllContext fixAllContext);
        private delegate global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.CodeFixes.FixAllScope> GetSupportedFixAllScopesDelegate1(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider _obj);

        private static readonly GetFixAsyncDelegate0 GetFixAsyncFunc0;
        private static readonly GetSupportedFixAllScopesDelegate1 GetSupportedFixAllScopesFunc1;

        private readonly global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider wrappedObject;

        static DocumentBasedFixAllProviderWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetFixAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetFixAsyncDelegate0>(WrappedType, "GetFixAsync", "fixAllContextFixAllContext");
            GetSupportedFixAllScopesFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetSupportedFixAllScopesDelegate1>(WrappedType, "GetSupportedFixAllScopes");
        }

        private DocumentBasedFixAllProviderWrapper(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator DocumentBasedFixAllProviderWrapper(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider(DocumentBasedFixAllProviderWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static DocumentBasedFixAllProviderWrapper Wrap(global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider>(obj, WrappedType);
            return new DocumentBasedFixAllProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.CodeFixes.FixAllProvider Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 3.9.0.0.</summary>
        public global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.CodeActions.CodeAction> GetFixAsync(global::Microsoft.CodeAnalysis.CodeFixes.FixAllContext fixAllContext)
        {
            return GetFixAsyncFunc0(wrappedObject, fixAllContext);
        }

        /// <summary>Method added in version 3.9.0.0.</summary>
        public global::System.Collections.Generic.IEnumerable<global::Microsoft.CodeAnalysis.CodeFixes.FixAllScope> GetSupportedFixAllScopes()
        {
            return GetSupportedFixAllScopesFunc1(wrappedObject);
        }
    }
}
