// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for struct Microsoft.CodeAnalysis.CompilationOutputInfo. Added in version 3.8.0.0.</summary>
    public partial struct CompilationOutputInfoWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CompilationOutputInfo";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::System.String? AssemblyPathGetterDelegate(global::System.Object? _obj);

        private delegate global::System.Boolean EqualsDelegate0(global::System.Object? _obj, global::Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper other);
        private delegate global::Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper WithAssemblyPathDelegate1(global::System.Object? _obj, global::System.String? path);

        private static readonly AssemblyPathGetterDelegate AssemblyPathGetterFunc;

        private static readonly EqualsDelegate0 EqualsFunc0;
        private static readonly WithAssemblyPathDelegate1 WithAssemblyPathFunc1;

        private readonly global::System.Object? wrappedObject;

        static CompilationOutputInfoWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            AssemblyPathGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<AssemblyPathGetterDelegate>(WrappedType, nameof(AssemblyPath));

            EqualsFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<EqualsDelegate0>(WrappedType, "Equals", "otherCompilationOutputInfo");
            WithAssemblyPathFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithAssemblyPathDelegate1>(WrappedType, "WithAssemblyPath", "pathString");
        }

        private CompilationOutputInfoWrapper(global::System.Object? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public global::System.String? AssemblyPath
        {
            get => AssemblyPathGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static CompilationOutputInfoWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.As<global::System.Object>(obj, WrappedType);
            return new CompilationOutputInfoWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object? Unwrap()
            => wrappedObject;

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::System.Boolean Equals(global::Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper other)
            => EqualsFunc0(wrappedObject, other);

        /// <summary>Method added in version 3.8.0.0.</summary>
        public global::Microsoft.CodeAnalysis.Lightup.CompilationOutputInfoWrapper WithAssemblyPath(global::System.String? path)
            => WithAssemblyPathFunc1(wrappedObject, path);
    }
}
