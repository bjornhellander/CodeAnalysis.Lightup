// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.CodeStyle.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.CodeStyle.NotificationOption. Added in version 2.0.0.0.</summary>
    public partial struct NotificationOptionWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.CodeStyle.NotificationOption";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? ErrorGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? NoneGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? SilentGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? SuggestionGetterDelegate();
        private delegate global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? WarningGetterDelegate();

        private delegate global::System.String? NameGetterDelegate(global::System.Object _obj);
        private delegate void NameSetterDelegate(System.Object _obj, global::System.String? _value);
        private delegate global::Microsoft.CodeAnalysis.ReportDiagnostic SeverityGetterDelegate(global::System.Object _obj);
        private delegate void SeveritySetterDelegate(System.Object _obj, global::Microsoft.CodeAnalysis.ReportDiagnostic _value);
        private delegate global::Microsoft.CodeAnalysis.DiagnosticSeverity ValueGetterDelegate(global::System.Object _obj);
        private delegate void ValueSetterDelegate(System.Object _obj, global::Microsoft.CodeAnalysis.DiagnosticSeverity _value);

        private static readonly ErrorGetterDelegate ErrorGetterFunc;
        private static readonly NoneGetterDelegate NoneGetterFunc;
        private static readonly SilentGetterDelegate SilentGetterFunc;
        private static readonly SuggestionGetterDelegate SuggestionGetterFunc;
        private static readonly WarningGetterDelegate WarningGetterFunc;

        private static readonly NameGetterDelegate NameGetterFunc;
        private static readonly NameSetterDelegate NameSetterFunc;
        private static readonly SeverityGetterDelegate SeverityGetterFunc;
        private static readonly SeveritySetterDelegate SeveritySetterFunc;
        private static readonly ValueGetterDelegate ValueGetterFunc;
        private static readonly ValueSetterDelegate ValueSetterFunc;

        private readonly global::System.Object wrappedObject;

        static NotificationOptionWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            ErrorGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<ErrorGetterDelegate>(WrappedType, nameof(Error));
            NoneGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<NoneGetterDelegate>(WrappedType, nameof(None));
            SilentGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<SilentGetterDelegate>(WrappedType, nameof(Silent));
            SuggestionGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<SuggestionGetterDelegate>(WrappedType, nameof(Suggestion));
            WarningGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticReadAccessor<WarningGetterDelegate>(WrappedType, nameof(Warning));

            NameGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<NameGetterDelegate>(WrappedType, nameof(Name));
            NameSetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<NameSetterDelegate>(WrappedType, nameof(Name));
            SeverityGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<SeverityGetterDelegate>(WrappedType, nameof(Severity));
            SeveritySetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<SeveritySetterDelegate>(WrappedType, nameof(Severity));
            ValueGetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceGetAccessor<ValueGetterDelegate>(WrappedType, nameof(Value));
            ValueSetterFunc = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceSetAccessor<ValueSetterDelegate>(WrappedType, nameof(Value));
        }

        private NotificationOptionWrapper(global::System.Object obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Field added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? Error
        {
            get { return ErrorGetterFunc(); }
        }

        /// <summary>Field added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? None
        {
            get { return NoneGetterFunc(); }
        }

        /// <summary>Field added in version 2.9.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? Silent
        {
            get { return SilentGetterFunc(); }
        }

        /// <summary>Field added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? Suggestion
        {
            get { return SuggestionGetterFunc(); }
        }

        /// <summary>Field added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.CodeStyle.Lightup.NotificationOptionWrapper? Warning
        {
            get { return WarningGetterFunc(); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::System.String? Name
        {
            get { return NameGetterFunc(wrappedObject); }
            set { NameSetterFunc(wrappedObject, value); }
        }

        /// <summary>Property added in version 2.9.0.0.</summary>
        public global::Microsoft.CodeAnalysis.ReportDiagnostic Severity
        {
            get { return SeverityGetterFunc(wrappedObject); }
            set { SeveritySetterFunc(wrappedObject, value); }
        }

        /// <summary>Property added in version 2.0.0.0.</summary>
        public global::Microsoft.CodeAnalysis.DiagnosticSeverity Value
        {
            get { return ValueGetterFunc(wrappedObject); }
            set { ValueSetterFunc(wrappedObject, value); }
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static NotificationOptionWrapper Wrap(global::System.Object obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::System.Object>(obj, WrappedType);
            return new NotificationOptionWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::System.Object Unwrap()
        {
            return wrappedObject;
        }
    }
}
