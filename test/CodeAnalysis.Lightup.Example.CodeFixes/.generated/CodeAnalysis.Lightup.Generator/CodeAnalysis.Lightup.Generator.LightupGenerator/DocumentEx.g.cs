// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.Document.</summary>
    public static partial class DocumentEx
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Document";

        private delegate global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Options.Lightup.DocumentOptionSetWrapper> GetOptionsAsyncDelegate0(global::Microsoft.CodeAnalysis.Document _obj, global::System.Threading.CancellationToken cancellationToken);
        private delegate global::Microsoft.CodeAnalysis.Document WithFilePathDelegate0(global::Microsoft.CodeAnalysis.Document _obj, global::System.String? filePath);
        private delegate global::Microsoft.CodeAnalysis.Document WithFoldersDelegate0(global::Microsoft.CodeAnalysis.Document _obj, global::System.Collections.Generic.IEnumerable<global::System.String> folders);
        private delegate global::Microsoft.CodeAnalysis.Document WithNameDelegate0(global::Microsoft.CodeAnalysis.Document _obj, global::System.String name);

        private static readonly GetOptionsAsyncDelegate0 GetOptionsAsyncFunc0;
        private static readonly WithFilePathDelegate0 WithFilePathFunc0;
        private static readonly WithFoldersDelegate0 WithFoldersFunc0;
        private static readonly WithNameDelegate0 WithNameFunc0;

        static DocumentEx()
        {
            var wrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            GetOptionsAsyncFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<GetOptionsAsyncDelegate0>(wrappedType, "GetOptionsAsync", "cancellationTokenCancellationToken");
            WithFilePathFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithFilePathDelegate0>(wrappedType, "WithFilePath", "filePathString");
            WithFoldersFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithFoldersDelegate0>(wrappedType, "WithFolders", "foldersIEnumerable`1");
            WithNameFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateInstanceMethodAccessor<WithNameDelegate0>(wrappedType, "WithName", "nameString");
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::System.Threading.Tasks.Task<global::Microsoft.CodeAnalysis.Options.Lightup.DocumentOptionSetWrapper> GetOptionsAsync(this global::Microsoft.CodeAnalysis.Document _obj, global::System.Threading.CancellationToken cancellationToken)
        {
            return GetOptionsAsyncFunc0(_obj, cancellationToken);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Document WithFilePath(this global::Microsoft.CodeAnalysis.Document _obj, global::System.String? filePath)
        {
            return WithFilePathFunc0(_obj, filePath);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Document WithFolders(this global::Microsoft.CodeAnalysis.Document _obj, global::System.Collections.Generic.IEnumerable<global::System.String> folders)
        {
            return WithFoldersFunc0(_obj, folders);
        }

        /// <summary>Method added in version 2.3.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Document WithName(this global::Microsoft.CodeAnalysis.Document _obj, global::System.String name)
        {
            return WithNameFunc0(_obj, name);
        }
    }
}
