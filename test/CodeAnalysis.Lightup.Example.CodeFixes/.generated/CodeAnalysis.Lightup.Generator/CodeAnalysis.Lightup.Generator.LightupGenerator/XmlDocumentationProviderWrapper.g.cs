// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Lightup
{
    /// <summary>Provides lightup support for class Microsoft.CodeAnalysis.XmlDocumentationProvider. Added in version 2.0.0.0.</summary>
    public partial struct XmlDocumentationProviderWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.XmlDocumentationProvider";

        private static readonly global::System.Type? WrappedType;

        private delegate global::Microsoft.CodeAnalysis.Lightup.XmlDocumentationProviderWrapper? CreateFromBytesDelegate0(global::System.Byte[]? xmlDocCommentBytes);
        private delegate global::Microsoft.CodeAnalysis.Lightup.XmlDocumentationProviderWrapper? CreateFromFileDelegate1(global::System.String? xmlDocCommentFilePath);

        private static readonly CreateFromBytesDelegate0 CreateFromBytesFunc0;
        private static readonly CreateFromFileDelegate1 CreateFromFileFunc1;

        private readonly global::Microsoft.CodeAnalysis.DocumentationProvider wrappedObject;

        static XmlDocumentationProviderWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.FindType(WrappedTypeName);

            CreateFromBytesFunc0 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<CreateFromBytesDelegate0>(WrappedType, "CreateFromBytes", "xmlDocCommentBytesByte[]");
            CreateFromFileFunc1 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.CreateStaticMethodAccessor<CreateFromFileDelegate1>(WrappedType, "CreateFromFile", "xmlDocCommentFilePathString");
        }

        private XmlDocumentationProviderWrapper(global::Microsoft.CodeAnalysis.DocumentationProvider obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static explicit operator XmlDocumentationProviderWrapper(global::Microsoft.CodeAnalysis.DocumentationProvider obj)
        {
            return Wrap(obj);
        }

        /// <summary>Returns the wrapped object.</summary>
        public static implicit operator global::Microsoft.CodeAnalysis.DocumentationProvider(XmlDocumentationProviderWrapper obj)
        {
            return obj.Unwrap();
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::Microsoft.CodeAnalysis.DocumentationProvider? obj)
        {
            return global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Is(obj, WrappedType);
        }

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, an exception will be thrown.</summary>
        public static XmlDocumentationProviderWrapper Wrap(global::Microsoft.CodeAnalysis.DocumentationProvider obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.WorkspacesCommonLightupHelper.Wrap<global::Microsoft.CodeAnalysis.DocumentationProvider>(obj, WrappedType);
            return new XmlDocumentationProviderWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.DocumentationProvider Unwrap()
        {
            return wrappedObject;
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.XmlDocumentationProviderWrapper? CreateFromBytes(global::System.Byte[]? xmlDocCommentBytes)
        {
            return CreateFromBytesFunc0(xmlDocCommentBytes);
        }

        /// <summary>Method added in version 2.0.0.0.</summary>
        public static global::Microsoft.CodeAnalysis.Lightup.XmlDocumentationProviderWrapper? CreateFromFile(global::System.String? xmlDocCommentFilePath)
        {
            return CreateFromFileFunc1(xmlDocCommentFilePath);
        }
    }
}
