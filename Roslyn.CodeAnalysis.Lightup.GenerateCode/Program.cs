namespace Roslyn.CodeAnalysis.Lightup.GenerateCode;

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

internal class Program
{
    private static void Main()
    {
        var rootFolder = GetRepositoryRoot();

        RemoveGeneratedSourceFiles(rootFolder);

        var testProjectNames = GetTestProjectNames(rootFolder).OrderBy(x => x);

        var isFirst = true;
        var types = new Dictionary<string, BaseTypeDefinition>();
        foreach (var testProjectName in testProjectNames)
        {
            Reflector.CollectTypes(testProjectName, rootFolder, types, isFirst);
            isFirst = false;
        }

        Writer.Write(types, rootFolder);
    }

    private static string GetRepositoryRoot()
    {
        var folder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)!;

        while (folder != null)
        {
            if (Directory.GetFiles(folder).Any(x => x.EndsWith(".sln")))
            {
                return folder;
            }

            folder = Path.GetDirectoryName(folder);
        }

        Assert.Fail("Can't find repository root");
        return null;
    }

    private static void RemoveGeneratedSourceFiles(string rootFolder)
    {
        var count = 0;

        var sourceFilePaths = Directory.GetFiles(rootFolder, "*.cs", SearchOption.AllDirectories);
        foreach (var sourceFilePath in sourceFilePaths.Where(x => !x.EndsWith("Program.cs") && !x.EndsWith("Writer.cs")))
        {
            var sourceFileText = File.ReadAllText(sourceFilePath);
            if (sourceFileText.Contains("// <auto-generated/>"))
            {
                File.Delete(sourceFilePath);
                count++;
            }
        }

        Assert.IsTrue(count > 100, "Probably failed to remove generated source files!");
    }

    private static List<string> GetTestProjectNames(string rootFolder)
    {
        var folders = Directory.GetDirectories(rootFolder).Select(x => Path.GetFileName(x)).ToList();
        var testProjectFolders = folders.Where(x => x.StartsWith("Roslyn.CodeAnalysis.Lightup.Test") && !x.EndsWith(".Internal")).ToList();
        return testProjectFolders;
    }
}
