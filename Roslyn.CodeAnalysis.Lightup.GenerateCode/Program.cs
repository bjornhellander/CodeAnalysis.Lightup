// Copyright © Björn Hellander 2024
// Licensed under the MIT License. See LICENSE.txt in the repository root for license information.

namespace Roslyn.CodeAnalysis.Lightup.GenerateCode;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Serialization;
using Roslyn.CodeAnalysis.Lightup.Definitions;

internal class Program
{
    private static void Main(string[] args)
    {
        CheckArgs(args, out var force);

        var rootFolder = GetRepositoryRoot();

        var assembly = Assembly.GetExecutingAssembly();
        using var stream = assembly.GetManifestResourceStream("Roslyn.CodeAnalysis.Lightup.GenerateCode.Types.xml")!;
        var serializer = new XmlSerializer(typeof(List<BaseTypeDefinition>));
        var typeList = (List<BaseTypeDefinition>)serializer.Deserialize(stream)!;
        var types = typeList.ToDictionary(x => x.FullName, x => x);

        RemoveGeneratedSourceFiles(rootFolder, force);

        Writer.Write(types, rootFolder);
    }

    private static void CheckArgs(string[] args, out bool force)
    {
        force = false;

        for (var i = 0; i < args.Length; i++)
        {
            switch (args[i])
            {
                case "/force":
                    force = true;
                    break;
                default:
                    throw new InvalidOperationException("Unexpected argument");
            }
        }
    }

    private static string GetRepositoryRoot()
    {
        var folder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)!;

        while (folder != null)
        {
            if (Directory.GetFiles(folder).Any(x => x.EndsWith(".sln")))
            {
                return folder;
            }

            folder = Path.GetDirectoryName(folder);
        }

        Assert.Fail("Can't find repository root");
        return null;
    }

    private static void RemoveGeneratedSourceFiles(string rootFolder, bool force)
    {
        var count = 0;

        var sourceFilePaths = Directory.GetFiles(rootFolder, "*.cs", SearchOption.AllDirectories);
        foreach (var sourceFilePath in sourceFilePaths.Where(x => !x.EndsWith("Program.cs") && !x.EndsWith("Writer.cs")))
        {
            var sourceFileText = File.ReadAllText(sourceFilePath);
            if (sourceFileText.Contains("// <auto-generated/>"))
            {
                File.Delete(sourceFilePath);
                count++;
            }
        }

        Assert.IsTrue(count > 100 || force, "Probably failed to remove generated source files!");
    }
}
