using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Roslyn.CodeAnalysis.Lightup.GenerateCode;

internal class Writer
{
    private static readonly Dictionary<AssemblyKind, string> ProjectNames = new()
    {
        [AssemblyKind.Common] = "Roslyn.CodeAnalysis.Lightup.Common",
        [AssemblyKind.CSharp] = "Roslyn.CodeAnalysis.Lightup.CSharp",
    };

    internal static void Write(IReadOnlyDictionary<string, TypeDefinition> typeDefs, string rootPath)
    {
        Write(typeDefs, rootPath, AssemblyKind.Common);
        Write(typeDefs, rootPath, AssemblyKind.CSharp);
    }

    private static void Write(
        IReadOnlyDictionary<string, TypeDefinition> typeDefs,
        string rootPath,
        AssemblyKind assemblyKind)
    {
        var relevantTypeDefs = typeDefs.Values.Where(x => x.AssemblyKind == assemblyKind).ToList();
        foreach (var typeDef in relevantTypeDefs)
        {
            var targetNamespace = GetTargetNamespace(typeDef.Type);
            var result = GenerateType(typeDef, typeDefs, targetNamespace);

            if (result != null)
            {
                var sourcePath = Path.Combine(rootPath, ProjectNames[assemblyKind]);
                var targetFolder = GetTargetFolder(typeDef.Type, sourcePath);
                if (!Directory.Exists(targetFolder))
                {
                    Directory.CreateDirectory(targetFolder);
                }
                File.WriteAllText(Path.Combine(targetFolder, result.Value.Name + ".cs"), result.Value.Source, Encoding.UTF8);
            }
        }
    }

    private static string GetTargetNamespace(Type type)
    {
        var sourceNamespace = type.Namespace!;
        var targetNamespace = sourceNamespace + ".Lightup";
        return targetNamespace;
    }

    private static (string Name, string Source)? GenerateType(TypeDefinition typeDef, IReadOnlyDictionary<string, TypeDefinition> typeDefs, string targetNamespace)
    {
        if (typeDef is EnumTypeDefinition enumTypeDef)
        {
            if (typeDef.AssemblyVersion != null)
            {
                return GenerateNewEnum(enumTypeDef, targetNamespace);
            }
            else
            {
                return GenerateUpdatedEnum(enumTypeDef, targetNamespace);
            }
        }
        else if (typeDef is ClassTypeDefinition classTypeDef)
        {
            if (typeDef.AssemblyVersion == null)
            {
                // TODO: Handle updated types as well
                return null;
            }
            else if (classTypeDef.IsStatic)
            {
                // TODO: Handle static classes as well
                return null;
            }
            else if (typeDef.Type.FullName!.StartsWith("Microsoft.CodeAnalysis.CSharp.Syntax.")
                && typeDef.Type.Name != "FunctionPointerUnmanagedCallingConventionListSyntax"
                && typeDef.Type.Name != "CollectionExpressionSyntax"
                && typeDef.Type.Name != "FunctionPointerParameterListSyntax"
                && typeDef.Type.Name != "FunctionPointerCallingConventionSyntax"
                && typeDef.Type.Name != "FunctionPointerTypeSyntax")
            {
                return GeneratedClass(typeDef.Type, typeDefs, targetNamespace);
            }
            else
            {
                // TODO: Handle other classes as well
                return null;
            }
        }
        else
        {
            // TODO: Handle other types if necessary
            return null;
        }
    }

    private static (string Name, string Source) GenerateNewEnum(EnumTypeDefinition typeDef, string targetNamespace)
    {
        var newValues = typeDef.Values.Where(x => x.Version != null).OrderBy(x => x.Value).ToList();
        var type = typeDef.Type;
        var targetName = type.Name + "Ex";
        var underlyingTypeName = type.GetEnumUnderlyingType().FullName;
        Assert.IsTrue(underlyingTypeName != null, "Could not get enum's underlying type");
        var isFlagsEnum = type.GetCustomAttribute<FlagsAttribute>() != null;

        var sb = new StringBuilder();

        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {targetNamespace}");
        sb.AppendLine($"{{");
        if (isFlagsEnum)
        {
            sb.AppendLine($"    [System.Flags]");
        }
        sb.AppendLine($"    public enum {targetName} : {underlyingTypeName}");
        sb.AppendLine($"    {{");
        foreach (var value in newValues)
        {
            sb.AppendLine($"        {value.Name} = {value.Value},");
        }
        sb.AppendLine($"    }}");
        sb.AppendLine($"}}");

        var source = sb.ToString();
        return (targetName, source);
    }

    private static (string Name, string Source)? GenerateUpdatedEnum(EnumTypeDefinition typeDef, string targetNamespace)
    {
        var newValues = typeDef.Values.Where(x => x.Version != null).OrderBy(x => x.Value).ToList();
        if (newValues.Count == 0)
        {
            return null;
        }

        var type = typeDef.Type;
        var targetName = type.Name + "Ex";

        var sb = new StringBuilder();

        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {targetNamespace}");
        sb.AppendLine($"{{");
        sb.AppendLine($"    public class {targetName}");
        sb.AppendLine($"    {{");
        foreach (var value in newValues)
        {
            sb.AppendLine($"        public const {type.Name} {value.Name} = ({type.Name}){value.Value};");
        }
        sb.AppendLine($"    }}");
        sb.AppendLine($"}}");

        var source = sb.ToString();
        return (targetName, source);
    }

    private static (string Name, string Source) GeneratedClass(Type type, IReadOnlyDictionary<string, TypeDefinition> typeDefs, string targetNamespace)
    {
        var targetName = type.Name + "Wrapper";
        var instanceProperties = GetInstanceProperties(type);
        var instanceMethods = GetInstanceMethods(type);

        var baseTypeName = GetBaseTypeName(type, typeDefs);

        var sb = new StringBuilder();

        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"using Microsoft.CodeAnalysis.Lightup;");
        sb.AppendLine($"using System;");
        sb.AppendLine();
        sb.AppendLine($"namespace {targetNamespace}");
        sb.AppendLine($"{{");
        sb.AppendLine($"    public readonly struct {targetName}");
        sb.AppendLine($"    {{");
        sb.AppendLine($"        private const string WrappedTypeName = \"{type.FullName}\";");
        sb.AppendLine();
        sb.AppendLine($"        private static readonly Type? WrappedType;");
        foreach (var property in instanceProperties)
        {
            var funcDeclText = GetPropertyFuncDeclText(property, baseTypeName, typeDefs);
            sb.AppendLine($"        private static readonly {funcDeclText} {property.Name}Func;");
        }
        foreach (var method in instanceMethods)
        {
            var index = instanceMethods.IndexOf(method);
            var funcDeclText = GetMethodFuncDeclText(method, baseTypeName, typeDefs);
            sb.AppendLine($"        private static readonly {funcDeclText} {method.Name}Func{index};");
        }
        sb.AppendLine();
        sb.AppendLine($"        private readonly {baseTypeName}? WrappedObject;");
        sb.AppendLine();
        sb.AppendLine($"        static {targetName}()");
        sb.AppendLine($"        {{");
        sb.AppendLine($"            WrappedType = LightupHelper.FindSyntaxType(WrappedTypeName);");
        foreach (var property in instanceProperties)
        {
            sb.AppendLine($"            {property.Name}Func = LightupHelper.CreateGetAccessor<{baseTypeName}?, {GetTypeDeclText(property, typeDefs)}>(WrappedType, nameof({property.Name}));");
        }
        foreach (var method in instanceMethods)
        {
            var index = instanceMethods.IndexOf(method);
            var createMethod = method.ReturnType != typeof(void) ? "CreateMethodAccessor" : "CreateVoidMethodAccessor";
            sb.AppendLine($"            {method.Name}Func{index} = LightupHelper.{createMethod}<{targetName}, {baseTypeName}?, {GetParametersTypeDeclText(method.GetParameters(), typeDefs)}{(method.ReturnType != typeof(void) ? $", {targetName}" : "")}>(WrappedType, nameof({method.Name}));");
        }
        sb.AppendLine($"        }}");
        sb.AppendLine();
        sb.AppendLine($"        private {targetName}({baseTypeName}? obj)");
        sb.AppendLine($"        {{");
        sb.AppendLine($"            WrappedObject = obj;");
        sb.AppendLine($"        }}");
        foreach (var property in instanceProperties)
        {
            sb.AppendLine();
            sb.AppendLine($"        public readonly {GetTypeDeclText(property, typeDefs)} {property.Name}");
            sb.AppendLine($"            => {property.Name}Func(WrappedObject);");
        }
        sb.AppendLine();
        sb.AppendLine($"        public static implicit operator {baseTypeName}?({targetName} obj)");
        sb.AppendLine($"            => obj.Unwrap();");
        sb.AppendLine();
        sb.AppendLine($"        public static bool Is(object? obj)");
        sb.AppendLine($"            => LightupHelper.Is(obj, WrappedType);");
        sb.AppendLine();
        sb.AppendLine($"        public static {targetName} As(object? obj)");
        sb.AppendLine($"        {{");
        sb.AppendLine($"            var obj2 = LightupHelper.As<{baseTypeName}>(obj, WrappedType);");
        sb.AppendLine($"            return new {targetName}(obj2);");
        sb.AppendLine($"        }}");
        sb.AppendLine();
        sb.AppendLine($"        public {baseTypeName}? Unwrap()");
        sb.AppendLine($"            => WrappedObject;");
        foreach (var method in instanceMethods)
        {
            var index = instanceMethods.IndexOf(method);
            sb.AppendLine();
            sb.AppendLine($"        public readonly {(method.ReturnType != typeof(void) ? GetTypeDeclText(method.ReturnType, typeDefs) : "void")} {method.Name}({GetParametersDeclText(method.GetParameters(), typeDefs)})");
            sb.AppendLine($"            => {method.Name}Func{index}(WrappedObject, {string.Join(", ", method.GetParameters().Select(x => x.Name))});");
        }
        sb.AppendLine($"    }}");
        sb.AppendLine($"}}");

        var source = sb.ToString();
        return (targetName, source);
    }

    private static List<PropertyInfo> GetInstanceProperties(Type type)
    {
        // Handle static properties?
        var result = type
            .GetMembers(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
            .OfType<PropertyInfo>()
            .OrderBy(x => x.Name)
            .ToList();
        return result;
    }

    private static List<MethodInfo> GetInstanceMethods(Type type)
    {
        // TODO: Handle generic methods
        // TODO: Handle static methods?
        var result = type
            .GetMembers(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
            .OfType<MethodInfo>()
            .Where(x => !x.Attributes.HasFlag(MethodAttributes.SpecialName))
            .Where(x => !x.IsGenericMethod)
            .OrderBy(x => x.Name).ThenBy(x => x.GetParameters().Length)
            .ToList();
        return result;
    }

    private static string GetPropertyFuncDeclText(PropertyInfo property, string baseTypeName, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var nullabilityInfo = new NullabilityInfoContext().Create(property);

        var sb = new StringBuilder();

        sb.Append($"Func<{baseTypeName}?, ");
        AppendTypeDeclText(sb, property.PropertyType, typeDefs);
        sb.Append(nullabilityInfo.ReadState != NullabilityState.NotNull ? "?" : "");
        sb.Append('>');

        var result = sb.ToString();
        return result;
    }

    private static string GetMethodFuncDeclText(MethodInfo method, string baseTypeName, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var nullabilityInfoContext = new NullabilityInfoContext();

        var sb = new StringBuilder();

        sb.Append(method.ReturnType != typeof(void) ? "Func" : "Action");
        sb.Append($"<{baseTypeName}?");

        foreach (var parameter in method.GetParameters())
        {
            sb.Append(", ");
            AppendTypeDeclText(sb, parameter.ParameterType, typeDefs);
            var nullabilityInfo = nullabilityInfoContext.Create(parameter);
            sb.Append(nullabilityInfo.WriteState != NullabilityState.NotNull ? "?" : "");
        }

        if (method.ReturnType != typeof(void))
        {
            sb.Append(", ");
            AppendTypeDeclText(sb, method.ReturnType, typeDefs);
        }

        sb.Append('>');

        var result = sb.ToString();
        return result;
    }

    private static string GetParametersTypeDeclText(IEnumerable<ParameterInfo> parameters, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var nullabilityInfoContext = new NullabilityInfoContext();

        var sb = new StringBuilder();
        foreach (var parameter in parameters)
        {
            if (sb.Length > 0)
            {
                sb.Append(", ");
            }

            AppendTypeDeclText(sb, parameter.ParameterType, typeDefs);
            var nullabilityInfo = nullabilityInfoContext.Create(parameter);
            sb.Append(nullabilityInfo.WriteState != NullabilityState.NotNull ? "?" : "");
        }

        var result = sb.ToString();
        return result;
    }

    private static string GetParametersDeclText(IEnumerable<ParameterInfo> parameters, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var nullabilityInfoContext = new NullabilityInfoContext();

        var sb = new StringBuilder();
        foreach (var parameter in parameters)
        {
            if (sb.Length > 0)
            {
                sb.Append(", ");
            }

            AppendTypeDeclText(sb, parameter.ParameterType, typeDefs);
            var nullabilityInfo = nullabilityInfoContext.Create(parameter);
            sb.Append(nullabilityInfo.WriteState != NullabilityState.NotNull ? "?" : "");
            sb.Append(' ');
            sb.Append(parameter.Name);
        }

        var result = sb.ToString();
        return result;
    }

    private static string GetTypeDeclText(PropertyInfo property, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var nullabilityInfo = new NullabilityInfoContext().Create(property);

        var sb = new StringBuilder();
        AppendTypeDeclText(sb, property.PropertyType, typeDefs);
        sb.Append(nullabilityInfo.ReadState != NullabilityState.NotNull ? "?" : "");
        var result = sb.ToString();
        return result;
    }

    private static string GetTypeDeclText(Type type, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        var sb = new StringBuilder();
        AppendTypeDeclText(sb, type, typeDefs);
        var result = sb.ToString();
        return result;
    }

    private static void AppendTypeDeclText(StringBuilder sb, Type type, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        if (type.IsGenericType)
        {
            var typeName = type.Name.Substring(0, type.Name.IndexOf('`'));
            sb.Append($"{typeName}<");
            for (var i = 0; i < type.GenericTypeArguments.Length; i++)
            {
                if (i > 0)
                {
                    sb.Append(", ");
                }
                AppendTypeDeclText(sb, type.GenericTypeArguments[i], typeDefs);
            }
            sb.Append('>');
        }
        else if (type.IsArray)
        {
            var elementType = type.GetElementType();
            Assert.IsTrue(elementType != null, "Could not get array's element type");
            AppendTypeDeclText(sb, elementType, typeDefs);
            sb.Append("[]");
        }
        else
        {
            var isNew = IsNewType(type, typeDefs);
            sb.Append($"{type.Name}{(isNew ? "Wrapper" : "")}");
        }
    }

    private static string GetTargetFolder(Type type, string targetProjectPath)
    {
        var sourceNamespace = type.Namespace!;
        var targetNamespace = sourceNamespace + ".Lightup";
        var targetFolder = targetNamespace.Replace("Microsoft.CodeAnalysis", "").TrimStart('.').Replace('.', Path.DirectorySeparatorChar);
        return Path.Combine(targetProjectPath, targetFolder);
    }

    private static string GetBaseTypeName(Type type, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        while (true)
        {
            var baseType = type.BaseType;
            Assert.IsTrue(baseType != null, "Could not get base type");
            if (!IsNewType(baseType, typeDefs))
            {
                return baseType.Name;
            }

            type = baseType;
        }
    }

    private static bool IsNewType(Type type, IReadOnlyDictionary<string, TypeDefinition> typeDefs)
    {
        return typeDefs.TryGetValue(type.FullName!, out var typeDef) && typeDef.AssemblyVersion != null;
    }
}
