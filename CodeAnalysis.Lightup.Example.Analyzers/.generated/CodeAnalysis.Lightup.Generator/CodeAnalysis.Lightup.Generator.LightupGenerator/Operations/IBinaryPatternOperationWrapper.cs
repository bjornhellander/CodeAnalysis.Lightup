// <auto-generated/>
#nullable enable

namespace Microsoft.CodeAnalysis.Operations.Lightup
{
    /// <summary>Provides lightup support for interface Microsoft.CodeAnalysis.Operations.IBinaryPatternOperation. Added in version 3.8.0.0.</summary>
    public readonly partial struct IBinaryPatternOperationWrapper
    {
        private const string WrappedTypeName = "Microsoft.CodeAnalysis.Operations.IBinaryPatternOperation";

        private static readonly global::System.Type? WrappedType; // NOTE: Used via reflection

        private delegate global::Microsoft.CodeAnalysis.Operations.IPatternOperation LeftPatternGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate global::Microsoft.CodeAnalysis.Operations.BinaryOperatorKind OperatorKindGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);
        private delegate global::Microsoft.CodeAnalysis.Operations.IPatternOperation RightPatternGetterDelegate(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? _obj);

        private static readonly LeftPatternGetterDelegate LeftPatternGetterFunc;
        private static readonly OperatorKindGetterDelegate OperatorKindGetterFunc;
        private static readonly RightPatternGetterDelegate RightPatternGetterFunc;

        private readonly global::Microsoft.CodeAnalysis.Operations.IPatternOperation? wrappedObject;

        static IBinaryPatternOperationWrapper()
        {
            WrappedType = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.FindType(WrappedTypeName);

            LeftPatternGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<LeftPatternGetterDelegate>(WrappedType, nameof(LeftPattern));
            OperatorKindGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<OperatorKindGetterDelegate>(WrappedType, nameof(OperatorKind));
            RightPatternGetterFunc = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.CreateInstanceGetAccessor<RightPatternGetterDelegate>(WrappedType, nameof(RightPattern));
        }

        private IBinaryPatternOperationWrapper(global::Microsoft.CodeAnalysis.Operations.IPatternOperation? obj)
        {
            wrappedObject = obj;
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly global::Microsoft.CodeAnalysis.Operations.IPatternOperation LeftPattern
        {
            get => LeftPatternGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly global::Microsoft.CodeAnalysis.Operations.BinaryOperatorKind OperatorKind
        {
            get => OperatorKindGetterFunc(wrappedObject);
        }

        /// <summary>Property added in version 3.8.0.0.</summary>
        public readonly global::Microsoft.CodeAnalysis.Operations.IPatternOperation RightPattern
        {
            get => RightPatternGetterFunc(wrappedObject);
        }

        /// <summary>Returns true if the specified object is compatible with this wrapper.</summary>
        public static bool Is(global::System.Object? obj)
            => global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.Is(obj, WrappedType);

        /// <summary>Creates a wrapper object containing the specified object. If the object is not compatible with this wrapper, null will be stored in the wrapper instead.</summary>
        public static IBinaryPatternOperationWrapper As(global::System.Object? obj)
        {
            var obj2 = global::Microsoft.CodeAnalysis.Lightup.CommonLightupHelper.As<global::Microsoft.CodeAnalysis.Operations.IPatternOperation>(obj, WrappedType);
            return new IBinaryPatternOperationWrapper(obj2);
        }

        /// <summary>Returns the wrapped object.</summary>
        public global::Microsoft.CodeAnalysis.Operations.IPatternOperation? Unwrap()
            => wrappedObject;
    }
}
